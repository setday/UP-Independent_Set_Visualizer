/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={48:t=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function i(t,n){for(var i=0;i<n.length;i++){var r=n[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,a=function(t,n){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var r=i.call(t,"string");if("object"!==e(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===e(a)?a:String(a)),r)}var a}var r=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.vertexCount=0,this.edges=[],this.independentSet=[]}var e,r;return e=t,(r=[{key:"clear",value:function(){this.vertexCount=0,this.edges=[],this.independentSet=[]}},{key:"loadGraph",value:function(t){var e=this;this.clear(),JSON.parse(t).forEach((function(t){e.addEdge(t)}))}},{key:"addEdge",value:function(t){var e,i,r=(i=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,r,a,s,o=[],l=!0,c=!1;try{if(a=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;l=!1}else for(;!(l=(i=a.call(n)).done)&&(o.push(i.value),o.length!==e);l=!0);}catch(t){c=!0,r=t}finally{try{if(!l&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(c)throw r}}return o}}(e,i)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?n(t,e):void 0}}(e,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],s=r[1];this.edges.push([a,s]),this.vertexCount=Math.max(this.vertexCount,a+1,s+1)}},{key:"loadIndependentSet",value:function(t){this.independentSet=JSON.parse(t)}}])&&i(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=r}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(48),e=n.n(t);const i="159",r=1,a=2,s=3,o=100,l=0,c=1,h=2,u=0,d=1,p=2,f=3,m=4,g=5,_=301,v=302,x=306,y=1e3,M=1001,E=1002,S=1003,b=1005,T=1006,w=1008,A=1009,R=1012,C=1014,L=1015,P=1016,U=1020,D=1023,I=1026,N=1027,O=33776,F=33777,z=33778,B=33779,H=36492,V=2300,G=2301,k=2302,W=3001,X="",j="srgb",Y="srgb-linear",q="display-p3",$="display-p3-linear",K="linear",Z="srgb",J="rec709",Q="p3",tt=7680,et="300 es",nt=1035,it=2e3,rt=2001;class at{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,i=n.length;e<i;e++)n[e].call(this,t);t.target=null}}}const st=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],ot=Math.PI/180,lt=180/Math.PI;function ct(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(st[255&t]+st[t>>8&255]+st[t>>16&255]+st[t>>24&255]+"-"+st[255&e]+st[e>>8&255]+"-"+st[e>>16&15|64]+st[e>>24&255]+"-"+st[63&n|128]+st[n>>8&255]+"-"+st[n>>16&255]+st[n>>24&255]+st[255&i]+st[i>>8&255]+st[i>>16&255]+st[i>>24&255]).toLowerCase()}function ht(t,e,n){return Math.max(e,Math.min(n,t))}function ut(t,e,n){return(1-n)*t+n*e}function dt(t){return 0==(t&t-1)&&0!==t}function pt(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}function ft(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return t/4294967295;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int32Array:return Math.max(t/2147483647,-1);case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function mt(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return Math.round(4294967295*t);case Uint16Array:return Math.round(65535*t);case Uint8Array:return Math.round(255*t);case Int32Array:return Math.round(2147483647*t);case Int16Array:return Math.round(32767*t);case Int8Array:return Math.round(127*t);default:throw new Error("Invalid component type.")}}const gt=ot;class _t{constructor(t=0,e=0){_t.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(ht(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*n-a*i+t.x,this.y=r*i+a*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class vt{constructor(t,e,n,i,r,a,s,o,l){vt.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==t&&this.set(t,e,n,i,r,a,s,o,l)}set(t,e,n,i,r,a,s,o,l){const c=this.elements;return c[0]=t,c[1]=i,c[2]=s,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=a,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],s=n[3],o=n[6],l=n[1],c=n[4],h=n[7],u=n[2],d=n[5],p=n[8],f=i[0],m=i[3],g=i[6],_=i[1],v=i[4],x=i[7],y=i[2],M=i[5],E=i[8];return r[0]=a*f+s*_+o*y,r[3]=a*m+s*v+o*M,r[6]=a*g+s*x+o*E,r[1]=l*f+c*_+h*y,r[4]=l*m+c*v+h*M,r[7]=l*g+c*x+h*E,r[2]=u*f+d*_+p*y,r[5]=u*m+d*v+p*M,r[8]=u*g+d*x+p*E,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8];return e*a*c-e*s*l-n*r*c+n*s*o+i*r*l-i*a*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],h=c*a-s*l,u=s*o-c*r,d=l*r-a*o,p=e*h+n*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const f=1/p;return t[0]=h*f,t[1]=(i*l-c*n)*f,t[2]=(s*n-i*a)*f,t[3]=u*f,t[4]=(c*e-i*o)*f,t[5]=(i*r-s*e)*f,t[6]=d*f,t[7]=(n*o-l*e)*f,t[8]=(a*e-n*r)*f,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,a,s){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*a+l*s)+a+t,-i*l,i*o,-i*(-l*a+o*s)+s+e,0,0,1),this}scale(t,e){return this.premultiply(xt.makeScale(t,e)),this}rotate(t){return this.premultiply(xt.makeRotation(-t)),this}translate(t,e){return this.premultiply(xt.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}const xt=new vt;function yt(t){for(let e=t.length-1;e>=0;--e)if(t[e]>=65535)return!0;return!1}function Mt(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function Et(){const t=Mt("canvas");return t.style.display="block",t}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;const St={};function bt(t){t in St||(St[t]=!0,console.warn(t))}const Tt=(new vt).set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),wt=(new vt).set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),At={[Y]:{transfer:K,primaries:J,toReference:t=>t,fromReference:t=>t},[j]:{transfer:Z,primaries:J,toReference:t=>t.convertSRGBToLinear(),fromReference:t=>t.convertLinearToSRGB()},[$]:{transfer:K,primaries:Q,toReference:t=>t.applyMatrix3(wt),fromReference:t=>t.applyMatrix3(Tt)},[q]:{transfer:Z,primaries:Q,toReference:t=>t.convertSRGBToLinear().applyMatrix3(wt),fromReference:t=>t.applyMatrix3(Tt).convertLinearToSRGB()}},Rt=new Set([Y,$]),Ct={enabled:!0,_workingColorSpace:Y,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(t){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!t},get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(t){if(!Rt.has(t))throw new Error(`Unsupported working color space, "${t}".`);this._workingColorSpace=t},convert:function(t,e,n){if(!1===this.enabled||e===n||!e||!n)return t;const i=At[e].toReference;return(0,At[n].fromReference)(i(t))},fromWorkingColorSpace:function(t,e){return this.convert(t,this._workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this._workingColorSpace)},getPrimaries:function(t){return At[t].primaries},getTransfer:function(t){return t===X?K:At[t].transfer}};function Lt(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Pt(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}let Ut;class Dt{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Ut&&(Ut=Mt("canvas")),Ut.width=t.width,Ut.height=t.height;const n=Ut.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Ut}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=Mt("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),r=i.data;for(let t=0;t<r.length;t++)r[t]=255*Lt(r[t]/255);return n.putImageData(i,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*Lt(e[t]/255)):e[t]=Lt(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let It=0;class Nt{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:It++}),this.uuid=ct(),this.data=t,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let t;if(Array.isArray(i)){t=[];for(let e=0,n=i.length;e<n;e++)i[e].isDataTexture?t.push(Ot(i[e].image)):t.push(Ot(i[e]))}else t=Ot(i);n.url=t}return e||(t.images[this.uuid]=n),n}}function Ot(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?Dt.getDataURL(t):t.data?{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Ft=0;class zt extends at{constructor(t=zt.DEFAULT_IMAGE,e=zt.DEFAULT_MAPPING,n=1001,i=1001,r=1006,a=1008,s=1023,o=1009,l=zt.DEFAULT_ANISOTROPY,c=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Ft++}),this.uuid=ct(),this.name="",this.source=new Nt(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=a,this.anisotropy=l,this.format=s,this.internalFormat=null,this.type=o,this.offset=new _t(0,0),this.repeat=new _t(1,1),this.center=new _t(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new vt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,"string"==typeof c?this.colorSpace=c:(bt("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=c===W?j:X),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case y:t.x=t.x-Math.floor(t.x);break;case M:t.x=t.x<0?0:1;break;case E:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case y:t.y=t.y-Math.floor(t.y);break;case M:t.y=t.y<0?0:1;break;case E:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return bt("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===j?W:3e3}set encoding(t){bt("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=t===W?j:X}}zt.DEFAULT_IMAGE=null,zt.DEFAULT_MAPPING=300,zt.DEFAULT_ANISOTROPY=1;class Bt{constructor(t=0,e=0,n=0,i=1){Bt.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const a=.01,s=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],f=o[2],m=o[6],g=o[10];if(Math.abs(c-u)<a&&Math.abs(h-f)<a&&Math.abs(p-m)<a){if(Math.abs(c+u)<s&&Math.abs(h+f)<s&&Math.abs(p+m)<s&&Math.abs(l+d+g-3)<s)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,_=(g+1)/2,v=(c+u)/4,x=(h+f)/4,y=(p+m)/4;return t>o&&t>_?t<a?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(t),i=v/n,r=x/n):o>_?o<a?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=v/i,r=y/i):_<a?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(_),n=x/r,i=y/r),this.set(n,i,r,e),this}let _=Math.sqrt((m-p)*(m-p)+(h-f)*(h-f)+(u-c)*(u-c));return Math.abs(_)<.001&&(_=1),this.x=(m-p)/_,this.y=(h-f)/_,this.z=(u-c)/_,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Ht extends at{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Bt(0,0,t,e),this.scissorTest=!1,this.viewport=new Bt(0,0,t,e);const i={width:t,height:e,depth:1};void 0!==n.encoding&&(bt("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),n.colorSpace=n.encoding===W?j:X),n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:T,depthBuffer:!0,stencilBuffer:!1,depthTexture:null,samples:0},n),this.texture=new zt(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps,this.texture.internalFormat=n.internalFormat,this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}setSize(t,e,n=1){this.width===t&&this.height===e&&this.depth===n||(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new Nt(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Vt extends Ht{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class Gt extends zt{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=S,this.minFilter=S,this.wrapR=M,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class kt extends zt{constructor(t=null,e=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=S,this.minFilter=S,this.wrapR=M,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Wt{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,r,a,s){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const u=r[a+0],d=r[a+1],p=r[a+2],f=r[a+3];if(0===s)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===s)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=f);if(h!==f||o!==u||l!==d||c!==p){let t=1-s;const e=o*u+l*d+c*p+h*f,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),a=Math.atan2(r,e*n);t=Math.sin(t*a)/r,s=Math.sin(s*a)/r}const r=s*n;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+f*r,t===1-s){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,a){const s=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=r[a],u=r[a+1],d=r[a+2],p=r[a+3];return t[e]=s*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-s*d,t[e+2]=l*p+c*d+s*u-o*h,t[e+3]=c*p-s*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){const n=t._x,i=t._y,r=t._z,a=t._order,s=Math.cos,o=Math.sin,l=s(n/2),c=s(i/2),h=s(r/2),u=o(n/2),d=o(i/2),p=o(r/2);switch(a){case"XYZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"YXZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"ZXY":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"ZYX":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"YZX":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case"XZY":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],a=e[1],s=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=n+s+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(a-i)*t}else if(n>s&&n>h){const t=2*Math.sqrt(1+n-s-h);this._w=(c-o)/t,this._x=.25*t,this._y=(i+a)/t,this._z=(r+l)/t}else if(s>h){const t=2*Math.sqrt(1+s-n-h);this._w=(r-l)/t,this._x=(i+a)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-n-s);this._w=(a-i)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(ht(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,a=t._w,s=e._x,o=e._y,l=e._z,c=e._w;return this._x=n*c+a*s+i*l-r*o,this._y=i*c+a*o+r*s-n*l,this._z=r*c+a*l+n*o-i*s,this._w=a*c-n*s-i*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,i=this._y,r=this._z,a=this._w;let s=a*t._w+n*t._x+i*t._y+r*t._z;if(s<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,s=-s):this.copy(t),s>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;const o=1-s*s;if(o<=Number.EPSILON){const t=1-e;return this._w=t*a+e*this._w,this._x=t*n+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,s),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=a*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=Math.random(),e=Math.sqrt(1-t),n=Math.sqrt(t),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(e*Math.cos(i),n*Math.sin(r),n*Math.cos(r),e*Math.sin(i))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Xt{constructor(t=0,e=0,n=0){Xt.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(Yt.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Yt.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,a=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,a=t.y,s=t.z,o=t.w,l=2*(a*i-s*n),c=2*(s*e-r*i),h=2*(r*n-a*e);return this.x=e+o*l+a*h-s*c,this.y=n+o*c+s*l-r*h,this.z=i+o*h+r*c-a*l,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,a=e.x,s=e.y,o=e.z;return this.x=i*o-r*s,this.y=r*a-n*o,this.z=n*s-i*a,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return jt.copy(this).projectOnVector(t),this.sub(jt)}reflect(t){return this.sub(jt.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(ht(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=2*(Math.random()-.5),e=Math.random()*Math.PI*2,n=Math.sqrt(1-t**2);return this.x=n*Math.cos(e),this.y=n*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const jt=new Xt,Yt=new Wt;class qt{constructor(t=new Xt(1/0,1/0,1/0),e=new Xt(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(Kt.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(Kt.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Kt.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(void 0!==n){const i=n.getAttribute("position");if(!0===e&&void 0!==i&&!0!==t.isInstancedMesh)for(let e=0,n=i.count;e<n;e++)!0===t.isMesh?t.getVertexPosition(e,Kt):Kt.fromBufferAttribute(i,e),Kt.applyMatrix4(t.matrixWorld),this.expandByPoint(Kt);else void 0!==t.boundingBox?(null===t.boundingBox&&t.computeBoundingBox(),Zt.copy(t.boundingBox)):(null===n.boundingBox&&n.computeBoundingBox(),Zt.copy(n.boundingBox)),Zt.applyMatrix4(t.matrixWorld),this.union(Zt)}const i=t.children;for(let t=0,n=i.length;t<n;t++)this.expandByObject(i[t],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Kt),Kt.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(re),ae.subVectors(this.max,re),Jt.subVectors(t.a,re),Qt.subVectors(t.b,re),te.subVectors(t.c,re),ee.subVectors(Qt,Jt),ne.subVectors(te,Qt),ie.subVectors(Jt,te);let e=[0,-ee.z,ee.y,0,-ne.z,ne.y,0,-ie.z,ie.y,ee.z,0,-ee.x,ne.z,0,-ne.x,ie.z,0,-ie.x,-ee.y,ee.x,0,-ne.y,ne.x,0,-ie.y,ie.x,0];return!!le(e,Jt,Qt,te,ae)&&(e=[1,0,0,0,1,0,0,0,1],!!le(e,Jt,Qt,te,ae)&&(se.crossVectors(ee,ne),e=[se.x,se.y,se.z],le(e,Jt,Qt,te,ae)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Kt).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=.5*this.getSize(Kt).length()),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||($t[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),$t[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),$t[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),$t[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),$t[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),$t[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),$t[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),$t[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints($t)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const $t=[new Xt,new Xt,new Xt,new Xt,new Xt,new Xt,new Xt,new Xt],Kt=new Xt,Zt=new qt,Jt=new Xt,Qt=new Xt,te=new Xt,ee=new Xt,ne=new Xt,ie=new Xt,re=new Xt,ae=new Xt,se=new Xt,oe=new Xt;function le(t,e,n,i,r){for(let a=0,s=t.length-3;a<=s;a+=3){oe.fromArray(t,a);const s=r.x*Math.abs(oe.x)+r.y*Math.abs(oe.y)+r.z*Math.abs(oe.z),o=e.dot(oe),l=n.dot(oe),c=i.dot(oe);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>s)return!1}return!0}const ce=new qt,he=new Xt,ue=new Xt;class de{constructor(t=new Xt,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):ce.setFromPoints(t).getCenter(n);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;he.subVectors(t,this.center);const e=he.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.addScaledVector(he,n/t),this.radius+=n}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(!0===this.center.equals(t.center)?this.radius=Math.max(this.radius,t.radius):(ue.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(he.copy(t.center).add(ue)),this.expandByPoint(he.copy(t.center).sub(ue))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const pe=new Xt,fe=new Xt,me=new Xt,ge=new Xt,_e=new Xt,ve=new Xt,xe=new Xt;class ye{constructor(t=new Xt,e=new Xt(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,pe)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=pe.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(pe.copy(this.origin).addScaledVector(this.direction,e),pe.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){fe.copy(t).add(e).multiplyScalar(.5),me.copy(e).sub(t).normalize(),ge.copy(this.origin).sub(fe);const r=.5*t.distanceTo(e),a=-this.direction.dot(me),s=ge.dot(this.direction),o=-ge.dot(me),l=ge.lengthSq(),c=Math.abs(1-a*a);let h,u,d,p;if(c>0)if(h=a*o-s,u=a*s-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+a*u+2*s)+u*(a*h+u+2*o)+l}else u=r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-a*r+s)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(a*r+s)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=a>0?-r:r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,h),i&&i.copy(fe).addScaledVector(me,u),d}intersectSphere(t,e){pe.subVectors(t.center,this.origin);const n=pe.dot(this.direction),i=pe.dot(pe)-n*n,r=t.radius*t.radius;if(i>r)return null;const a=Math.sqrt(r-i),s=n-a,o=n+a;return o<0?null:s<0?this.at(o,e):this.at(s,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,a,s,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,a=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,a=(t.min.y-u.y)*c),n>a||r>i?null:((r>n||isNaN(n))&&(n=r),(a<i||isNaN(i))&&(i=a),h>=0?(s=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(s=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),n>o||s>i?null:((s>n||n!=n)&&(n=s),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,pe)}intersectTriangle(t,e,n,i,r){_e.subVectors(e,t),ve.subVectors(n,t),xe.crossVectors(_e,ve);let a,s=this.direction.dot(xe);if(s>0){if(i)return null;a=1}else{if(!(s<0))return null;a=-1,s=-s}ge.subVectors(this.origin,t);const o=a*this.direction.dot(ve.crossVectors(ge,ve));if(o<0)return null;const l=a*this.direction.dot(_e.cross(ge));if(l<0)return null;if(o+l>s)return null;const c=-a*ge.dot(xe);return c<0?null:this.at(c/s,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Me{constructor(t,e,n,i,r,a,s,o,l,c,h,u,d,p,f,m){Me.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==t&&this.set(t,e,n,i,r,a,s,o,l,c,h,u,d,p,f,m)}set(t,e,n,i,r,a,s,o,l,c,h,u,d,p,f,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=a,g[9]=s,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Me).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Ee.setFromMatrixColumn(t,0).length(),r=1/Ee.setFromMatrixColumn(t,1).length(),a=1/Ee.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,r=t.z,a=Math.cos(n),s=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){const t=a*c,n=a*h,i=s*c,r=s*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=n+i*l,e[5]=t-r*l,e[9]=-s*o,e[2]=r-t*l,e[6]=i+n*l,e[10]=a*o}else if("YXZ"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t+r*s,e[4]=i*s-n,e[8]=a*l,e[1]=a*h,e[5]=a*c,e[9]=-s,e[2]=n*s-i,e[6]=r+t*s,e[10]=a*o}else if("ZXY"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t-r*s,e[4]=-a*h,e[8]=i+n*s,e[1]=n+i*s,e[5]=a*c,e[9]=r-t*s,e[2]=-a*l,e[6]=s,e[10]=a*o}else if("ZYX"===t.order){const t=a*c,n=a*h,i=s*c,r=s*h;e[0]=o*c,e[4]=i*l-n,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=n*l-i,e[2]=-l,e[6]=s*o,e[10]=a*o}else if("YZX"===t.order){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=a*c,e[9]=-s*c,e[2]=-l*c,e[6]=n*h+i,e[10]=t-r*h}else if("XZY"===t.order){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=a*c,e[9]=n*h-i,e[2]=i*h-n,e[6]=s*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(be,t,Te)}lookAt(t,e,n){const i=this.elements;return Re.subVectors(t,e),0===Re.lengthSq()&&(Re.z=1),Re.normalize(),we.crossVectors(n,Re),0===we.lengthSq()&&(1===Math.abs(n.z)?Re.x+=1e-4:Re.z+=1e-4,Re.normalize(),we.crossVectors(n,Re)),we.normalize(),Ae.crossVectors(Re,we),i[0]=we.x,i[4]=Ae.x,i[8]=Re.x,i[1]=we.y,i[5]=Ae.y,i[9]=Re.y,i[2]=we.z,i[6]=Ae.z,i[10]=Re.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],s=n[4],o=n[8],l=n[12],c=n[1],h=n[5],u=n[9],d=n[13],p=n[2],f=n[6],m=n[10],g=n[14],_=n[3],v=n[7],x=n[11],y=n[15],M=i[0],E=i[4],S=i[8],b=i[12],T=i[1],w=i[5],A=i[9],R=i[13],C=i[2],L=i[6],P=i[10],U=i[14],D=i[3],I=i[7],N=i[11],O=i[15];return r[0]=a*M+s*T+o*C+l*D,r[4]=a*E+s*w+o*L+l*I,r[8]=a*S+s*A+o*P+l*N,r[12]=a*b+s*R+o*U+l*O,r[1]=c*M+h*T+u*C+d*D,r[5]=c*E+h*w+u*L+d*I,r[9]=c*S+h*A+u*P+d*N,r[13]=c*b+h*R+u*U+d*O,r[2]=p*M+f*T+m*C+g*D,r[6]=p*E+f*w+m*L+g*I,r[10]=p*S+f*A+m*P+g*N,r[14]=p*b+f*R+m*U+g*O,r[3]=_*M+v*T+x*C+y*D,r[7]=_*E+v*w+x*L+y*I,r[11]=_*S+v*A+x*P+y*N,r[15]=_*b+v*R+x*U+y*O,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],a=t[1],s=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-i*l*h-r*s*u+n*l*u+i*s*d-n*o*d)+t[7]*(+e*o*d-e*l*u+r*a*u-i*a*d+i*l*c-r*o*c)+t[11]*(+e*l*h-e*s*d-r*a*h+n*a*d+r*s*c-n*l*c)+t[15]*(-i*s*c-e*o*h+e*s*u+i*a*h-n*a*u+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15],_=h*m*l-f*u*l+f*o*d-s*m*d-h*o*g+s*u*g,v=p*u*l-c*m*l-p*o*d+a*m*d+c*o*g-a*u*g,x=c*f*l-p*h*l+p*s*d-a*f*d-c*s*g+a*h*g,y=p*h*o-c*f*o-p*s*u+a*f*u+c*s*m-a*h*m,M=e*_+n*v+i*x+r*y;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const E=1/M;return t[0]=_*E,t[1]=(f*u*r-h*m*r-f*i*d+n*m*d+h*i*g-n*u*g)*E,t[2]=(s*m*r-f*o*r+f*i*l-n*m*l-s*i*g+n*o*g)*E,t[3]=(h*o*r-s*u*r-h*i*l+n*u*l+s*i*d-n*o*d)*E,t[4]=v*E,t[5]=(c*m*r-p*u*r+p*i*d-e*m*d-c*i*g+e*u*g)*E,t[6]=(p*o*r-a*m*r-p*i*l+e*m*l+a*i*g-e*o*g)*E,t[7]=(a*u*r-c*o*r+c*i*l-e*u*l-a*i*d+e*o*d)*E,t[8]=x*E,t[9]=(p*h*r-c*f*r-p*n*d+e*f*d+c*n*g-e*h*g)*E,t[10]=(a*f*r-p*s*r+p*n*l-e*f*l-a*n*g+e*s*g)*E,t[11]=(c*s*r-a*h*r-c*n*l+e*h*l+a*n*d-e*s*d)*E,t[12]=y*E,t[13]=(c*f*i-p*h*i+p*n*u-e*f*u-c*n*m+e*h*m)*E,t[14]=(p*s*i-a*f*i-p*n*o+e*f*o+a*n*m-e*s*m)*E,t[15]=(a*h*i-c*s*i+c*n*o-e*h*o-a*n*u+e*s*u)*E,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,a=t.x,s=t.y,o=t.z,l=r*a,c=r*s;return this.set(l*a+n,l*s-i*o,l*o+i*s,0,l*s+i*o,c*s+n,c*o-i*a,0,l*o-i*s,c*o+i*a,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,a){return this.set(1,n,r,0,t,1,a,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,a=e._y,s=e._z,o=e._w,l=r+r,c=a+a,h=s+s,u=r*l,d=r*c,p=r*h,f=a*c,m=a*h,g=s*h,_=o*l,v=o*c,x=o*h,y=n.x,M=n.y,E=n.z;return i[0]=(1-(f+g))*y,i[1]=(d+x)*y,i[2]=(p-v)*y,i[3]=0,i[4]=(d-x)*M,i[5]=(1-(u+g))*M,i[6]=(m+_)*M,i[7]=0,i[8]=(p+v)*E,i[9]=(m-_)*E,i[10]=(1-(u+f))*E,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=Ee.set(i[0],i[1],i[2]).length();const a=Ee.set(i[4],i[5],i[6]).length(),s=Ee.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],Se.copy(this);const o=1/r,l=1/a,c=1/s;return Se.elements[0]*=o,Se.elements[1]*=o,Se.elements[2]*=o,Se.elements[4]*=l,Se.elements[5]*=l,Se.elements[6]*=l,Se.elements[8]*=c,Se.elements[9]*=c,Se.elements[10]*=c,e.setFromRotationMatrix(Se),n.x=r,n.y=a,n.z=s,this}makePerspective(t,e,n,i,r,a,s=2e3){const o=this.elements,l=2*r/(e-t),c=2*r/(n-i),h=(e+t)/(e-t),u=(n+i)/(n-i);let d,p;if(s===it)d=-(a+r)/(a-r),p=-2*a*r/(a-r);else{if(s!==rt)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+s);d=-a/(a-r),p=-a*r/(a-r)}return o[0]=l,o[4]=0,o[8]=h,o[12]=0,o[1]=0,o[5]=c,o[9]=u,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(t,e,n,i,r,a,s=2e3){const o=this.elements,l=1/(e-t),c=1/(n-i),h=1/(a-r),u=(e+t)*l,d=(n+i)*c;let p,f;if(s===it)p=(a+r)*h,f=-2*h;else{if(s!==rt)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+s);p=r*h,f=-1*h}return o[0]=2*l,o[4]=0,o[8]=0,o[12]=-u,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=f,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const Ee=new Xt,Se=new Me,be=new Xt(0,0,0),Te=new Xt(1,1,1),we=new Xt,Ae=new Xt,Re=new Xt,Ce=new Me,Le=new Wt;class Pe{constructor(t=0,e=0,n=0,i=Pe.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],a=i[4],s=i[8],o=i[1],l=i[5],c=i[9],h=i[2],u=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(ht(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-ht(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(s,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(ht(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-ht(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-a,l));break;case"YZX":this._z=Math.asin(ht(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(s,d));break;case"XZY":this._z=Math.asin(-ht(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(s,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return Ce.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Ce,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Le.setFromEuler(this),this.setFromQuaternion(Le,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Pe.DEFAULT_ORDER="XYZ";class Ue{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}isEnabled(t){return 0!=(this.mask&(1<<t|0))}}let De=0;const Ie=new Xt,Ne=new Wt,Oe=new Me,Fe=new Xt,ze=new Xt,Be=new Xt,He=new Wt,Ve=new Xt(1,0,0),Ge=new Xt(0,1,0),ke=new Xt(0,0,1),We={type:"added"},Xe={type:"removed"};class je extends at{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:De++}),this.uuid=ct(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=je.DEFAULT_UP.clone();const t=new Xt,e=new Pe,n=new Wt,i=new Xt(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Me},normalMatrix:{value:new vt}}),this.matrix=new Me,this.matrixWorld=new Me,this.matrixAutoUpdate=je.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=je.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Ue,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Ne.setFromAxisAngle(t,e),this.quaternion.multiply(Ne),this}rotateOnWorldAxis(t,e){return Ne.setFromAxisAngle(t,e),this.quaternion.premultiply(Ne),this}rotateX(t){return this.rotateOnAxis(Ve,t)}rotateY(t){return this.rotateOnAxis(Ge,t)}rotateZ(t){return this.rotateOnAxis(ke,t)}translateOnAxis(t,e){return Ie.copy(t).applyQuaternion(this.quaternion),this.position.add(Ie.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Ve,t)}translateY(t){return this.translateOnAxis(Ge,t)}translateZ(t){return this.translateOnAxis(ke,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Oe.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?Fe.copy(t):Fe.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),ze.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Oe.lookAt(ze,Fe,this.up):Oe.lookAt(Fe,ze,this.up),this.quaternion.setFromRotationMatrix(Oe),i&&(Oe.extractRotation(i.matrixWorld),Ne.setFromRotationMatrix(Oe),this.quaternion.premultiply(Ne.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(We)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Xe)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Oe.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Oe.multiply(t.parent.matrixWorld)),t.applyMatrix4(Oe),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let r=0,a=i.length;r<a;r++)i[r].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ze,t,Be),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ze,He,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++){const i=e[n];!0!==i.matrixWorldAutoUpdate&&!0!==t||i.updateMatrixWorld(t)}}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&!0===n.matrixWorldAutoUpdate&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++){const n=t[e];!0===n.matrixWorldAutoUpdate&&n.updateWorldMatrix(!1,!0)}}}toJSON(t){const e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map((t=>({boxInitialized:t.boxInitialized,boxMin:t.box.min.toArray(),boxMax:t.box.max.toArray(),sphereInitialized:t.sphereInitialized,sphereRadius:t.sphere.radius,sphereCenter:t.sphere.center.toArray()}))),i.maxGeometryCount=this._maxGeometryCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),null!==this.boundingSphere&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),null!==this.boundingBox&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const i=n[e];r(t.shapes,i)}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++)e.push(r(t.materials,this.material[n]));i.material=e}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];i.animations.push(r(t.animations,n))}}if(e){const e=a(t.geometries),i=a(t.materials),r=a(t.textures),s=a(t.images),o=a(t.shapes),l=a(t.skeletons),c=a(t.animations),h=a(t.nodes);e.length>0&&(n.geometries=e),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),s.length>0&&(n.images=s),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),h.length>0&&(n.nodes=h)}return n.object=i,n;function a(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}return this}}je.DEFAULT_UP=new Xt(0,1,0),je.DEFAULT_MATRIX_AUTO_UPDATE=!0,je.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Ye=new Xt,qe=new Xt,$e=new Xt,Ke=new Xt,Ze=new Xt,Je=new Xt,Qe=new Xt,tn=new Xt,en=new Xt,nn=new Xt;let rn=!1;class an{constructor(t=new Xt,e=new Xt,n=new Xt){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Ye.subVectors(t,e),i.cross(Ye);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){Ye.subVectors(i,e),qe.subVectors(n,e),$e.subVectors(t,e);const a=Ye.dot(Ye),s=Ye.dot(qe),o=Ye.dot($e),l=qe.dot(qe),c=qe.dot($e),h=a*l-s*s;if(0===h)return r.set(-2,-1,-1);const u=1/h,d=(l*o-s*c)*u,p=(a*c-s*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,Ke),Ke.x>=0&&Ke.y>=0&&Ke.x+Ke.y<=1}static getUV(t,e,n,i,r,a,s,o){return!1===rn&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),rn=!0),this.getInterpolation(t,e,n,i,r,a,s,o)}static getInterpolation(t,e,n,i,r,a,s,o){return this.getBarycoord(t,e,n,i,Ke),o.setScalar(0),o.addScaledVector(r,Ke.x),o.addScaledVector(a,Ke.y),o.addScaledVector(s,Ke.z),o}static isFrontFacing(t,e,n,i){return Ye.subVectors(n,e),qe.subVectors(t,e),Ye.cross(qe).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ye.subVectors(this.c,this.b),qe.subVectors(this.a,this.b),.5*Ye.cross(qe).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return an.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return an.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,i,r){return!1===rn&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),rn=!0),an.getInterpolation(t,this.a,this.b,this.c,e,n,i,r)}getInterpolation(t,e,n,i,r){return an.getInterpolation(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return an.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return an.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let a,s;Ze.subVectors(i,n),Je.subVectors(r,n),tn.subVectors(t,n);const o=Ze.dot(tn),l=Je.dot(tn);if(o<=0&&l<=0)return e.copy(n);en.subVectors(t,i);const c=Ze.dot(en),h=Je.dot(en);if(c>=0&&h<=c)return e.copy(i);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return a=o/(o-c),e.copy(n).addScaledVector(Ze,a);nn.subVectors(t,r);const d=Ze.dot(nn),p=Je.dot(nn);if(p>=0&&d<=p)return e.copy(r);const f=d*l-o*p;if(f<=0&&l>=0&&p<=0)return s=l/(l-p),e.copy(n).addScaledVector(Je,s);const m=c*p-d*h;if(m<=0&&h-c>=0&&d-p>=0)return Qe.subVectors(r,i),s=(h-c)/(h-c+(d-p)),e.copy(i).addScaledVector(Qe,s);const g=1/(m+f+u);return a=f*g,s=u*g,e.copy(n).addScaledVector(Ze,a).addScaledVector(Je,s)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const sn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},on={h:0,s:0,l:0},ln={h:0,s:0,l:0};function cn(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}class hn{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(void 0===e&&void 0===n){const e=t;e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=j){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,Ct.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=Ct.workingColorSpace){return this.r=t,this.g=e,this.b=n,Ct.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=Ct.workingColorSpace){if(t=function(t,e){return(t%e+e)%e}(t,1),e=ht(e,0,1),n=ht(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=cn(r,i,t+1/3),this.g=cn(r,i,t),this.b=cn(r,i,t-1/3)}return Ct.toWorkingColorSpace(this,i),this}setStyle(t,e=j){function n(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const a=i[1],s=i[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const n=i[1],r=n.length;if(3===r)return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,e);if(6===r)return this.setHex(parseInt(n,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=j){const n=sn[t.toLowerCase()];return void 0!==n?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Lt(t.r),this.g=Lt(t.g),this.b=Lt(t.b),this}copyLinearToSRGB(t){return this.r=Pt(t.r),this.g=Pt(t.g),this.b=Pt(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=j){return Ct.fromWorkingColorSpace(un.copy(this),t),65536*Math.round(ht(255*un.r,0,255))+256*Math.round(ht(255*un.g,0,255))+Math.round(ht(255*un.b,0,255))}getHexString(t=j){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Ct.workingColorSpace){Ct.fromWorkingColorSpace(un.copy(this),e);const n=un.r,i=un.g,r=un.b,a=Math.max(n,i,r),s=Math.min(n,i,r);let o,l;const c=(s+a)/2;if(s===a)o=0,l=0;else{const t=a-s;switch(l=c<=.5?t/(a+s):t/(2-a-s),a){case n:o=(i-r)/t+(i<r?6:0);break;case i:o=(r-n)/t+2;break;case r:o=(n-i)/t+4}o/=6}return t.h=o,t.s=l,t.l=c,t}getRGB(t,e=Ct.workingColorSpace){return Ct.fromWorkingColorSpace(un.copy(this),e),t.r=un.r,t.g=un.g,t.b=un.b,t}getStyle(t=j){Ct.fromWorkingColorSpace(un.copy(this),t);const e=un.r,n=un.g,i=un.b;return t!==j?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(255*e)},${Math.round(255*n)},${Math.round(255*i)})`}offsetHSL(t,e,n){return this.getHSL(on),this.setHSL(on.h+t,on.s+e,on.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(on),t.getHSL(ln);const n=ut(on.h,ln.h,e),i=ut(on.s,ln.s,e),r=ut(on.l,ln.l,e);return this.setHSL(n,i,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,r=t.elements;return this.r=r[0]*e+r[3]*n+r[6]*i,this.g=r[1]*e+r[4]*n+r[7]*i,this.b=r[2]*e+r[5]*n+r[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const un=new hn;hn.NAMES=sn;let dn=0;class pn extends at{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:dn++}),this.uuid=ct(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=o,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new hn(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=tt,this.stencilZFail=tt,this.stencilZPass=tt,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`)}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(n.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(n.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),void 0!==this.anisotropy&&(n.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),!0===this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=!0),204!==this.blendSrc&&(n.blendSrc=this.blendSrc),205!==this.blendDst&&(n.blendDst=this.blendDst),this.blendEquation!==o&&(n.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(n.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(n.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(n.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(n.depthFunc=this.depthFunc),!1===this.depthTest&&(n.depthTest=this.depthTest),!1===this.depthWrite&&(n.depthWrite=this.depthWrite),!1===this.colorWrite&&(n.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(n.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(n.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(n.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==tt&&(n.stencilFail=this.stencilFail),this.stencilZFail!==tt&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==tt&&(n.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(n.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaHash&&(n.alphaHash=!0),!0===this.alphaToCoverage&&(n.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=!0),!0===this.forceSinglePass&&(n.forceSinglePass=!0),!0===this.wireframe&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),!1===this.fog&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}class fn extends pn{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new hn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=l,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const mn=new Xt,gn=new _t;class _n{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=n,this.usage=35044,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.gpuType=L,this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}get updateRange(){return console.warn('THREE.BufferAttribute: "updateRange" is deprecated and removed in r169. Use "addUpdateRange()" instead.'),this._updateRange}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)gn.fromBufferAttribute(this,e),gn.applyMatrix3(t),this.setXY(e,gn.x,gn.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)mn.fromBufferAttribute(this,e),mn.applyMatrix3(t),this.setXYZ(e,mn.x,mn.y,mn.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)mn.fromBufferAttribute(this,e),mn.applyMatrix4(t),this.setXYZ(e,mn.x,mn.y,mn.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)mn.fromBufferAttribute(this,e),mn.applyNormalMatrix(t),this.setXYZ(e,mn.x,mn.y,mn.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)mn.fromBufferAttribute(this,e),mn.transformDirection(t),this.setXYZ(e,mn.x,mn.y,mn.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=ft(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=mt(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=ft(e,this.array)),e}setX(t,e){return this.normalized&&(e=mt(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=ft(e,this.array)),e}setY(t,e){return this.normalized&&(e=mt(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=ft(e,this.array)),e}setZ(t,e){return this.normalized&&(e=mt(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=ft(e,this.array)),e}setW(t,e){return this.normalized&&(e=mt(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=mt(e,this.array),n=mt(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=mt(e,this.array),n=mt(n,this.array),i=mt(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.normalized&&(e=mt(e,this.array),n=mt(n,this.array),i=mt(i,this.array),r=mt(r,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),35044!==this.usage&&(t.usage=this.usage),t}}class vn extends _n{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class xn extends _n{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class yn extends _n{constructor(t,e,n){super(new Float32Array(t),e,n)}}let Mn=0;const En=new Me,Sn=new je,bn=new Xt,Tn=new qt,wn=new qt,An=new Xt;class Rn extends at{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Mn++}),this.uuid=ct(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(yt(t)?xn:vn)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new vt).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return En.makeRotationFromQuaternion(t),this.applyMatrix4(En),this}rotateX(t){return En.makeRotationX(t),this.applyMatrix4(En),this}rotateY(t){return En.makeRotationY(t),this.applyMatrix4(En),this}rotateZ(t){return En.makeRotationZ(t),this.applyMatrix4(En),this}translate(t,e,n){return En.makeTranslation(t,e,n),this.applyMatrix4(En),this}scale(t,e,n){return En.makeScale(t,e,n),this.applyMatrix4(En),this}lookAt(t){return Sn.lookAt(t),Sn.updateMatrix(),this.applyMatrix4(Sn.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(bn).negate(),this.translate(bn.x,bn.y,bn.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new yn(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new qt);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new Xt(-1/0,-1/0,-1/0),new Xt(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Tn.setFromBufferAttribute(n),this.morphTargetsRelative?(An.addVectors(this.boundingBox.min,Tn.min),this.boundingBox.expandByPoint(An),An.addVectors(this.boundingBox.max,Tn.max),this.boundingBox.expandByPoint(An)):(this.boundingBox.expandByPoint(Tn.min),this.boundingBox.expandByPoint(Tn.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new de);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new Xt,1/0);if(t){const n=this.boundingSphere.center;if(Tn.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];wn.setFromBufferAttribute(n),this.morphTargetsRelative?(An.addVectors(Tn.min,wn.min),Tn.expandByPoint(An),An.addVectors(Tn.max,wn.max),Tn.expandByPoint(An)):(Tn.expandByPoint(wn.min),Tn.expandByPoint(wn.max))}Tn.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++)An.fromBufferAttribute(t,e),i=Math.max(i,n.distanceToSquared(An));if(e)for(let r=0,a=e.length;r<a;r++){const a=e[r],s=this.morphTargetsRelative;for(let e=0,r=a.count;e<r;e++)An.fromBufferAttribute(a,e),s&&(bn.fromBufferAttribute(t,e),An.add(bn)),i=Math.max(i,n.distanceToSquared(An))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=t.array,i=e.position.array,r=e.normal.array,a=e.uv.array,s=i.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new _n(new Float32Array(4*s),4));const o=this.getAttribute("tangent").array,l=[],c=[];for(let t=0;t<s;t++)l[t]=new Xt,c[t]=new Xt;const h=new Xt,u=new Xt,d=new Xt,p=new _t,f=new _t,m=new _t,g=new Xt,_=new Xt;function v(t,e,n){h.fromArray(i,3*t),u.fromArray(i,3*e),d.fromArray(i,3*n),p.fromArray(a,2*t),f.fromArray(a,2*e),m.fromArray(a,2*n),u.sub(h),d.sub(h),f.sub(p),m.sub(p);const r=1/(f.x*m.y-m.x*f.y);isFinite(r)&&(g.copy(u).multiplyScalar(m.y).addScaledVector(d,-f.y).multiplyScalar(r),_.copy(d).multiplyScalar(f.x).addScaledVector(u,-m.x).multiplyScalar(r),l[t].add(g),l[e].add(g),l[n].add(g),c[t].add(_),c[e].add(_),c[n].add(_))}let x=this.groups;0===x.length&&(x=[{start:0,count:n.length}]);for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)v(n[t+0],n[t+1],n[t+2])}const y=new Xt,M=new Xt,E=new Xt,S=new Xt;function b(t){E.fromArray(r,3*t),S.copy(E);const e=l[t];y.copy(e),y.sub(E.multiplyScalar(E.dot(e))).normalize(),M.crossVectors(S,e);const n=M.dot(c[t])<0?-1:1;o[4*t]=y.x,o[4*t+1]=y.y,o[4*t+2]=y.z,o[4*t+3]=n}for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)b(n[t+0]),b(n[t+1]),b(n[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let n=this.getAttribute("normal");if(void 0===n)n=new _n(new Float32Array(3*e.count),3),this.setAttribute("normal",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const i=new Xt,r=new Xt,a=new Xt,s=new Xt,o=new Xt,l=new Xt,c=new Xt,h=new Xt;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),f=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),a.fromBufferAttribute(e,f),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),s.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,f),s.add(c),o.add(c),l.add(c),n.setXYZ(d,s.x,s.y,s.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(f,l.x,l.y,l.z)}else for(let t=0,s=e.count;t<s;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),a.fromBufferAttribute(e,t+2),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),n.setXYZ(t+0,c.x,c.y,c.z),n.setXYZ(t+1,c.x,c.y,c.z),n.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)An.fromBufferAttribute(t,e),An.normalize(),t.setXYZ(e,An.x,An.y,An.z)}toNonIndexed(){function t(t,e){const n=t.array,i=t.itemSize,r=t.normalized,a=new n.constructor(e.length*i);let s=0,o=0;for(let r=0,l=e.length;r<l;r++){s=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)a[o++]=n[s++]}return new _n(a,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Rn,n=this.index.array,i=this.attributes;for(const r in i){const a=t(i[r],n);e.setAttribute(r,a)}const r=this.morphAttributes;for(const i in r){const a=[],s=r[i];for(let e=0,i=s.length;e<i;e++){const i=t(s[e],n);a.push(i)}e.morphAttributes[i]=a}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let t=0,n=a.length;t<n;t++){const n=a[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){const i=n[e];t.data.attributes[e]=i.toJSON(t.data)}const i={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],a=[];for(let e=0,i=n.length;e<i;e++){const i=n[e];a.push(i.toJSON(t.data))}a.length>0&&(i[e]=a,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const s=this.boundingSphere;return null!==s&&(t.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const i=t.attributes;for(const t in i){const n=i[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],i=r[t];for(let t=0,r=i.length;t<r;t++)n.push(i[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let t=0,e=a.length;t<e;t++){const e=a[t];this.addGroup(e.start,e.count,e.materialIndex)}const s=t.boundingBox;null!==s&&(this.boundingBox=s.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Cn=new Me,Ln=new ye,Pn=new de,Un=new Xt,Dn=new Xt,In=new Xt,Nn=new Xt,On=new Xt,Fn=new Xt,zn=new _t,Bn=new _t,Hn=new _t,Vn=new Xt,Gn=new Xt,kn=new Xt,Wn=new Xt,Xn=new Xt;class jn extends je{constructor(t=new Rn,e=new fn){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,r=n.morphAttributes.position,a=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const s=this.morphTargetInfluences;if(r&&s){Fn.set(0,0,0);for(let n=0,i=r.length;n<i;n++){const i=s[n],o=r[n];0!==i&&(On.fromBufferAttribute(o,t),a?Fn.addScaledVector(On,i):Fn.addScaledVector(On.sub(e),i))}e.add(Fn)}return e}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0!==i){if(null===n.boundingSphere&&n.computeBoundingSphere(),Pn.copy(n.boundingSphere),Pn.applyMatrix4(r),Ln.copy(t.ray).recast(t.near),!1===Pn.containsPoint(Ln.origin)){if(null===Ln.intersectSphere(Pn,Un))return;if(Ln.origin.distanceToSquared(Un)>(t.far-t.near)**2)return}Cn.copy(r).invert(),Ln.copy(t.ray).applyMatrix4(Cn),null!==n.boundingBox&&!1===Ln.intersectsBox(n.boundingBox)||this._computeIntersections(t,e,Ln)}}_computeIntersections(t,e,n){let i;const r=this.geometry,a=this.material,s=r.index,o=r.attributes.position,l=r.attributes.uv,c=r.attributes.uv1,h=r.attributes.normal,u=r.groups,d=r.drawRange;if(null!==s)if(Array.isArray(a))for(let r=0,o=u.length;r<o;r++){const o=u[r],p=a[o.materialIndex];for(let r=Math.max(o.start,d.start),a=Math.min(s.count,Math.min(o.start+o.count,d.start+d.count));r<a;r+=3)i=Yn(this,p,t,n,l,c,h,s.getX(r),s.getX(r+1),s.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=o.materialIndex,e.push(i))}else for(let r=Math.max(0,d.start),o=Math.min(s.count,d.start+d.count);r<o;r+=3)i=Yn(this,a,t,n,l,c,h,s.getX(r),s.getX(r+1),s.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),e.push(i));else if(void 0!==o)if(Array.isArray(a))for(let r=0,s=u.length;r<s;r++){const s=u[r],p=a[s.materialIndex];for(let r=Math.max(s.start,d.start),a=Math.min(o.count,Math.min(s.start+s.count,d.start+d.count));r<a;r+=3)i=Yn(this,p,t,n,l,c,h,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=s.materialIndex,e.push(i))}else for(let r=Math.max(0,d.start),s=Math.min(o.count,d.start+d.count);r<s;r+=3)i=Yn(this,a,t,n,l,c,h,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),e.push(i))}}function Yn(t,e,n,i,r,a,s,o,l,c){t.getVertexPosition(o,Dn),t.getVertexPosition(l,In),t.getVertexPosition(c,Nn);const h=function(t,e,n,i,r,a,s,o){let l;if(l=1===e.side?i.intersectTriangle(s,a,r,!0,o):i.intersectTriangle(r,a,s,0===e.side,o),null===l)return null;Xn.copy(o),Xn.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(Xn);return c<n.near||c>n.far?null:{distance:c,point:Xn.clone(),object:t}}(t,e,n,i,Dn,In,Nn,Wn);if(h){r&&(zn.fromBufferAttribute(r,o),Bn.fromBufferAttribute(r,l),Hn.fromBufferAttribute(r,c),h.uv=an.getInterpolation(Wn,Dn,In,Nn,zn,Bn,Hn,new _t)),a&&(zn.fromBufferAttribute(a,o),Bn.fromBufferAttribute(a,l),Hn.fromBufferAttribute(a,c),h.uv1=an.getInterpolation(Wn,Dn,In,Nn,zn,Bn,Hn,new _t),h.uv2=h.uv1),s&&(Vn.fromBufferAttribute(s,o),Gn.fromBufferAttribute(s,l),kn.fromBufferAttribute(s,c),h.normal=an.getInterpolation(Wn,Dn,In,Nn,Vn,Gn,kn,new Xt),h.normal.dot(i.direction)>0&&h.normal.multiplyScalar(-1));const t={a:o,b:l,c,normal:new Xt,materialIndex:0};an.getNormal(Dn,In,Nn,t.normal),h.face=t}return h}class qn extends Rn{constructor(t=1,e=1,n=1,i=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const s=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,n,i,r,a,p,f,m,g,_){const v=a/m,x=p/g,y=a/2,M=p/2,E=f/2,S=m+1,b=g+1;let T=0,w=0;const A=new Xt;for(let a=0;a<b;a++){const s=a*x-M;for(let o=0;o<S;o++){const u=o*v-y;A[t]=u*i,A[e]=s*r,A[n]=E,l.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=f>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/m),h.push(1-a/g),T+=1}}for(let t=0;t<g;t++)for(let e=0;e<m;e++){const n=u+e+S*t,i=u+e+S*(t+1),r=u+(e+1)+S*(t+1),a=u+(e+1)+S*t;o.push(n,i,a),o.push(i,r,a),w+=6}s.addGroup(d,w,_),d+=w,u+=T}p("z","y","x",-1,-1,n,e,t,a,r,0),p("z","y","x",1,-1,n,e,-t,a,r,1),p("x","z","y",1,1,t,n,e,i,a,2),p("x","z","y",1,-1,t,n,-e,i,a,3),p("x","y","z",1,-1,t,e,n,i,r,4),p("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute("position",new yn(l,3)),this.setAttribute("normal",new yn(c,3)),this.setAttribute("uv",new yn(h,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new qn(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function $n(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[n][i]=null):e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}}return e}function Kn(t){const e={};for(let n=0;n<t.length;n++){const i=$n(t[n]);for(const t in i)e[t]=i[t]}return e}function Zn(t){return null===t.getRenderTarget()?t.outputColorSpace:Ct.workingColorSpace}const Jn={clone:$n,merge:Kn};class Qn extends pn{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=$n(t.uniforms),this.uniformsGroups=function(t){const e=[];for(let n=0;n<t.length;n++)e.push(t[n].clone());return e}(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;i&&i.isTexture?e.uniforms[n]={type:"t",value:i.toJSON(t).uuid}:i&&i.isColor?e.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?e.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?e.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?e.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?e.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?e.uniforms[n]={type:"m4",value:i.toArray()}:e.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class ti extends je{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Me,this.projectionMatrix=new Me,this.projectionMatrixInverse=new Me,this.coordinateSystem=it}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}class ei extends ti{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*lt*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*ot*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*lt*Math.atan(Math.tan(.5*ot*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*ot*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const a=this.view;if(null!==this.view&&this.view.enabled){const t=a.fullWidth,s=a.fullHeight;r+=a.offsetX*i/t,e-=a.offsetY*n/s,i*=a.width/t,n*=a.height/s}const s=this.filmOffset;0!==s&&(r+=t*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const ni=-90;class ii extends je{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new ei(ni,1,t,e);i.layers=this.layers,this.add(i);const r=new ei(ni,1,t,e);r.layers=this.layers,this.add(r);const a=new ei(ni,1,t,e);a.layers=this.layers,this.add(a);const s=new ei(ni,1,t,e);s.layers=this.layers,this.add(s);const o=new ei(ni,1,t,e);o.layers=this.layers,this.add(o);const l=new ei(ni,1,t,e);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,r,a,s,o]=e;for(const t of e)this.remove(t);if(t===it)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),s.up.set(0,1,0),s.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else{if(t!==rt)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),s.up.set(0,-1,0),s.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1)}for(const t of e)this.add(t),t.updateMatrixWorld()}update(t,e){null===this.parent&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[r,a,s,o,l,c]=this.children,h=t.getRenderTarget(),u=t.getActiveCubeFace(),d=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const f=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,r),t.setRenderTarget(n,1,i),t.render(e,a),t.setRenderTarget(n,2,i),t.render(e,s),t.setRenderTarget(n,3,i),t.render(e,o),t.setRenderTarget(n,4,i),t.render(e,l),n.texture.generateMipmaps=f,t.setRenderTarget(n,5,i),t.render(e,c),t.setRenderTarget(h,u,d),t.xr.enabled=p,n.texture.needsPMREMUpdate=!0}}class ri extends zt{constructor(t,e,n,i,r,a,s,o,l,c){super(t=void 0!==t?t:[],e=void 0!==e?e:_,n,i,r,a,s,o,l,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class ai extends Vt{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];void 0!==e.encoding&&(bt("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),e.colorSpace=e.encoding===W?j:X),this.texture=new ri(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:T}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={tEquirect:{value:null}},i="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",r="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",a=new qn(5,5,5),s=new Qn({name:"CubemapFromEquirect",uniforms:$n(n),vertexShader:i,fragmentShader:r,side:1,blending:0});s.uniforms.tEquirect.value=e;const o=new jn(a,s),l=e.minFilter;return e.minFilter===w&&(e.minFilter=T),new ii(1,10,this).update(t,o),e.minFilter=l,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,i);t.setRenderTarget(r)}}const si=new Xt,oi=new Xt,li=new vt;class ci{constructor(t=new Xt(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=si.subVectors(n,e).cross(oi.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(si),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(t.start).addScaledVector(n,r)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||li.getNormalMatrix(t),i=this.coplanarPoint(si).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const hi=new de,ui=new Xt;class di{constructor(t=new ci,e=new ci,n=new ci,i=new ci,r=new ci,a=new ci){this.planes=[t,e,n,i,r,a]}set(t,e,n,i,r,a){const s=this.planes;return s[0].copy(t),s[1].copy(e),s[2].copy(n),s[3].copy(i),s[4].copy(r),s[5].copy(a),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=2e3){const n=this.planes,i=t.elements,r=i[0],a=i[1],s=i[2],o=i[3],l=i[4],c=i[5],h=i[6],u=i[7],d=i[8],p=i[9],f=i[10],m=i[11],g=i[12],_=i[13],v=i[14],x=i[15];if(n[0].setComponents(o-r,u-l,m-d,x-g).normalize(),n[1].setComponents(o+r,u+l,m+d,x+g).normalize(),n[2].setComponents(o+a,u+c,m+p,x+_).normalize(),n[3].setComponents(o-a,u-c,m-p,x-_).normalize(),n[4].setComponents(o-s,u-h,m-f,x-v).normalize(),e===it)n[5].setComponents(o+s,u+h,m+f,x+v).normalize();else{if(e!==rt)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);n[5].setComponents(s,h,f,v).normalize()}return this}intersectsObject(t){if(void 0!==t.boundingSphere)null===t.boundingSphere&&t.computeBoundingSphere(),hi.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;null===e.boundingSphere&&e.computeBoundingSphere(),hi.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(hi)}intersectsSprite(t){return hi.center.set(0,0,0),hi.radius=.7071067811865476,hi.applyMatrix4(t.matrixWorld),this.intersectsSphere(hi)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(ui.x=i.normal.x>0?t.max.x:t.min.x,ui.y=i.normal.y>0?t.max.y:t.min.y,ui.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(ui)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function pi(){let t=null,e=!1,n=null,i=null;function r(e,a){n(e,a),i=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(i=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function fi(t,e){const n=e.isWebGL2,i=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),i.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=i.get(e);n&&(t.deleteBuffer(n.buffer),i.delete(e))},update:function(e,r){if(e.isGLBufferAttribute){const t=i.get(e);return void((!t||t.version<e.version)&&i.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const a=i.get(e);if(void 0===a)i.set(e,function(e,i){const r=e.array,a=e.usage,s=r.byteLength,o=t.createBuffer();let l;if(t.bindBuffer(i,o),t.bufferData(i,r,a),e.onUploadCallback(),r instanceof Float32Array)l=t.FLOAT;else if(r instanceof Uint16Array)if(e.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");l=t.HALF_FLOAT}else l=t.UNSIGNED_SHORT;else if(r instanceof Int16Array)l=t.SHORT;else if(r instanceof Uint32Array)l=t.UNSIGNED_INT;else if(r instanceof Int32Array)l=t.INT;else if(r instanceof Int8Array)l=t.BYTE;else if(r instanceof Uint8Array)l=t.UNSIGNED_BYTE;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);l=t.UNSIGNED_BYTE}return{buffer:o,type:l,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version,size:s}}(e,r));else if(a.version<e.version){if(a.size!==e.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(e,i,r){const a=i.array,s=i._updateRange,o=i.updateRanges;if(t.bindBuffer(r,e),-1===s.count&&0===o.length&&t.bufferSubData(r,0,a),0!==o.length){for(let e=0,i=o.length;e<i;e++){const i=o[e];n?t.bufferSubData(r,i.start*a.BYTES_PER_ELEMENT,a,i.start,i.count):t.bufferSubData(r,i.start*a.BYTES_PER_ELEMENT,a.subarray(i.start,i.start+i.count))}i.clearUpdateRanges()}-1!==s.count&&(n?t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a,s.offset,s.count):t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a.subarray(s.offset,s.offset+s.count)),s.count=-1),i.onUploadCallback()}(a.buffer,e,r),a.version=e.version}}}}class mi extends Rn{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,a=e/2,s=Math.floor(n),o=Math.floor(i),l=s+1,c=o+1,h=t/s,u=e/o,d=[],p=[],f=[],m=[];for(let t=0;t<c;t++){const e=t*u-a;for(let n=0;n<l;n++){const i=n*h-r;p.push(i,-e,0),f.push(0,0,1),m.push(n/s),m.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<s;e++){const n=e+l*t,i=e+l*(t+1),r=e+1+l*(t+1),a=e+1+l*t;d.push(n,i,a),d.push(i,r,a)}this.setIndex(d),this.setAttribute("position",new yn(p,3)),this.setAttribute("normal",new yn(f,3)),this.setAttribute("uv",new yn(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new mi(t.width,t.height,t.widthSegments,t.heightSegments)}}const gi={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\tattribute float batchId;\n\tuniform highp sampler2D batchingTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},_i={common:{diffuse:{value:new hn(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new vt},alphaMap:{value:null},alphaMapTransform:{value:new vt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new vt}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new vt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new vt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new vt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new vt},normalScale:{value:new _t(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new vt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new vt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new vt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new vt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new hn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new hn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new vt},alphaTest:{value:0},uvTransform:{value:new vt}},sprite:{diffuse:{value:new hn(16777215)},opacity:{value:1},center:{value:new _t(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new vt},alphaMap:{value:null},alphaMapTransform:{value:new vt},alphaTest:{value:0}}},vi={basic:{uniforms:Kn([_i.common,_i.specularmap,_i.envmap,_i.aomap,_i.lightmap,_i.fog]),vertexShader:gi.meshbasic_vert,fragmentShader:gi.meshbasic_frag},lambert:{uniforms:Kn([_i.common,_i.specularmap,_i.envmap,_i.aomap,_i.lightmap,_i.emissivemap,_i.bumpmap,_i.normalmap,_i.displacementmap,_i.fog,_i.lights,{emissive:{value:new hn(0)}}]),vertexShader:gi.meshlambert_vert,fragmentShader:gi.meshlambert_frag},phong:{uniforms:Kn([_i.common,_i.specularmap,_i.envmap,_i.aomap,_i.lightmap,_i.emissivemap,_i.bumpmap,_i.normalmap,_i.displacementmap,_i.fog,_i.lights,{emissive:{value:new hn(0)},specular:{value:new hn(1118481)},shininess:{value:30}}]),vertexShader:gi.meshphong_vert,fragmentShader:gi.meshphong_frag},standard:{uniforms:Kn([_i.common,_i.envmap,_i.aomap,_i.lightmap,_i.emissivemap,_i.bumpmap,_i.normalmap,_i.displacementmap,_i.roughnessmap,_i.metalnessmap,_i.fog,_i.lights,{emissive:{value:new hn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:gi.meshphysical_vert,fragmentShader:gi.meshphysical_frag},toon:{uniforms:Kn([_i.common,_i.aomap,_i.lightmap,_i.emissivemap,_i.bumpmap,_i.normalmap,_i.displacementmap,_i.gradientmap,_i.fog,_i.lights,{emissive:{value:new hn(0)}}]),vertexShader:gi.meshtoon_vert,fragmentShader:gi.meshtoon_frag},matcap:{uniforms:Kn([_i.common,_i.bumpmap,_i.normalmap,_i.displacementmap,_i.fog,{matcap:{value:null}}]),vertexShader:gi.meshmatcap_vert,fragmentShader:gi.meshmatcap_frag},points:{uniforms:Kn([_i.points,_i.fog]),vertexShader:gi.points_vert,fragmentShader:gi.points_frag},dashed:{uniforms:Kn([_i.common,_i.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:gi.linedashed_vert,fragmentShader:gi.linedashed_frag},depth:{uniforms:Kn([_i.common,_i.displacementmap]),vertexShader:gi.depth_vert,fragmentShader:gi.depth_frag},normal:{uniforms:Kn([_i.common,_i.bumpmap,_i.normalmap,_i.displacementmap,{opacity:{value:1}}]),vertexShader:gi.meshnormal_vert,fragmentShader:gi.meshnormal_frag},sprite:{uniforms:Kn([_i.sprite,_i.fog]),vertexShader:gi.sprite_vert,fragmentShader:gi.sprite_frag},background:{uniforms:{uvTransform:{value:new vt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:gi.background_vert,fragmentShader:gi.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:gi.backgroundCube_vert,fragmentShader:gi.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:gi.cube_vert,fragmentShader:gi.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:gi.equirect_vert,fragmentShader:gi.equirect_frag},distanceRGBA:{uniforms:Kn([_i.common,_i.displacementmap,{referencePosition:{value:new Xt},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:gi.distanceRGBA_vert,fragmentShader:gi.distanceRGBA_frag},shadow:{uniforms:Kn([_i.lights,_i.fog,{color:{value:new hn(0)},opacity:{value:1}}]),vertexShader:gi.shadow_vert,fragmentShader:gi.shadow_frag}};vi.physical={uniforms:Kn([vi.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new vt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new vt},clearcoatNormalScale:{value:new _t(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new vt},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new vt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new vt},sheen:{value:0},sheenColor:{value:new hn(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new vt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new vt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new vt},transmissionSamplerSize:{value:new _t},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new vt},attenuationDistance:{value:0},attenuationColor:{value:new hn(0)},specularColor:{value:new hn(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new vt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new vt},anisotropyVector:{value:new _t},anisotropyMap:{value:null},anisotropyMapTransform:{value:new vt}}]),vertexShader:gi.meshphysical_vert,fragmentShader:gi.meshphysical_frag};const xi={r:0,b:0,g:0};function yi(t,e,n,i,r,a,s){const o=new hn(0);let l,c,h=!0===a?0:1,u=null,d=0,p=null;function f(e,n){e.getRGB(xi,Zn(t)),i.buffers.color.setClear(xi.r,xi.g,xi.b,n,s)}return{getClearColor:function(){return o},setClearColor:function(t,e=1){o.set(t),h=e,f(o,h)},getClearAlpha:function(){return h},setClearAlpha:function(t){h=t,f(o,h)},render:function(a,m){let g=!1,_=!0===m.isScene?m.background:null;_&&_.isTexture&&(_=(m.backgroundBlurriness>0?n:e).get(_)),null===_?f(o,h):_&&_.isColor&&(f(_,1),g=!0);const v=t.xr.getEnvironmentBlendMode();"additive"===v?i.buffers.color.setClear(0,0,0,1,s):"alpha-blend"===v&&i.buffers.color.setClear(0,0,0,0,s),(t.autoClear||g)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),_&&(_.isCubeTexture||_.mapping===x)?(void 0===c&&(c=new jn(new qn(1,1,1),new Qn({name:"BackgroundCubeMaterial",uniforms:$n(vi.backgroundCube.uniforms),vertexShader:vi.backgroundCube.vertexShader,fragmentShader:vi.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(c)),c.material.uniforms.envMap.value=_,c.material.uniforms.flipEnvMap.value=_.isCubeTexture&&!1===_.isRenderTargetTexture?-1:1,c.material.uniforms.backgroundBlurriness.value=m.backgroundBlurriness,c.material.uniforms.backgroundIntensity.value=m.backgroundIntensity,c.material.toneMapped=Ct.getTransfer(_.colorSpace)!==Z,u===_&&d===_.version&&p===t.toneMapping||(c.material.needsUpdate=!0,u=_,d=_.version,p=t.toneMapping),c.layers.enableAll(),a.unshift(c,c.geometry,c.material,0,0,null)):_&&_.isTexture&&(void 0===l&&(l=new jn(new mi(2,2),new Qn({name:"BackgroundMaterial",uniforms:$n(vi.background.uniforms),vertexShader:vi.background.vertexShader,fragmentShader:vi.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(l)),l.material.uniforms.t2D.value=_,l.material.uniforms.backgroundIntensity.value=m.backgroundIntensity,l.material.toneMapped=Ct.getTransfer(_.colorSpace)!==Z,!0===_.matrixAutoUpdate&&_.updateMatrix(),l.material.uniforms.uvTransform.value.copy(_.matrix),u===_&&d===_.version&&p===t.toneMapping||(l.material.needsUpdate=!0,u=_,d=_.version,p=t.toneMapping),l.layers.enableAll(),a.unshift(l,l.geometry,l.material,0,0,null))}}}function Mi(t,e,n,i){const r=t.getParameter(t.MAX_VERTEX_ATTRIBS),a=i.isWebGL2?null:e.get("OES_vertex_array_object"),s=i.isWebGL2||null!==a,o={},l=p(null);let c=l,h=!1;function u(e){return i.isWebGL2?t.bindVertexArray(e):a.bindVertexArrayOES(e)}function d(e){return i.isWebGL2?t.deleteVertexArray(e):a.deleteVertexArrayOES(e)}function p(t){const e=[],n=[],i=[];for(let t=0;t<r;t++)e[t]=0,n[t]=0,i[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:n,attributeDivisors:i,object:t,attributes:{},index:null}}function f(){const t=c.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function m(t){g(t,0)}function g(n,r){const a=c.newAttributes,s=c.enabledAttributes,o=c.attributeDivisors;a[n]=1,0===s[n]&&(t.enableVertexAttribArray(n),s[n]=1),o[n]!==r&&((i.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),o[n]=r)}function _(){const e=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function v(e,n,i,r,a,s,o){!0===o?t.vertexAttribIPointer(e,n,i,a,s):t.vertexAttribPointer(e,n,i,r,a,s)}function x(){y(),h=!0,c!==l&&(c=l,u(c.object))}function y(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,d,x,y){let M=!1;if(s){const e=function(e,n,r){const s=!0===r.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let h=c[s];return void 0===h&&(h=p(i.isWebGL2?t.createVertexArray():a.createVertexArrayOES()),c[s]=h),h}(x,d,l);c!==e&&(c=e,u(c.object)),M=function(t,e,n,i){const r=c.attributes,a=e.attributes;let s=0;const o=n.getAttributes();for(const e in o)if(o[e].location>=0){const n=r[e];let i=a[e];if(void 0===i&&("instanceMatrix"===e&&t.instanceMatrix&&(i=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(i=t.instanceColor)),void 0===n)return!0;if(n.attribute!==i)return!0;if(i&&n.data!==i.data)return!0;s++}return c.attributesNum!==s||c.index!==i}(r,x,d,y),M&&function(t,e,n,i){const r={},a=e.attributes;let s=0;const o=n.getAttributes();for(const e in o)if(o[e].location>=0){let n=a[e];void 0===n&&("instanceMatrix"===e&&t.instanceMatrix&&(n=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(n=t.instanceColor));const i={};i.attribute=n,n&&n.data&&(i.data=n.data),r[e]=i,s++}c.attributes=r,c.attributesNum=s,c.index=i}(r,x,d,y)}else{const t=!0===l.wireframe;c.geometry===x.id&&c.program===d.id&&c.wireframe===t||(c.geometry=x.id,c.program=d.id,c.wireframe=t,M=!0)}null!==y&&n.update(y,t.ELEMENT_ARRAY_BUFFER),(M||h)&&(h=!1,function(r,a,s,o){if(!1===i.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;f();const l=o.attributes,c=s.getAttributes(),h=a.defaultAttributeValues;for(const e in c){const a=c[e];if(a.location>=0){let s=l[e];if(void 0===s&&("instanceMatrix"===e&&r.instanceMatrix&&(s=r.instanceMatrix),"instanceColor"===e&&r.instanceColor&&(s=r.instanceColor)),void 0!==s){const e=s.normalized,l=s.itemSize,c=n.get(s);if(void 0===c)continue;const h=c.buffer,u=c.type,d=c.bytesPerElement,p=!0===i.isWebGL2&&(u===t.INT||u===t.UNSIGNED_INT||1013===s.gpuType);if(s.isInterleavedBufferAttribute){const n=s.data,i=n.stride,c=s.offset;if(n.isInstancedInterleavedBuffer){for(let t=0;t<a.locationSize;t++)g(a.location+t,n.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let t=0;t<a.locationSize;t++)m(a.location+t);t.bindBuffer(t.ARRAY_BUFFER,h);for(let t=0;t<a.locationSize;t++)v(a.location+t,l/a.locationSize,u,e,i*d,(c+l/a.locationSize*t)*d,p)}else{if(s.isInstancedBufferAttribute){for(let t=0;t<a.locationSize;t++)g(a.location+t,s.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let t=0;t<a.locationSize;t++)m(a.location+t);t.bindBuffer(t.ARRAY_BUFFER,h);for(let t=0;t<a.locationSize;t++)v(a.location+t,l/a.locationSize,u,e,l*d,l/a.locationSize*t*d,p)}}else if(void 0!==h){const n=h[e];if(void 0!==n)switch(n.length){case 2:t.vertexAttrib2fv(a.location,n);break;case 3:t.vertexAttrib3fv(a.location,n);break;case 4:t.vertexAttrib4fv(a.location,n);break;default:t.vertexAttrib1fv(a.location,n)}}}}_()}(r,l,d,x),null!==y&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n.get(y).buffer))},reset:x,resetDefaultState:y,dispose:function(){x();for(const t in o){const e=o[t];for(const t in e){const n=e[t];for(const t in n)d(n[t].object),delete n[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const n=e[t];for(const t in n)d(n[t].object),delete n[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function(t){for(const e in o){const n=o[e];if(void 0===n[t.id])continue;const i=n[t.id];for(const t in i)d(i[t].object),delete i[t];delete n[t.id]}},initAttributes:f,enableAttribute:m,disableUnusedAttributes:_}}function Ei(t,e,n,i){const r=i.isWebGL2;let a;this.setMode=function(t){a=t},this.render=function(e,i){t.drawArrays(a,e,i),n.update(i,a,1)},this.renderInstances=function(i,s,o){if(0===o)return;let l,c;if(r)l=t,c="drawArraysInstanced";else if(l=e.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](a,i,s,o),n.update(s,a,o)},this.renderMultiDraw=function(t,i,r){if(0===r)return;const s=e.get("WEBGL_multi_draw");if(null===s)for(let e=0;e<r;e++)this.render(t[e],i[e]);else{s.multiDrawArraysWEBGL(a,t,0,i,0,r);let e=0;for(let t=0;t<r;t++)e+=i[t];n.update(e,a,1)}}}function Si(t,e,n){let i;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const a="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===t.constructor.name;let s=void 0!==n.precision?n.precision:"highp";const o=r(s);o!==s&&(console.warn("THREE.WebGLRenderer:",s,"not supported, using",o,"instead."),s=o);const l=a||e.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,h=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),u=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS),d=t.getParameter(t.MAX_TEXTURE_SIZE),p=t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),f=t.getParameter(t.MAX_VERTEX_ATTRIBS),m=t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),g=t.getParameter(t.MAX_VARYING_VECTORS),_=t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),v=u>0,x=a||e.has("OES_texture_float");return{isWebGL2:a,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==i)return i;if(!0===e.has("EXT_texture_filter_anisotropic")){const n=e.get("EXT_texture_filter_anisotropic");i=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,precision:s,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:_,vertexTextures:v,floatFragmentTextures:x,floatVertexTextures:v&&x,maxSamples:a?t.getParameter(t.MAX_SAMPLES):0}}function bi(t){const e=this;let n=null,i=0,r=!1,a=!1;const s=new ci,o=new vt,l={value:null,needsUpdate:!1};function c(t,n,i,r){const a=null!==t?t.length:0;let c=null;if(0!==a){if(c=l.value,!0!==r||null===c){const e=i+4*a,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,n=i;e!==a;++e,n+=4)s.copy(t[e]).applyMatrix4(r,o),s.normal.toArray(c,n),c[n+3]=s.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=a,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e){const n=0!==t.length||e||0!==i||r;return r=e,i=t.length,n},this.beginShadows=function(){a=!0,c(null)},this.endShadows=function(){a=!1},this.setGlobalState=function(t,e){n=c(t,e,0)},this.setState=function(s,o,h){const u=s.clippingPlanes,d=s.clipIntersection,p=s.clipShadows,f=t.get(s);if(!r||null===u||0===u.length||a&&!p)a?c(null):(l.value!==n&&(l.value=n,l.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0);else{const t=a?0:i,e=4*t;let r=f.clippingState||null;l.value=r,r=c(u,o,e,h);for(let t=0;t!==e;++t)r[t]=n[t];f.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function Ti(t){let e=new WeakMap;function n(t,e){return 303===e?t.mapping=_:304===e&&(t.mapping=v),t}function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const a=r.mapping;if(303===a||304===a){if(e.has(r))return n(e.get(r).texture,r.mapping);{const a=r.image;if(a&&a.height>0){const s=new ai(a.height/2);return s.fromEquirectangularTexture(t,r),e.set(r,s),r.addEventListener("dispose",i),n(s.texture,r.mapping)}return null}}}return r},dispose:function(){e=new WeakMap}}}class wi extends ti{constructor(t=-1,e=1,n=1,i=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,a=n+t,s=i+e,o=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,a=r+t*this.view.width,s-=e*this.view.offsetY,o=s-e*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}const Ai=[.125,.215,.35,.446,.526,.582],Ri=new wi,Ci=new hn;let Li=null,Pi=0,Ui=0;const Di=(1+Math.sqrt(5))/2,Ii=1/Di,Ni=[new Xt(1,1,1),new Xt(-1,1,1),new Xt(1,1,-1),new Xt(-1,1,-1),new Xt(0,Di,Ii),new Xt(0,Di,-Ii),new Xt(Ii,0,Di),new Xt(-Ii,0,Di),new Xt(Di,Ii,0),new Xt(-Di,Ii,0)];class Oi{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Li=this._renderer.getRenderTarget(),Pi=this._renderer.getActiveCubeFace(),Ui=this._renderer.getActiveMipmapLevel(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=Hi(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Bi(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Li,Pi,Ui),t.scissorTest=!1,zi(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===_||t.mapping===v?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Li=this._renderer.getRenderTarget(),Pi=this._renderer.getActiveCubeFace(),Ui=this._renderer.getActiveMipmapLevel();const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:T,minFilter:T,generateMipmaps:!1,type:P,format:D,colorSpace:Y,depthBuffer:!1},i=Fi(t,e,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Fi(t,e,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],n=[],i=[];let r=t;const a=t-4+1+Ai.length;for(let s=0;s<a;s++){const a=Math.pow(2,r);n.push(a);let o=1/a;s>t-4?o=Ai[s-t+4-1]:0===s&&(o=0),i.push(o);const l=1/(a-2),c=-l,h=1+l,u=[c,c,h,c,h,h,c,c,h,h,c,h],d=6,p=6,f=3,m=2,g=1,_=new Float32Array(f*p*d),v=new Float32Array(m*p*d),x=new Float32Array(g*p*d);for(let t=0;t<d;t++){const e=t%3*2/3-1,n=t>2?0:-1,i=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];_.set(i,f*p*t),v.set(u,m*p*t);const r=[t,t,t,t,t,t];x.set(r,g*p*t)}const y=new Rn;y.setAttribute("position",new _n(_,f)),y.setAttribute("uv",new _n(v,m)),y.setAttribute("faceIndex",new _n(x,g)),e.push(y),r>4&&r--}return{lodPlanes:e,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(t,e,n){const i=new Float32Array(20),r=new Xt(0,1,0);return new Qn({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(i,t,e)}return i}_compileMaterial(t){const e=new jn(this._lodPlanes[0],t);this._renderer.compile(e,Ri)}_sceneToCubeUV(t,e,n,i){const r=new ei(90,1,e,n),a=[1,-1,1,1,1,1],s=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(Ci),o.toneMapping=u,o.autoClear=!1;const h=new fn({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),d=new jn(new qn,h);let p=!1;const f=t.background;f?f.isColor&&(h.color.copy(f),t.background=null,p=!0):(h.color.copy(Ci),p=!0);for(let e=0;e<6;e++){const n=e%3;0===n?(r.up.set(0,a[e],0),r.lookAt(s[e],0,0)):1===n?(r.up.set(0,0,a[e]),r.lookAt(0,s[e],0)):(r.up.set(0,a[e],0),r.lookAt(0,0,s[e]));const l=this._cubeSize;zi(i,n*l,e>2?l:0,l,l),o.setRenderTarget(i),p&&o.render(d,r),o.render(t,r)}d.geometry.dispose(),d.material.dispose(),o.toneMapping=c,o.autoClear=l,t.background=f}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===_||t.mapping===v;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=Hi()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=Bi());const r=i?this._cubemapMaterial:this._equirectMaterial,a=new jn(this._lodPlanes[0],r);r.uniforms.envMap.value=t;const s=this._cubeSize;zi(e,0,0,3*s,2*s),n.setRenderTarget(e),n.render(a,Ri)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let e=1;e<this._lodPlanes.length;e++){const n=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]),i=Ni[(e-1)%Ni.length];this._blur(t,e-1,e,n,i)}e.autoClear=n}_blur(t,e,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,i,"latitudinal",r),this._halfBlur(a,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,a,s){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new jn(this._lodPlanes[i],l),h=l.uniforms,u=this._sizeLods[n]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,f=isFinite(r)?1+Math.floor(3*p):20;f>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const m=[];let g=0;for(let t=0;t<20;++t){const e=t/p,n=Math.exp(-e*e/2);m.push(n),0===t?g+=n:t<f&&(g+=2*n)}for(let t=0;t<m.length;t++)m[t]=m[t]/g;h.envMap.value=t.texture,h.samples.value=f,h.weights.value=m,h.latitudinal.value="latitudinal"===a,s&&(h.poleAxis.value=s);const{_lodMax:_}=this;h.dTheta.value=d,h.mipInt.value=_-n;const v=this._sizeLods[i];zi(e,3*v*(i>_-4?i-_+4:0),4*(this._cubeSize-v),3*v,2*v),o.setRenderTarget(e),o.render(c,Ri)}}function Fi(t,e,n){const i=new Vt(t,e,n);return i.texture.mapping=x,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function zi(t,e,n,i,r){t.viewport.set(e,n,i,r),t.scissor.set(e,n,i,r)}function Bi(){return new Qn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Hi(){return new Qn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Vi(t){let e=new WeakMap,n=null;function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const a=r.mapping,s=303===a||304===a,o=a===_||a===v;if(s||o){if(r.isRenderTargetTexture&&!0===r.needsPMREMUpdate){r.needsPMREMUpdate=!1;let i=e.get(r);return null===n&&(n=new Oi(t)),i=s?n.fromEquirectangular(r,i):n.fromCubemap(r,i),e.set(r,i),i.texture}if(e.has(r))return e.get(r).texture;{const a=r.image;if(s&&a&&a.height>0||o&&a&&function(t){let e=0;for(let n=0;n<6;n++)void 0!==t[n]&&e++;return 6===e}(a)){null===n&&(n=new Oi(t));const a=s?n.fromEquirectangular(r):n.fromCubemap(r);return e.set(r,a),r.addEventListener("dispose",i),a.texture}return null}}}return r},dispose:function(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function Gi(t){const e={};function n(n){if(void 0!==e[n])return e[n];let i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}return e[n]=i,i}return{has:function(t){return null!==n(t)},init:function(t){t.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(t){const e=n(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function ki(t,e,n,i){const r={},a=new WeakMap;function s(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);for(const t in o.morphAttributes){const n=o.morphAttributes[t];for(let t=0,i=n.length;t<i;t++)e.remove(n[t])}o.removeEventListener("dispose",s),delete r[o.id];const l=a.get(o);l&&(e.remove(l),a.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],i=t.index,r=t.attributes.position;let s=0;if(null!==i){const t=i.array;s=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0],r=t[e+1],a=t[e+2];n.push(i,r,r,a,a,i)}}else{if(void 0===r)return;{const t=r.array;s=r.version;for(let e=0,i=t.length/3-1;e<i;e+=3){const t=e+0,i=e+1,r=e+2;n.push(t,i,i,r,r,t)}}}const o=new(yt(n)?xn:vn)(n,1);o.version=s;const l=a.get(t);l&&e.remove(l),a.set(t,o)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",s),r[e.id]=!0,n.memory.geometries++),e},update:function(n){const i=n.attributes;for(const n in i)e.update(i[n],t.ARRAY_BUFFER);const r=n.morphAttributes;for(const n in r){const i=r[n];for(let n=0,r=i.length;n<r;n++)e.update(i[n],t.ARRAY_BUFFER)}},getWireframeAttribute:function(t){const e=a.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return a.get(t)}}}function Wi(t,e,n,i){const r=i.isWebGL2;let a,s,o;this.setMode=function(t){a=t},this.setIndex=function(t){s=t.type,o=t.bytesPerElement},this.render=function(e,i){t.drawElements(a,i,s,e*o),n.update(i,a,1)},this.renderInstances=function(i,l,c){if(0===c)return;let h,u;if(r)h=t,u="drawElementsInstanced";else if(h=e.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[u](a,l,s,i*o,c),n.update(l,a,c)},this.renderMultiDraw=function(t,i,r){if(0===r)return;const l=e.get("WEBGL_multi_draw");if(null===l)for(let e=0;e<r;e++)this.render(t[e]/o,i[e]);else{l.multiDrawElementsWEBGL(a,i,0,s,t,0,r);let e=0;for(let t=0;t<r;t++)e+=i[t];n.update(e,a,1)}}}function Xi(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(n,i,r){switch(e.calls++,i){case t.TRIANGLES:e.triangles+=r*(n/3);break;case t.LINES:e.lines+=r*(n/2);break;case t.LINE_STRIP:e.lines+=r*(n-1);break;case t.LINE_LOOP:e.lines+=r*n;break;case t.POINTS:e.points+=r*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function ji(t,e){return t[0]-e[0]}function Yi(t,e){return Math.abs(e[1])-Math.abs(t[1])}function qi(t,e,n){const i={},r=new Float32Array(8),a=new WeakMap,s=new Bt,o=[];for(let t=0;t<8;t++)o[t]=[t,0];return{update:function(l,c,h){const u=l.morphTargetInfluences;if(!0===e.isWebGL2){const d=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,p=void 0!==d?d.length:0;let f=a.get(c);if(void 0===f||f.count!==p){void 0!==f&&f.texture.dispose();const _=void 0!==c.morphAttributes.position,v=void 0!==c.morphAttributes.normal,x=void 0!==c.morphAttributes.color,y=c.morphAttributes.position||[],M=c.morphAttributes.normal||[],E=c.morphAttributes.color||[];let S=0;!0===_&&(S=1),!0===v&&(S=2),!0===x&&(S=3);let b=c.attributes.position.count*S,T=1;b>e.maxTextureSize&&(T=Math.ceil(b/e.maxTextureSize),b=e.maxTextureSize);const w=new Float32Array(b*T*4*p),A=new Gt(w,b,T,p);A.type=L,A.needsUpdate=!0;const R=4*S;for(let P=0;P<p;P++){const U=y[P],D=M[P],I=E[P],N=b*T*4*P;for(let O=0;O<U.count;O++){const F=O*R;!0===_&&(s.fromBufferAttribute(U,O),w[N+F+0]=s.x,w[N+F+1]=s.y,w[N+F+2]=s.z,w[N+F+3]=0),!0===v&&(s.fromBufferAttribute(D,O),w[N+F+4]=s.x,w[N+F+5]=s.y,w[N+F+6]=s.z,w[N+F+7]=0),!0===x&&(s.fromBufferAttribute(I,O),w[N+F+8]=s.x,w[N+F+9]=s.y,w[N+F+10]=s.z,w[N+F+11]=4===I.itemSize?s.w:1)}}function C(){A.dispose(),a.delete(c),c.removeEventListener("dispose",C)}f={count:p,texture:A,size:new _t(b,T)},a.set(c,f),c.addEventListener("dispose",C)}let m=0;for(let z=0;z<u.length;z++)m+=u[z];const g=c.morphTargetsRelative?1:1-m;h.getUniforms().setValue(t,"morphTargetBaseInfluence",g),h.getUniforms().setValue(t,"morphTargetInfluences",u),h.getUniforms().setValue(t,"morphTargetsTexture",f.texture,n),h.getUniforms().setValue(t,"morphTargetsTextureSize",f.size)}else{const B=void 0===u?0:u.length;let H=i[c.id];if(void 0===H||H.length!==B){H=[];for(let X=0;X<B;X++)H[X]=[X,0];i[c.id]=H}for(let j=0;j<B;j++){const Y=H[j];Y[0]=j,Y[1]=u[j]}H.sort(Yi);for(let q=0;q<8;q++)q<B&&H[q][1]?(o[q][0]=H[q][0],o[q][1]=H[q][1]):(o[q][0]=Number.MAX_SAFE_INTEGER,o[q][1]=0);o.sort(ji);const V=c.morphAttributes.position,G=c.morphAttributes.normal;let k=0;for(let $=0;$<8;$++){const K=o[$],Z=K[0],J=K[1];Z!==Number.MAX_SAFE_INTEGER&&J?(V&&c.getAttribute("morphTarget"+$)!==V[Z]&&c.setAttribute("morphTarget"+$,V[Z]),G&&c.getAttribute("morphNormal"+$)!==G[Z]&&c.setAttribute("morphNormal"+$,G[Z]),r[$]=J,k+=J):(V&&!0===c.hasAttribute("morphTarget"+$)&&c.deleteAttribute("morphTarget"+$),G&&!0===c.hasAttribute("morphNormal"+$)&&c.deleteAttribute("morphNormal"+$),r[$]=0)}const W=c.morphTargetsRelative?1:1-k;h.getUniforms().setValue(t,"morphTargetBaseInfluence",W),h.getUniforms().setValue(t,"morphTargetInfluences",r)}}}}function $i(t,e,n,i){let r=new WeakMap;function a(t){const e=t.target;e.removeEventListener("dispose",a),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(s){const o=i.render.frame,l=s.geometry,c=e.get(s,l);if(r.get(c)!==o&&(e.update(c),r.set(c,o)),s.isInstancedMesh&&(!1===s.hasEventListener("dispose",a)&&s.addEventListener("dispose",a),r.get(s)!==o&&(n.update(s.instanceMatrix,t.ARRAY_BUFFER),null!==s.instanceColor&&n.update(s.instanceColor,t.ARRAY_BUFFER),r.set(s,o))),s.isSkinnedMesh){const t=s.skeleton;r.get(t)!==o&&(t.update(),r.set(t,o))}return c},dispose:function(){r=new WeakMap}}}class Ki extends zt{constructor(t,e,n,i,r,a,s,o,l,c){if((c=void 0!==c?c:I)!==I&&c!==N)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&c===I&&(n=C),void 0===n&&c===N&&(n=U),super(null,i,r,a,s,o,c,n,l),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=void 0!==s?s:S,this.minFilter=void 0!==o?o:S,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return null!==this.compareFunction&&(e.compareFunction=this.compareFunction),e}}const Zi=new zt,Ji=new Ki(1,1);Ji.compareFunction=515;const Qi=new Gt,tr=new kt,er=new ri,nr=[],ir=[],rr=new Float32Array(16),ar=new Float32Array(9),sr=new Float32Array(4);function or(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let a=nr[r];if(void 0===a&&(a=new Float32Array(r),nr[r]=a),0!==e){i.toArray(a,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(a,r)}return a}function lr(t,e){if(t.length!==e.length)return!1;for(let n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function cr(t,e){for(let n=0,i=e.length;n<i;n++)t[n]=e[n]}function hr(t,e){let n=ir[e];void 0===n&&(n=new Int32Array(e),ir[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function ur(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function dr(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(lr(n,e))return;t.uniform2fv(this.addr,e),cr(n,e)}}function pr(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(lr(n,e))return;t.uniform3fv(this.addr,e),cr(n,e)}}function fr(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(lr(n,e))return;t.uniform4fv(this.addr,e),cr(n,e)}}function mr(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(lr(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),cr(n,e)}else{if(lr(n,i))return;sr.set(i),t.uniformMatrix2fv(this.addr,!1,sr),cr(n,i)}}function gr(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(lr(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),cr(n,e)}else{if(lr(n,i))return;ar.set(i),t.uniformMatrix3fv(this.addr,!1,ar),cr(n,i)}}function _r(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(lr(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),cr(n,e)}else{if(lr(n,i))return;rr.set(i),t.uniformMatrix4fv(this.addr,!1,rr),cr(n,i)}}function vr(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function xr(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2i(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(lr(n,e))return;t.uniform2iv(this.addr,e),cr(n,e)}}function yr(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3i(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(lr(n,e))return;t.uniform3iv(this.addr,e),cr(n,e)}}function Mr(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4i(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(lr(n,e))return;t.uniform4iv(this.addr,e),cr(n,e)}}function Er(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Sr(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2ui(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(lr(n,e))return;t.uniform2uiv(this.addr,e),cr(n,e)}}function br(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3ui(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(lr(n,e))return;t.uniform3uiv(this.addr,e),cr(n,e)}}function Tr(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4ui(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(lr(n,e))return;t.uniform4uiv(this.addr,e),cr(n,e)}}function wr(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r);const a=this.type===t.SAMPLER_2D_SHADOW?Ji:Zi;n.setTexture2D(e||a,r)}function Ar(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||tr,r)}function Rr(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(e||er,r)}function Cr(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||Qi,r)}function Lr(t,e){t.uniform1fv(this.addr,e)}function Pr(t,e){const n=or(e,this.size,2);t.uniform2fv(this.addr,n)}function Ur(t,e){const n=or(e,this.size,3);t.uniform3fv(this.addr,n)}function Dr(t,e){const n=or(e,this.size,4);t.uniform4fv(this.addr,n)}function Ir(t,e){const n=or(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function Nr(t,e){const n=or(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function Or(t,e){const n=or(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function Fr(t,e){t.uniform1iv(this.addr,e)}function zr(t,e){t.uniform2iv(this.addr,e)}function Br(t,e){t.uniform3iv(this.addr,e)}function Hr(t,e){t.uniform4iv(this.addr,e)}function Vr(t,e){t.uniform1uiv(this.addr,e)}function Gr(t,e){t.uniform2uiv(this.addr,e)}function kr(t,e){t.uniform3uiv(this.addr,e)}function Wr(t,e){t.uniform4uiv(this.addr,e)}function Xr(t,e,n){const i=this.cache,r=e.length,a=hr(n,r);lr(i,a)||(t.uniform1iv(this.addr,a),cr(i,a));for(let t=0;t!==r;++t)n.setTexture2D(e[t]||Zi,a[t])}function jr(t,e,n){const i=this.cache,r=e.length,a=hr(n,r);lr(i,a)||(t.uniform1iv(this.addr,a),cr(i,a));for(let t=0;t!==r;++t)n.setTexture3D(e[t]||tr,a[t])}function Yr(t,e,n){const i=this.cache,r=e.length,a=hr(n,r);lr(i,a)||(t.uniform1iv(this.addr,a),cr(i,a));for(let t=0;t!==r;++t)n.setTextureCube(e[t]||er,a[t])}function qr(t,e,n){const i=this.cache,r=e.length,a=hr(n,r);lr(i,a)||(t.uniform1iv(this.addr,a),cr(i,a));for(let t=0;t!==r;++t)n.setTexture2DArray(e[t]||Qi,a[t])}class $r{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=function(t){switch(t){case 5126:return ur;case 35664:return dr;case 35665:return pr;case 35666:return fr;case 35674:return mr;case 35675:return gr;case 35676:return _r;case 5124:case 35670:return vr;case 35667:case 35671:return xr;case 35668:case 35672:return yr;case 35669:case 35673:return Mr;case 5125:return Er;case 36294:return Sr;case 36295:return br;case 36296:return Tr;case 35678:case 36198:case 36298:case 36306:case 35682:return wr;case 35679:case 36299:case 36307:return Ar;case 35680:case 36300:case 36308:case 36293:return Rr;case 36289:case 36303:case 36311:case 36292:return Cr}}(e.type)}}class Kr{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Lr;case 35664:return Pr;case 35665:return Ur;case 35666:return Dr;case 35674:return Ir;case 35675:return Nr;case 35676:return Or;case 5124:case 35670:return Fr;case 35667:case 35671:return zr;case 35668:case 35672:return Br;case 35669:case 35673:return Hr;case 5125:return Vr;case 36294:return Gr;case 36295:return kr;case 36296:return Wr;case 35678:case 36198:case 36298:case 36306:case 35682:return Xr;case 35679:case 36299:case 36307:return jr;case 35680:case 36300:case 36308:case 36293:return Yr;case 36289:case 36303:case 36311:case 36292:return qr}}(e.type)}}class Zr{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(t,e[a.id],n)}}}const Jr=/(\w+)(\])?(\[|\.)?/g;function Qr(t,e){t.seq.push(e),t.map[e.id]=e}function ta(t,e,n){const i=t.name,r=i.length;for(Jr.lastIndex=0;;){const a=Jr.exec(i),s=Jr.lastIndex;let o=a[1];const l="]"===a[2],c=a[3];if(l&&(o|=0),void 0===c||"["===c&&s+2===r){Qr(n,void 0===c?new $r(o,t,e):new Kr(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new Zr(o),Qr(n,t)),n=t}}}class ea{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);ta(n,t.getUniformLocation(e,n.name),this)}}setValue(t,e,n,i){const r=this.map[e];void 0!==r&&r.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];void 0!==i&&this.setValue(t,n,i)}static upload(t,e,n,i){for(let r=0,a=e.length;r!==a;++r){const a=e[r],s=n[a.id];!1!==s.needsUpdate&&a.setValue(t,s.value,i)}}static seqWithValue(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];r.id in e&&n.push(r)}return n}}function na(t,e,n){const i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}const ia=37297;let ra=0;function aa(t,e,n){const i=t.getShaderParameter(e,t.COMPILE_STATUS),r=t.getShaderInfoLog(e).trim();if(i&&""===r)return"";const a=/ERROR: 0:(\d+)/.exec(r);if(a){const i=parseInt(a[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+function(t,e){const n=t.split("\n"),i=[],r=Math.max(e-6,0),a=Math.min(e+6,n.length);for(let t=r;t<a;t++){const r=t+1;i.push(`${r===e?">":" "} ${r}: ${n[t]}`)}return i.join("\n")}(t.getShaderSource(e),i)}return r}function sa(t,e){const n=function(t){const e=Ct.getPrimaries(Ct.workingColorSpace),n=Ct.getPrimaries(t);let i;switch(e===n?i="":e===Q&&n===J?i="LinearDisplayP3ToLinearSRGB":e===J&&n===Q&&(i="LinearSRGBToLinearDisplayP3"),t){case Y:case $:return[i,"LinearTransferOETF"];case j:case q:return[i,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",t),[i,"LinearTransferOETF"]}}(e);return`vec4 ${t}( vec4 value ) { return ${n[0]}( ${n[1]}( value ) ); }`}function oa(t,e){let n;switch(e){case d:n="Linear";break;case p:n="Reinhard";break;case f:n="OptimizedCineon";break;case m:n="ACESFilmic";break;case g:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function la(t){return""!==t}function ca(t,e){const n=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function ha(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const ua=/^[ \t]*#include +<([\w\d./]+)>/gm;function da(t){return t.replace(ua,fa)}const pa=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function fa(t,e){let n=gi[e];if(void 0===n){const t=pa.get(e);if(void 0===t)throw new Error("Can not resolve #include <"+e+">");n=gi[t],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,t)}return da(n)}const ma=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function ga(t){return t.replace(ma,_a)}function _a(t,e,n,i){let r="";for(let t=parseInt(e);t<parseInt(n);t++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function va(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function xa(t,e,n,i){const o=t.getContext(),d=n.defines;let p=n.vertexShader,f=n.fragmentShader;const m=function(t){let e="SHADOWMAP_TYPE_BASIC";return t.shadowMapType===r?e="SHADOWMAP_TYPE_PCF":t.shadowMapType===a?e="SHADOWMAP_TYPE_PCF_SOFT":t.shadowMapType===s&&(e="SHADOWMAP_TYPE_VSM"),e}(n),g=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case _:case v:e="ENVMAP_TYPE_CUBE";break;case x:e="ENVMAP_TYPE_CUBE_UV"}return e}(n),y=function(t){let e="ENVMAP_MODE_REFLECTION";return t.envMap&&t.envMapMode===v&&(e="ENVMAP_MODE_REFRACTION"),e}(n),M=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case l:e="ENVMAP_BLENDING_MULTIPLY";break;case c:e="ENVMAP_BLENDING_MIX";break;case h:e="ENVMAP_BLENDING_ADD"}return e}(n),E=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const n=Math.log2(e)-2,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),S=n.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUVHeight||t.bumpMap||t.normalMapTangentSpace||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(la).join("\n")}(n),b=function(t){const e=[];for(const n in t){const i=t[n];!1!==i&&e.push("#define "+n+" "+i)}return e.join("\n")}(d),T=o.createProgram();let w,A,R=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(w=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,b].filter(la).join("\n"),w.length>0&&(w+="\n"),A=[S,"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,b].filter(la).join("\n"),A.length>0&&(A+="\n")):(w=[va(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,b,n.batching?"#define USE_BATCHING":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+y:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+m:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.useLegacyLights?"#define LEGACY_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(la).join("\n"),A=[S,va(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,b,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+g:"",n.envMap?"#define "+y:"",n.envMap?"#define "+M:"",E?"#define CUBEUV_TEXEL_WIDTH "+E.texelWidth:"",E?"#define CUBEUV_TEXEL_HEIGHT "+E.texelHeight:"",E?"#define CUBEUV_MAX_MIP "+E.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+m:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.useLegacyLights?"#define LEGACY_LIGHTS":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==u?"#define TONE_MAPPING":"",n.toneMapping!==u?gi.tonemapping_pars_fragment:"",n.toneMapping!==u?oa("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",gi.colorspace_pars_fragment,sa("linearToOutputTexel",n.outputColorSpace),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(la).join("\n")),p=da(p),p=ca(p,n),p=ha(p,n),f=da(f),f=ca(f,n),f=ha(f,n),p=ga(p),f=ga(f),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(R="#version 300 es\n",w=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+w,A=["precision mediump sampler2DArray;","#define varying in",n.glslVersion===et?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===et?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+A);const C=R+w+p,L=R+A+f,P=na(o,o.VERTEX_SHADER,C),U=na(o,o.FRAGMENT_SHADER,L);function D(e){if(t.debug.checkShaderErrors){const n=o.getProgramInfoLog(T).trim(),i=o.getShaderInfoLog(P).trim(),r=o.getShaderInfoLog(U).trim();let a=!0,s=!0;if(!1===o.getProgramParameter(T,o.LINK_STATUS))if(a=!1,"function"==typeof t.debug.onShaderError)t.debug.onShaderError(o,T,P,U);else{const t=aa(o,P,"vertex"),e=aa(o,U,"fragment");console.error("THREE.WebGLProgram: Shader Error "+o.getError()+" - VALIDATE_STATUS "+o.getProgramParameter(T,o.VALIDATE_STATUS)+"\n\nProgram Info Log: "+n+"\n"+t+"\n"+e)}else""!==n?console.warn("THREE.WebGLProgram: Program Info Log:",n):""!==i&&""!==r||(s=!1);s&&(e.diagnostics={runnable:a,programLog:n,vertexShader:{log:i,prefix:w},fragmentShader:{log:r,prefix:A}})}o.deleteShader(P),o.deleteShader(U),I=new ea(o,T),N=function(t,e){const n={},i=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=t.getActiveAttrib(e,r),a=i.name;let s=1;i.type===t.FLOAT_MAT2&&(s=2),i.type===t.FLOAT_MAT3&&(s=3),i.type===t.FLOAT_MAT4&&(s=4),n[a]={type:i.type,location:t.getAttribLocation(e,a),locationSize:s}}return n}(o,T)}let I,N;o.attachShader(T,P),o.attachShader(T,U),void 0!==n.index0AttributeName?o.bindAttribLocation(T,0,n.index0AttributeName):!0===n.morphTargets&&o.bindAttribLocation(T,0,"position"),o.linkProgram(T),this.getUniforms=function(){return void 0===I&&D(this),I},this.getAttributes=function(){return void 0===N&&D(this),N};let O=!1===n.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===O&&(O=o.getProgramParameter(T,ia)),O},this.destroy=function(){i.releaseStatesOfProgram(this),o.deleteProgram(T),this.program=void 0},this.type=n.shaderType,this.name=n.shaderName,this.id=ra++,this.cacheKey=e,this.usedTimes=1,this.program=T,this.vertexShader=P,this.fragmentShader=U,this}let ya=0;class Ma{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(t);return!1===a.has(i)&&(a.add(i),i.usedTimes++),!1===a.has(r)&&(a.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return void 0===n&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return void 0===n&&(n=new Ea(t),e.set(t,n)),n}}class Ea{constructor(t){this.id=ya++,this.code=t,this.usedTimes=0}}function Sa(t,e,n,i,r,a,s){const o=new Ue,l=new Ma,c=[],h=r.isWebGL2,d=r.logarithmicDepthBuffer,p=r.vertexTextures;let f=r.precision;const m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function g(t){return 0===t?"uv":`uv${t}`}return{getParameters:function(a,o,c,_,v){const y=_.fog,M=v.geometry,E=a.isMeshStandardMaterial?_.environment:null,S=(a.isMeshStandardMaterial?n:e).get(a.envMap||E),b=S&&S.mapping===x?S.image.height:null,T=m[a.type];null!==a.precision&&(f=r.getMaxPrecision(a.precision),f!==a.precision&&console.warn("THREE.WebGLProgram.getParameters:",a.precision,"not supported, using",f,"instead."));const w=M.morphAttributes.position||M.morphAttributes.normal||M.morphAttributes.color,A=void 0!==w?w.length:0;let R,C,L,P,U=0;if(void 0!==M.morphAttributes.position&&(U=1),void 0!==M.morphAttributes.normal&&(U=2),void 0!==M.morphAttributes.color&&(U=3),T){const t=vi[T];R=t.vertexShader,C=t.fragmentShader}else R=a.vertexShader,C=a.fragmentShader,l.update(a),L=l.getVertexShaderID(a),P=l.getFragmentShaderID(a);const D=t.getRenderTarget(),I=!0===v.isInstancedMesh,N=!0===v.isBatchedMesh,O=!!a.map,F=!!a.matcap,z=!!S,B=!!a.aoMap,H=!!a.lightMap,V=!!a.bumpMap,G=!!a.normalMap,k=!!a.displacementMap,W=!!a.emissiveMap,X=!!a.metalnessMap,j=!!a.roughnessMap,q=a.anisotropy>0,$=a.clearcoat>0,K=a.iridescence>0,J=a.sheen>0,Q=a.transmission>0,tt=q&&!!a.anisotropyMap,et=$&&!!a.clearcoatMap,nt=$&&!!a.clearcoatNormalMap,it=$&&!!a.clearcoatRoughnessMap,rt=K&&!!a.iridescenceMap,at=K&&!!a.iridescenceThicknessMap,st=J&&!!a.sheenColorMap,ot=J&&!!a.sheenRoughnessMap,lt=!!a.specularMap,ct=!!a.specularColorMap,ht=!!a.specularIntensityMap,ut=Q&&!!a.transmissionMap,dt=Q&&!!a.thicknessMap,pt=!!a.gradientMap,ft=!!a.alphaMap,mt=a.alphaTest>0,gt=!!a.alphaHash,_t=!!a.extensions,vt=!!M.attributes.uv1,xt=!!M.attributes.uv2,yt=!!M.attributes.uv3;let Mt=u;return a.toneMapped&&(null!==D&&!0!==D.isXRRenderTarget||(Mt=t.toneMapping)),{isWebGL2:h,shaderID:T,shaderType:a.type,shaderName:a.name,vertexShader:R,fragmentShader:C,defines:a.defines,customVertexShaderID:L,customFragmentShaderID:P,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:f,batching:N,instancing:I,instancingColor:I&&null!==v.instanceColor,supportsVertexTextures:p,outputColorSpace:null===D?t.outputColorSpace:!0===D.isXRRenderTarget?D.texture.colorSpace:Y,map:O,matcap:F,envMap:z,envMapMode:z&&S.mapping,envMapCubeUVHeight:b,aoMap:B,lightMap:H,bumpMap:V,normalMap:G,displacementMap:p&&k,emissiveMap:W,normalMapObjectSpace:G&&1===a.normalMapType,normalMapTangentSpace:G&&0===a.normalMapType,metalnessMap:X,roughnessMap:j,anisotropy:q,anisotropyMap:tt,clearcoat:$,clearcoatMap:et,clearcoatNormalMap:nt,clearcoatRoughnessMap:it,iridescence:K,iridescenceMap:rt,iridescenceThicknessMap:at,sheen:J,sheenColorMap:st,sheenRoughnessMap:ot,specularMap:lt,specularColorMap:ct,specularIntensityMap:ht,transmission:Q,transmissionMap:ut,thicknessMap:dt,gradientMap:pt,opaque:!1===a.transparent&&1===a.blending,alphaMap:ft,alphaTest:mt,alphaHash:gt,combine:a.combine,mapUv:O&&g(a.map.channel),aoMapUv:B&&g(a.aoMap.channel),lightMapUv:H&&g(a.lightMap.channel),bumpMapUv:V&&g(a.bumpMap.channel),normalMapUv:G&&g(a.normalMap.channel),displacementMapUv:k&&g(a.displacementMap.channel),emissiveMapUv:W&&g(a.emissiveMap.channel),metalnessMapUv:X&&g(a.metalnessMap.channel),roughnessMapUv:j&&g(a.roughnessMap.channel),anisotropyMapUv:tt&&g(a.anisotropyMap.channel),clearcoatMapUv:et&&g(a.clearcoatMap.channel),clearcoatNormalMapUv:nt&&g(a.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:it&&g(a.clearcoatRoughnessMap.channel),iridescenceMapUv:rt&&g(a.iridescenceMap.channel),iridescenceThicknessMapUv:at&&g(a.iridescenceThicknessMap.channel),sheenColorMapUv:st&&g(a.sheenColorMap.channel),sheenRoughnessMapUv:ot&&g(a.sheenRoughnessMap.channel),specularMapUv:lt&&g(a.specularMap.channel),specularColorMapUv:ct&&g(a.specularColorMap.channel),specularIntensityMapUv:ht&&g(a.specularIntensityMap.channel),transmissionMapUv:ut&&g(a.transmissionMap.channel),thicknessMapUv:dt&&g(a.thicknessMap.channel),alphaMapUv:ft&&g(a.alphaMap.channel),vertexTangents:!!M.attributes.tangent&&(G||q),vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!M.attributes.color&&4===M.attributes.color.itemSize,vertexUv1s:vt,vertexUv2s:xt,vertexUv3s:yt,pointsUvs:!0===v.isPoints&&!!M.attributes.uv&&(O||ft),fog:!!y,useFog:!0===a.fog,fogExp2:y&&y.isFogExp2,flatShading:!0===a.flatShading,sizeAttenuation:!0===a.sizeAttenuation,logarithmicDepthBuffer:d,skinning:!0===v.isSkinnedMesh,morphTargets:void 0!==M.morphAttributes.position,morphNormals:void 0!==M.morphAttributes.normal,morphColors:void 0!==M.morphAttributes.color,morphTargetsCount:A,morphTextureStride:U,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:a.dithering,shadowMapEnabled:t.shadowMap.enabled&&c.length>0,shadowMapType:t.shadowMap.type,toneMapping:Mt,useLegacyLights:t._useLegacyLights,decodeVideoTexture:O&&!0===a.map.isVideoTexture&&Ct.getTransfer(a.map.colorSpace)===Z,premultipliedAlpha:a.premultipliedAlpha,doubleSided:2===a.side,flipSided:1===a.side,useDepthPacking:a.depthPacking>=0,depthPacking:a.depthPacking||0,index0AttributeName:a.index0AttributeName,extensionDerivatives:_t&&!0===a.extensions.derivatives,extensionFragDepth:_t&&!0===a.extensions.fragDepth,extensionDrawBuffers:_t&&!0===a.extensions.drawBuffers,extensionShaderTextureLOD:_t&&!0===a.extensions.shaderTextureLOD,rendererExtensionFragDepth:h||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:h||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:h||i.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:a.customProgramCacheKey()}},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.customVertexShaderID),n.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(function(t,e){t.push(e.precision),t.push(e.outputColorSpace),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.mapUv),t.push(e.alphaMapUv),t.push(e.lightMapUv),t.push(e.aoMapUv),t.push(e.bumpMapUv),t.push(e.normalMapUv),t.push(e.displacementMapUv),t.push(e.emissiveMapUv),t.push(e.metalnessMapUv),t.push(e.roughnessMapUv),t.push(e.anisotropyMapUv),t.push(e.clearcoatMapUv),t.push(e.clearcoatNormalMapUv),t.push(e.clearcoatRoughnessMapUv),t.push(e.iridescenceMapUv),t.push(e.iridescenceThicknessMapUv),t.push(e.sheenColorMapUv),t.push(e.sheenRoughnessMapUv),t.push(e.specularMapUv),t.push(e.specularColorMapUv),t.push(e.specularIntensityMapUv),t.push(e.transmissionMapUv),t.push(e.thicknessMapUv),t.push(e.combine),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numSpotLightMaps),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.numSpotLightShadowsWithMaps),t.push(e.numLightProbes),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection),t.push(e.depthPacking)}(n,e),function(t,e){o.disableAll(),e.isWebGL2&&o.enable(0),e.supportsVertexTextures&&o.enable(1),e.instancing&&o.enable(2),e.instancingColor&&o.enable(3),e.matcap&&o.enable(4),e.envMap&&o.enable(5),e.normalMapObjectSpace&&o.enable(6),e.normalMapTangentSpace&&o.enable(7),e.clearcoat&&o.enable(8),e.iridescence&&o.enable(9),e.alphaTest&&o.enable(10),e.vertexColors&&o.enable(11),e.vertexAlphas&&o.enable(12),e.vertexUv1s&&o.enable(13),e.vertexUv2s&&o.enable(14),e.vertexUv3s&&o.enable(15),e.vertexTangents&&o.enable(16),e.anisotropy&&o.enable(17),e.alphaHash&&o.enable(18),e.batching&&o.enable(19),t.push(o.mask),o.disableAll(),e.fog&&o.enable(0),e.useFog&&o.enable(1),e.flatShading&&o.enable(2),e.logarithmicDepthBuffer&&o.enable(3),e.skinning&&o.enable(4),e.morphTargets&&o.enable(5),e.morphNormals&&o.enable(6),e.morphColors&&o.enable(7),e.premultipliedAlpha&&o.enable(8),e.shadowMapEnabled&&o.enable(9),e.useLegacyLights&&o.enable(10),e.doubleSided&&o.enable(11),e.flipSided&&o.enable(12),e.useDepthPacking&&o.enable(13),e.dithering&&o.enable(14),e.transmission&&o.enable(15),e.sheen&&o.enable(16),e.opaque&&o.enable(17),e.pointsUvs&&o.enable(18),e.decodeVideoTexture&&o.enable(19),t.push(o.mask)}(n,e),n.push(t.outputColorSpace)),n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=m[t.type];let n;if(e){const t=vi[e];n=Jn.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let i;for(let t=0,e=c.length;t<e;t++){const e=c[t];if(e.cacheKey===n){i=e,++i.usedTimes;break}}return void 0===i&&(i=new xa(t,n,e,a),c.push(i)),i},releaseProgram:function(t){if(0==--t.usedTimes){const e=c.indexOf(t);c[e]=c[c.length-1],c.pop(),t.destroy()}},releaseShaderCache:function(t){l.remove(t)},programs:c,dispose:function(){l.dispose()}}}function ba(){let t=new WeakMap;return{get:function(e){let n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,i){t.get(e)[n]=i},dispose:function(){t=new WeakMap}}}function Ta(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function wa(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Aa(){const t=[];let e=0;const n=[],i=[],r=[];function a(n,i,r,a,s,o){let l=t[e];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:a,renderOrder:n.renderOrder,z:s,group:o},t[e]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=a,l.renderOrder=n.renderOrder,l.z=s,l.group=o),e++,l}return{opaque:n,transmissive:i,transparent:r,init:function(){e=0,n.length=0,i.length=0,r.length=0},push:function(t,e,s,o,l,c){const h=a(t,e,s,o,l,c);s.transmission>0?i.push(h):!0===s.transparent?r.push(h):n.push(h)},unshift:function(t,e,s,o,l,c){const h=a(t,e,s,o,l,c);s.transmission>0?i.unshift(h):!0===s.transparent?r.unshift(h):n.unshift(h)},finish:function(){for(let n=e,i=t.length;n<i;n++){const e=t[n];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){n.length>1&&n.sort(t||Ta),i.length>1&&i.sort(e||wa),r.length>1&&r.sort(e||wa)}}}function Ra(){let t=new WeakMap;return{get:function(e,n){const i=t.get(e);let r;return void 0===i?(r=new Aa,t.set(e,[r])):n>=i.length?(r=new Aa,i.push(r)):r=i[n],r},dispose:function(){t=new WeakMap}}}function Ca(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new Xt,color:new hn};break;case"SpotLight":n={position:new Xt,direction:new Xt,color:new hn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Xt,color:new hn,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Xt,skyColor:new hn,groundColor:new hn};break;case"RectAreaLight":n={color:new hn,position:new Xt,halfWidth:new Xt,halfHeight:new Xt}}return t[e.id]=n,n}}}let La=0;function Pa(t,e){return(e.castShadow?2:0)-(t.castShadow?2:0)+(e.map?1:0)-(t.map?1:0)}function Ua(t,e){const n=new Ca,i=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new _t};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new _t,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let t=0;t<9;t++)r.probe.push(new Xt);const a=new Xt,s=new Me,o=new Me;return{setup:function(a,s){let o=0,l=0,c=0;for(let t=0;t<9;t++)r.probe[t].set(0,0,0);let h=0,u=0,d=0,p=0,f=0,m=0,g=0,_=0,v=0,x=0,y=0;a.sort(Pa);const M=!0===s?Math.PI:1;for(let t=0,e=a.length;t<e;t++){const e=a[t],s=e.color,E=e.intensity,S=e.distance,b=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)o+=s.r*E*M,l+=s.g*E*M,c+=s.b*E*M;else if(e.isLightProbe){for(let t=0;t<9;t++)r.probe[t].addScaledVector(e.sh.coefficients[t],E);y++}else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*M),e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.directionalShadow[h]=n,r.directionalShadowMap[h]=b,r.directionalShadowMatrix[h]=e.shadow.matrix,m++}r.directional[h]=t,h++}else if(e.isSpotLight){const t=n.get(e);t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(s).multiplyScalar(E*M),t.distance=S,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,r.spot[d]=t;const a=e.shadow;if(e.map&&(r.spotLightMap[v]=e.map,v++,a.updateMatrices(e),e.castShadow&&x++),r.spotLightMatrix[d]=a.matrix,e.castShadow){const t=i.get(e);t.shadowBias=a.bias,t.shadowNormalBias=a.normalBias,t.shadowRadius=a.radius,t.shadowMapSize=a.mapSize,r.spotShadow[d]=t,r.spotShadowMap[d]=b,_++}d++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(s).multiplyScalar(E),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),r.rectArea[p]=t,p++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*M),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,n.shadowCameraNear=t.camera.near,n.shadowCameraFar=t.camera.far,r.pointShadow[u]=n,r.pointShadowMap[u]=b,r.pointShadowMatrix[u]=e.shadow.matrix,g++}r.point[u]=t,u++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(E*M),t.groundColor.copy(e.groundColor).multiplyScalar(E*M),r.hemi[f]=t,f++}}p>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(r.rectAreaLTC1=_i.LTC_FLOAT_1,r.rectAreaLTC2=_i.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=_i.LTC_HALF_1,r.rectAreaLTC2=_i.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=c;const E=r.hash;E.directionalLength===h&&E.pointLength===u&&E.spotLength===d&&E.rectAreaLength===p&&E.hemiLength===f&&E.numDirectionalShadows===m&&E.numPointShadows===g&&E.numSpotShadows===_&&E.numSpotMaps===v&&E.numLightProbes===y||(r.directional.length=h,r.spot.length=d,r.rectArea.length=p,r.point.length=u,r.hemi.length=f,r.directionalShadow.length=m,r.directionalShadowMap.length=m,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=_,r.spotShadowMap.length=_,r.directionalShadowMatrix.length=m,r.pointShadowMatrix.length=g,r.spotLightMatrix.length=_+v-x,r.spotLightMap.length=v,r.numSpotLightShadowsWithMaps=x,r.numLightProbes=y,E.directionalLength=h,E.pointLength=u,E.spotLength=d,E.rectAreaLength=p,E.hemiLength=f,E.numDirectionalShadows=m,E.numPointShadows=g,E.numSpotShadows=_,E.numSpotMaps=v,E.numLightProbes=y,r.version=La++)},setupView:function(t,e){let n=0,i=0,l=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=r.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),a.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(a),t.direction.transformDirection(u),n++}else if(d.isSpotLight){const t=r.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),a.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(a),t.direction.transformDirection(u),l++}else if(d.isRectAreaLight){const t=r.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),o.identity(),s.copy(d.matrixWorld),s.premultiply(u),o.extractRotation(s),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(o),t.halfHeight.applyMatrix4(o),c++}else if(d.isPointLight){const t=r.point[i];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),i++}else if(d.isHemisphereLight){const t=r.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),h++}}},state:r}}function Da(t,e){const n=new Ua(t,e),i=[],r=[];return{init:function(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function(t){n.setup(i,t)},setupLightsView:function(t){n.setupView(i,t)},pushLight:function(t){i.push(t)},pushShadow:function(t){r.push(t)}}}function Ia(t,e){let n=new WeakMap;return{get:function(i,r=0){const a=n.get(i);let s;return void 0===a?(s=new Da(t,e),n.set(i,[s])):r>=a.length?(s=new Da(t,e),a.push(s)):s=a[r],s},dispose:function(){n=new WeakMap}}}class Na extends pn{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class Oa extends pn{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function Fa(t,e,n){let i=new di;const a=new _t,o=new _t,l=new Bt,c=new Na({depthPacking:3201}),h=new Oa,u={},d=n.maxTextureSize,p={0:1,1:0,2:2},f=new Qn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new _t},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),m=f.clone();m.defines.HORIZONTAL_PASS=1;const g=new Rn;g.setAttribute("position",new _n(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new jn(g,f),v=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=r;let x=this.type;function y(n,i){const r=e.update(_);f.defines.VSM_SAMPLES!==n.blurSamples&&(f.defines.VSM_SAMPLES=n.blurSamples,m.defines.VSM_SAMPLES=n.blurSamples,f.needsUpdate=!0,m.needsUpdate=!0),null===n.mapPass&&(n.mapPass=new Vt(a.x,a.y)),f.uniforms.shadow_pass.value=n.map.texture,f.uniforms.resolution.value=n.mapSize,f.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(i,null,r,f,_,null),m.uniforms.shadow_pass.value=n.mapPass.texture,m.uniforms.resolution.value=n.mapSize,m.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(i,null,r,m,_,null)}function M(e,n,i,r){let a=null;const o=!0===i.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(void 0!==o)a=o;else if(a=!0===i.isPointLight?h:c,t.localClippingEnabled&&!0===n.clipShadows&&Array.isArray(n.clippingPlanes)&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const t=a.uuid,e=n.uuid;let i=u[t];void 0===i&&(i={},u[t]=i);let r=i[e];void 0===r&&(r=a.clone(),i[e]=r),a=r}return a.visible=n.visible,a.wireframe=n.wireframe,a.side=r===s?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:p[n.side],a.alphaMap=n.alphaMap,a.alphaTest=n.alphaTest,a.map=n.map,a.clipShadows=n.clipShadows,a.clippingPlanes=n.clippingPlanes,a.clipIntersection=n.clipIntersection,a.displacementMap=n.displacementMap,a.displacementScale=n.displacementScale,a.displacementBias=n.displacementBias,a.wireframeLinewidth=n.wireframeLinewidth,a.linewidth=n.linewidth,!0===i.isPointLight&&!0===a.isMeshDistanceMaterial&&(t.properties.get(a).light=i),a}function E(n,r,a,o,l){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&l===s)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const i=e.update(n),s=n.material;if(Array.isArray(s)){const e=i.groups;for(let c=0,h=e.length;c<h;c++){const h=e[c],u=s[h.materialIndex];if(u&&u.visible){const e=M(n,u,o,l);n.onBeforeShadow(t,n,r,a,i,e,h),t.renderBufferDirect(a,null,i,e,n,h),n.onAfterShadow(t,n,r,a,i,e,h)}}}else if(s.visible){const e=M(n,s,o,l);n.onBeforeShadow(t,n,r,a,i,e,null),t.renderBufferDirect(a,null,i,e,n,null),n.onAfterShadow(t,n,r,a,i,e,null)}}const c=n.children;for(let t=0,e=c.length;t<e;t++)E(c[t],r,a,o,l)}this.render=function(e,n,r){if(!1===v.enabled)return;if(!1===v.autoUpdate&&!1===v.needsUpdate)return;if(0===e.length)return;const c=t.getRenderTarget(),h=t.getActiveCubeFace(),u=t.getActiveMipmapLevel(),p=t.state;p.setBlending(0),p.buffers.color.setClear(1,1,1,1),p.buffers.depth.setTest(!0),p.setScissorTest(!1);const f=x!==s&&this.type===s,m=x===s&&this.type!==s;for(let c=0,h=e.length;c<h;c++){const h=e[c],u=h.shadow;if(void 0===u){console.warn("THREE.WebGLShadowMap:",h,"has no shadow.");continue}if(!1===u.autoUpdate&&!1===u.needsUpdate)continue;a.copy(u.mapSize);const g=u.getFrameExtents();if(a.multiply(g),o.copy(u.mapSize),(a.x>d||a.y>d)&&(a.x>d&&(o.x=Math.floor(d/g.x),a.x=o.x*g.x,u.mapSize.x=o.x),a.y>d&&(o.y=Math.floor(d/g.y),a.y=o.y*g.y,u.mapSize.y=o.y)),null===u.map||!0===f||!0===m){const t=this.type!==s?{minFilter:S,magFilter:S}:{};null!==u.map&&u.map.dispose(),u.map=new Vt(a.x,a.y,t),u.map.texture.name=h.name+".shadowMap",u.camera.updateProjectionMatrix()}t.setRenderTarget(u.map),t.clear();const _=u.getViewportCount();for(let t=0;t<_;t++){const e=u.getViewport(t);l.set(o.x*e.x,o.y*e.y,o.x*e.z,o.y*e.w),p.viewport(l),u.updateMatrices(h,t),i=u.getFrustum(),E(n,r,u.camera,h,this.type)}!0!==u.isPointLightShadow&&this.type===s&&y(u,r),u.needsUpdate=!1}x=this.type,v.needsUpdate=!1,t.setRenderTarget(c,h,u)}}function za(t,e,n){const i=n.isWebGL2,r=new function(){let e=!1;const n=new Bt;let i=null;const r=new Bt(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,a,s,o){!0===o&&(e*=s,i*=s,a*=s),n.set(e,i,a,s),!1===r.equals(n)&&(t.clearColor(e,i,a,s),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}},a=new function(){let e=!1,n=null,i=null,r=null;return{setTest:function(e){e?k(t.DEPTH_TEST):W(t.DEPTH_TEST)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){switch(e){case 0:t.depthFunc(t.NEVER);break;case 1:t.depthFunc(t.ALWAYS);break;case 2:t.depthFunc(t.LESS);break;case 3:default:t.depthFunc(t.LEQUAL);break;case 4:t.depthFunc(t.EQUAL);break;case 5:t.depthFunc(t.GEQUAL);break;case 6:t.depthFunc(t.GREATER);break;case 7:t.depthFunc(t.NOTEQUAL)}i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}},s=new function(){let e=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null;return{setTest:function(n){e||(n?k(t.STENCIL_TEST):W(t.STENCIL_TEST))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,s){i===e&&r===n&&a===s||(t.stencilFunc(e,n,s),i=e,r=n,a=s)},setOp:function(e,n,i){s===e&&o===n&&l===i||(t.stencilOp(e,n,i),s=e,o=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null}}},l=new WeakMap,c=new WeakMap;let h={},u={},d=new WeakMap,p=[],f=null,m=!1,g=null,_=null,v=null,x=null,y=null,M=null,E=null,S=new hn(0,0,0),b=0,T=!1,w=null,A=null,R=null,C=null,L=null;const P=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let U=!1,D=0;const I=t.getParameter(t.VERSION);-1!==I.indexOf("WebGL")?(D=parseFloat(/^WebGL (\d)/.exec(I)[1]),U=D>=1):-1!==I.indexOf("OpenGL ES")&&(D=parseFloat(/^OpenGL ES (\d)/.exec(I)[1]),U=D>=2);let N=null,O={};const F=t.getParameter(t.SCISSOR_BOX),z=t.getParameter(t.VIEWPORT),B=(new Bt).fromArray(F),H=(new Bt).fromArray(z);function V(e,n,r,a){const s=new Uint8Array(4),o=t.createTexture();t.bindTexture(e,o),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(let o=0;o<r;o++)!i||e!==t.TEXTURE_3D&&e!==t.TEXTURE_2D_ARRAY?t.texImage2D(n+o,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,s):t.texImage3D(n,0,t.RGBA,1,1,a,0,t.RGBA,t.UNSIGNED_BYTE,s);return o}const G={};function k(e){!0!==h[e]&&(t.enable(e),h[e]=!0)}function W(e){!1!==h[e]&&(t.disable(e),h[e]=!1)}G[t.TEXTURE_2D]=V(t.TEXTURE_2D,t.TEXTURE_2D,1),G[t.TEXTURE_CUBE_MAP]=V(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6),i&&(G[t.TEXTURE_2D_ARRAY]=V(t.TEXTURE_2D_ARRAY,t.TEXTURE_2D_ARRAY,1,1),G[t.TEXTURE_3D]=V(t.TEXTURE_3D,t.TEXTURE_3D,1,1)),r.setClear(0,0,0,1),a.setClear(1),s.setClear(0),k(t.DEPTH_TEST),a.setFunc(3),q(!1),$(1),k(t.CULL_FACE),Y(0);const X={[o]:t.FUNC_ADD,101:t.FUNC_SUBTRACT,102:t.FUNC_REVERSE_SUBTRACT};if(i)X[103]=t.MIN,X[104]=t.MAX;else{const t=e.get("EXT_blend_minmax");null!==t&&(X[103]=t.MIN_EXT,X[104]=t.MAX_EXT)}const j={200:t.ZERO,201:t.ONE,202:t.SRC_COLOR,204:t.SRC_ALPHA,210:t.SRC_ALPHA_SATURATE,208:t.DST_COLOR,206:t.DST_ALPHA,203:t.ONE_MINUS_SRC_COLOR,205:t.ONE_MINUS_SRC_ALPHA,209:t.ONE_MINUS_DST_COLOR,207:t.ONE_MINUS_DST_ALPHA,211:t.CONSTANT_COLOR,212:t.ONE_MINUS_CONSTANT_COLOR,213:t.CONSTANT_ALPHA,214:t.ONE_MINUS_CONSTANT_ALPHA};function Y(e,n,i,r,a,s,l,c,h,u){if(0!==e){if(!1===m&&(k(t.BLEND),m=!0),5===e)a=a||n,s=s||i,l=l||r,n===_&&a===y||(t.blendEquationSeparate(X[n],X[a]),_=n,y=a),i===v&&r===x&&s===M&&l===E||(t.blendFuncSeparate(j[i],j[r],j[s],j[l]),v=i,x=r,M=s,E=l),!1!==c.equals(S)&&h===b||(t.blendColor(c.r,c.g,c.b,h),S.copy(c),b=h),g=e,T=!1;else if(e!==g||u!==T){if(_===o&&y===o||(t.blendEquation(t.FUNC_ADD),_=o,y=o),u)switch(e){case 1:t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case 2:t.blendFunc(t.ONE,t.ONE);break;case 3:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case 4:t.blendFuncSeparate(t.ZERO,t.SRC_COLOR,t.ZERO,t.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case 1:t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case 2:t.blendFunc(t.SRC_ALPHA,t.ONE);break;case 3:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case 4:t.blendFunc(t.ZERO,t.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}v=null,x=null,M=null,E=null,S.set(0,0,0),b=0,g=e,T=u}}else!0===m&&(W(t.BLEND),m=!1)}function q(e){w!==e&&(e?t.frontFace(t.CW):t.frontFace(t.CCW),w=e)}function $(e){0!==e?(k(t.CULL_FACE),e!==A&&(1===e?t.cullFace(t.BACK):2===e?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):W(t.CULL_FACE),A=e}function K(e,n,i){e?(k(t.POLYGON_OFFSET_FILL),C===n&&L===i||(t.polygonOffset(n,i),C=n,L=i)):W(t.POLYGON_OFFSET_FILL)}return{buffers:{color:r,depth:a,stencil:s},enable:k,disable:W,bindFramebuffer:function(e,n){return u[e]!==n&&(t.bindFramebuffer(e,n),u[e]=n,i&&(e===t.DRAW_FRAMEBUFFER&&(u[t.FRAMEBUFFER]=n),e===t.FRAMEBUFFER&&(u[t.DRAW_FRAMEBUFFER]=n)),!0)},drawBuffers:function(i,r){let a=p,s=!1;if(i)if(a=d.get(r),void 0===a&&(a=[],d.set(r,a)),i.isWebGLMultipleRenderTargets){const e=i.texture;if(a.length!==e.length||a[0]!==t.COLOR_ATTACHMENT0){for(let n=0,i=e.length;n<i;n++)a[n]=t.COLOR_ATTACHMENT0+n;a.length=e.length,s=!0}}else a[0]!==t.COLOR_ATTACHMENT0&&(a[0]=t.COLOR_ATTACHMENT0,s=!0);else a[0]!==t.BACK&&(a[0]=t.BACK,s=!0);s&&(n.isWebGL2?t.drawBuffers(a):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(a))},useProgram:function(e){return f!==e&&(t.useProgram(e),f=e,!0)},setBlending:Y,setMaterial:function(e,n){2===e.side?W(t.CULL_FACE):k(t.CULL_FACE);let i=1===e.side;n&&(i=!i),q(i),1===e.blending&&!1===e.transparent?Y(0):Y(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.blendColor,e.blendAlpha,e.premultipliedAlpha),a.setFunc(e.depthFunc),a.setTest(e.depthTest),a.setMask(e.depthWrite),r.setMask(e.colorWrite);const o=e.stencilWrite;s.setTest(o),o&&(s.setMask(e.stencilWriteMask),s.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),s.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),K(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage?k(t.SAMPLE_ALPHA_TO_COVERAGE):W(t.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:q,setCullFace:$,setLineWidth:function(e){e!==R&&(U&&t.lineWidth(e),R=e)},setPolygonOffset:K,setScissorTest:function(e){e?k(t.SCISSOR_TEST):W(t.SCISSOR_TEST)},activeTexture:function(e){void 0===e&&(e=t.TEXTURE0+P-1),N!==e&&(t.activeTexture(e),N=e)},bindTexture:function(e,n,i){void 0===i&&(i=null===N?t.TEXTURE0+P-1:N);let r=O[i];void 0===r&&(r={type:void 0,texture:void 0},O[i]=r),r.type===e&&r.texture===n||(N!==i&&(t.activeTexture(i),N=i),t.bindTexture(e,n||G[e]),r.type=e,r.texture=n)},unbindTexture:function(){const e=O[N];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexImage3D:function(){try{t.compressedTexImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},updateUBOMapping:function(e,n){let i=c.get(n);void 0===i&&(i=new WeakMap,c.set(n,i));let r=i.get(e);void 0===r&&(r=t.getUniformBlockIndex(n,e.name),i.set(e,r))},uniformBlockBinding:function(e,n){const i=c.get(n).get(e);l.get(n)!==i&&(t.uniformBlockBinding(n,i,e.__bindingPointIndex),l.set(n,i))},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage3D:function(){try{t.compressedTexSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===B.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),B.copy(e))},viewport:function(e){!1===H.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),H.copy(e))},reset:function(){t.disable(t.BLEND),t.disable(t.CULL_FACE),t.disable(t.DEPTH_TEST),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SCISSOR_TEST),t.disable(t.STENCIL_TEST),t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO),t.blendFuncSeparate(t.ONE,t.ZERO,t.ONE,t.ZERO),t.blendColor(0,0,0,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(t.LESS),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(t.ALWAYS,0,4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),t.clearStencil(0),t.cullFace(t.BACK),t.frontFace(t.CCW),t.polygonOffset(0,0),t.activeTexture(t.TEXTURE0),t.bindFramebuffer(t.FRAMEBUFFER,null),!0===i&&(t.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),t.bindFramebuffer(t.READ_FRAMEBUFFER,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),h={},N=null,O={},u={},d=new WeakMap,p=[],f=null,m=!1,g=null,_=null,v=null,x=null,y=null,M=null,E=null,S=new hn(0,0,0),b=0,T=!1,w=null,A=null,R=null,C=null,L=null,B.set(0,0,t.canvas.width,t.canvas.height),H.set(0,0,t.canvas.width,t.canvas.height),r.reset(),a.reset(),s.reset()}}}function Ba(t,e,n,i,r,a,s){const o=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,h=r.maxTextureSize,u=r.maxSamples,d=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,p="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),f=new WeakMap;let m;const g=new WeakMap;let _=!1;try{_="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function v(t,e){return _?new OffscreenCanvas(t,e):Mt("canvas")}function x(t,e,n,i){let r=1;if((t.width>i||t.height>i)&&(r=i/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const i=e?pt:Math.floor,a=i(r*t.width),s=i(r*t.height);void 0===m&&(m=v(a,s));const o=n?v(a,s):m;return o.width=a,o.height=s,o.getContext("2d").drawImage(t,0,0,a,s),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+a+"x"+s+")."),o}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function O(t){return dt(t.width)&&dt(t.height)}function F(t,e){return t.generateMipmaps&&e&&t.minFilter!==S&&t.minFilter!==T}function z(e){t.generateMipmap(e)}function B(n,i,r,a,s=!1){if(!1===o)return i;if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let l=i;if(i===t.RED&&(r===t.FLOAT&&(l=t.R32F),r===t.HALF_FLOAT&&(l=t.R16F),r===t.UNSIGNED_BYTE&&(l=t.R8)),i===t.RED_INTEGER&&(r===t.UNSIGNED_BYTE&&(l=t.R8UI),r===t.UNSIGNED_SHORT&&(l=t.R16UI),r===t.UNSIGNED_INT&&(l=t.R32UI),r===t.BYTE&&(l=t.R8I),r===t.SHORT&&(l=t.R16I),r===t.INT&&(l=t.R32I)),i===t.RG&&(r===t.FLOAT&&(l=t.RG32F),r===t.HALF_FLOAT&&(l=t.RG16F),r===t.UNSIGNED_BYTE&&(l=t.RG8)),i===t.RGBA){const e=s?K:Ct.getTransfer(a);r===t.FLOAT&&(l=t.RGBA32F),r===t.HALF_FLOAT&&(l=t.RGBA16F),r===t.UNSIGNED_BYTE&&(l=e===Z?t.SRGB8_ALPHA8:t.RGBA8),r===t.UNSIGNED_SHORT_4_4_4_4&&(l=t.RGBA4),r===t.UNSIGNED_SHORT_5_5_5_1&&(l=t.RGB5_A1)}return l!==t.R16F&&l!==t.R32F&&l!==t.RG16F&&l!==t.RG32F&&l!==t.RGBA16F&&l!==t.RGBA32F||e.get("EXT_color_buffer_float"),l}function H(t,e,n){return!0===F(t,n)||t.isFramebufferTexture&&t.minFilter!==S&&t.minFilter!==T?Math.log2(Math.max(e.width,e.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?e.mipmaps.length:1}function V(e){return e===S||1004===e||e===b?t.NEAREST:t.LINEAR}function G(t){const e=t.target;e.removeEventListener("dispose",G),function(t){const e=i.get(t);if(void 0===e.__webglInit)return;const n=t.source,r=g.get(n);if(r){const i=r[e.__cacheKey];i.usedTimes--,0===i.usedTimes&&W(t),0===Object.keys(r).length&&g.delete(n)}i.remove(t)}(e),e.isVideoTexture&&f.delete(e)}function k(e){const n=e.target;n.removeEventListener("dispose",k),function(e){const n=e.texture,r=i.get(e),a=i.get(n);if(void 0!==a.__webglTexture&&(t.deleteTexture(a.__webglTexture),s.memory.textures--),e.depthTexture&&e.depthTexture.dispose(),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++){if(Array.isArray(r.__webglFramebuffer[e]))for(let n=0;n<r.__webglFramebuffer[e].length;n++)t.deleteFramebuffer(r.__webglFramebuffer[e][n]);else t.deleteFramebuffer(r.__webglFramebuffer[e]);r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e])}else{if(Array.isArray(r.__webglFramebuffer))for(let e=0;e<r.__webglFramebuffer.length;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]);else t.deleteFramebuffer(r.__webglFramebuffer);if(r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer)for(let e=0;e<r.__webglColorRenderbuffer.length;e++)r.__webglColorRenderbuffer[e]&&t.deleteRenderbuffer(r.__webglColorRenderbuffer[e]);r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer)}if(e.isWebGLMultipleRenderTargets)for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),s.memory.textures--),i.remove(n[e])}i.remove(n),i.remove(e)}(n)}function W(e){const n=i.get(e);t.deleteTexture(n.__webglTexture);const r=e.source;delete g.get(r)[n.__cacheKey],s.memory.textures--}let j=0;function q(e,r){const a=i.get(e);if(e.isVideoTexture&&function(t){const e=s.render.frame;f.get(t)!==e&&(f.set(t,e),t.update())}(e),!1===e.isRenderTargetTexture&&e.version>0&&a.__version!==e.version){const t=e.image;if(null===t)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==t.complete)return void it(a,e,r);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.bindTexture(t.TEXTURE_2D,a.__webglTexture,t.TEXTURE0+r)}const $={[y]:t.REPEAT,[M]:t.CLAMP_TO_EDGE,[E]:t.MIRRORED_REPEAT},J={[S]:t.NEAREST,1004:t.NEAREST_MIPMAP_NEAREST,[b]:t.NEAREST_MIPMAP_LINEAR,[T]:t.LINEAR,1007:t.LINEAR_MIPMAP_NEAREST,[w]:t.LINEAR_MIPMAP_LINEAR},Q={512:t.NEVER,519:t.ALWAYS,513:t.LESS,515:t.LEQUAL,514:t.EQUAL,518:t.GEQUAL,516:t.GREATER,517:t.NOTEQUAL};function tt(n,a,s){if(s?(t.texParameteri(n,t.TEXTURE_WRAP_S,$[a.wrapS]),t.texParameteri(n,t.TEXTURE_WRAP_T,$[a.wrapT]),n!==t.TEXTURE_3D&&n!==t.TEXTURE_2D_ARRAY||t.texParameteri(n,t.TEXTURE_WRAP_R,$[a.wrapR]),t.texParameteri(n,t.TEXTURE_MAG_FILTER,J[a.magFilter]),t.texParameteri(n,t.TEXTURE_MIN_FILTER,J[a.minFilter])):(t.texParameteri(n,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(n,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),n!==t.TEXTURE_3D&&n!==t.TEXTURE_2D_ARRAY||t.texParameteri(n,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),a.wrapS===M&&a.wrapT===M||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,t.TEXTURE_MAG_FILTER,V(a.magFilter)),t.texParameteri(n,t.TEXTURE_MIN_FILTER,V(a.minFilter)),a.minFilter!==S&&a.minFilter!==T&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),a.compareFunction&&(t.texParameteri(n,t.TEXTURE_COMPARE_MODE,t.COMPARE_REF_TO_TEXTURE),t.texParameteri(n,t.TEXTURE_COMPARE_FUNC,Q[a.compareFunction])),!0===e.has("EXT_texture_filter_anisotropic")){const s=e.get("EXT_texture_filter_anisotropic");if(a.magFilter===S)return;if(a.minFilter!==b&&a.minFilter!==w)return;if(a.type===L&&!1===e.has("OES_texture_float_linear"))return;if(!1===o&&a.type===P&&!1===e.has("OES_texture_half_float_linear"))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(t.texParameterf(n,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function et(e,n){let i=!1;void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",G));const r=n.source;let a=g.get(r);void 0===a&&(a={},g.set(r,a));const o=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.wrapR||0),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.colorSpace),e.join()}(n);if(o!==e.__cacheKey){void 0===a[o]&&(a[o]={texture:t.createTexture(),usedTimes:0},s.memory.textures++,i=!0),a[o].usedTimes++;const r=a[e.__cacheKey];void 0!==r&&(a[e.__cacheKey].usedTimes--,0===r.usedTimes&&W(n)),e.__cacheKey=o,e.__webglTexture=a[o].texture}return i}function it(e,r,s){let l=t.TEXTURE_2D;(r.isDataArrayTexture||r.isCompressedArrayTexture)&&(l=t.TEXTURE_2D_ARRAY),r.isData3DTexture&&(l=t.TEXTURE_3D);const c=et(e,r),u=r.source;n.bindTexture(l,e.__webglTexture,t.TEXTURE0+s);const d=i.get(u);if(u.version!==d.__version||!0===c){n.activeTexture(t.TEXTURE0+s);const e=Ct.getPrimaries(Ct.workingColorSpace),i=r.colorSpace===X?null:Ct.getPrimaries(r.colorSpace),p=r.colorSpace===X||e===i?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,r.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,r.unpackAlignment),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,p);const f=function(t){return!o&&(t.wrapS!==M||t.wrapT!==M||t.minFilter!==S&&t.minFilter!==T)}(r)&&!1===O(r.image);let m=x(r.image,f,!1,h);m=ct(r,m);const g=O(m)||o,_=a.convert(r.format,r.colorSpace);let v,y=a.convert(r.type),E=B(r.internalFormat,_,y,r.colorSpace,r.isVideoTexture);tt(l,r,g);const b=r.mipmaps,w=o&&!0!==r.isVideoTexture&&36196!==E,A=void 0===d.__version||!0===c,P=H(r,m,g);if(r.isDepthTexture)E=t.DEPTH_COMPONENT,o?E=r.type===L?t.DEPTH_COMPONENT32F:r.type===C?t.DEPTH_COMPONENT24:r.type===U?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT16:r.type===L&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),r.format===I&&E===t.DEPTH_COMPONENT&&r.type!==R&&r.type!==C&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=C,y=a.convert(r.type)),r.format===N&&E===t.DEPTH_COMPONENT&&(E=t.DEPTH_STENCIL,r.type!==U&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=U,y=a.convert(r.type))),A&&(w?n.texStorage2D(t.TEXTURE_2D,1,E,m.width,m.height):n.texImage2D(t.TEXTURE_2D,0,E,m.width,m.height,0,_,y,null));else if(r.isDataTexture)if(b.length>0&&g){w&&A&&n.texStorage2D(t.TEXTURE_2D,P,E,b[0].width,b[0].height);for(let e=0,i=b.length;e<i;e++)v=b[e],w?n.texSubImage2D(t.TEXTURE_2D,e,0,0,v.width,v.height,_,y,v.data):n.texImage2D(t.TEXTURE_2D,e,E,v.width,v.height,0,_,y,v.data);r.generateMipmaps=!1}else w?(A&&n.texStorage2D(t.TEXTURE_2D,P,E,m.width,m.height),n.texSubImage2D(t.TEXTURE_2D,0,0,0,m.width,m.height,_,y,m.data)):n.texImage2D(t.TEXTURE_2D,0,E,m.width,m.height,0,_,y,m.data);else if(r.isCompressedTexture)if(r.isCompressedArrayTexture){w&&A&&n.texStorage3D(t.TEXTURE_2D_ARRAY,P,E,b[0].width,b[0].height,m.depth);for(let e=0,i=b.length;e<i;e++)v=b[e],r.format!==D?null!==_?w?n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,0,v.width,v.height,m.depth,_,v.data,0,0):n.compressedTexImage3D(t.TEXTURE_2D_ARRAY,e,E,v.width,v.height,m.depth,0,v.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):w?n.texSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,0,v.width,v.height,m.depth,_,y,v.data):n.texImage3D(t.TEXTURE_2D_ARRAY,e,E,v.width,v.height,m.depth,0,_,y,v.data)}else{w&&A&&n.texStorage2D(t.TEXTURE_2D,P,E,b[0].width,b[0].height);for(let e=0,i=b.length;e<i;e++)v=b[e],r.format!==D?null!==_?w?n.compressedTexSubImage2D(t.TEXTURE_2D,e,0,0,v.width,v.height,_,v.data):n.compressedTexImage2D(t.TEXTURE_2D,e,E,v.width,v.height,0,v.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):w?n.texSubImage2D(t.TEXTURE_2D,e,0,0,v.width,v.height,_,y,v.data):n.texImage2D(t.TEXTURE_2D,e,E,v.width,v.height,0,_,y,v.data)}else if(r.isDataArrayTexture)w?(A&&n.texStorage3D(t.TEXTURE_2D_ARRAY,P,E,m.width,m.height,m.depth),n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,0,m.width,m.height,m.depth,_,y,m.data)):n.texImage3D(t.TEXTURE_2D_ARRAY,0,E,m.width,m.height,m.depth,0,_,y,m.data);else if(r.isData3DTexture)w?(A&&n.texStorage3D(t.TEXTURE_3D,P,E,m.width,m.height,m.depth),n.texSubImage3D(t.TEXTURE_3D,0,0,0,0,m.width,m.height,m.depth,_,y,m.data)):n.texImage3D(t.TEXTURE_3D,0,E,m.width,m.height,m.depth,0,_,y,m.data);else if(r.isFramebufferTexture){if(A)if(w)n.texStorage2D(t.TEXTURE_2D,P,E,m.width,m.height);else{let e=m.width,i=m.height;for(let r=0;r<P;r++)n.texImage2D(t.TEXTURE_2D,r,E,e,i,0,_,y,null),e>>=1,i>>=1}}else if(b.length>0&&g){w&&A&&n.texStorage2D(t.TEXTURE_2D,P,E,b[0].width,b[0].height);for(let e=0,i=b.length;e<i;e++)v=b[e],w?n.texSubImage2D(t.TEXTURE_2D,e,0,0,_,y,v):n.texImage2D(t.TEXTURE_2D,e,E,_,y,v);r.generateMipmaps=!1}else w?(A&&n.texStorage2D(t.TEXTURE_2D,P,E,m.width,m.height),n.texSubImage2D(t.TEXTURE_2D,0,0,0,_,y,m)):n.texImage2D(t.TEXTURE_2D,0,E,_,y,m);F(r,g)&&z(l),d.__version=u.version,r.onUpdate&&r.onUpdate(r)}e.__version=r.version}function rt(e,r,s,o,l,c){const h=a.convert(s.format,s.colorSpace),u=a.convert(s.type),p=B(s.internalFormat,h,u,s.colorSpace);if(!i.get(r).__hasExternalTextures){const e=Math.max(1,r.width>>c),i=Math.max(1,r.height>>c);l===t.TEXTURE_3D||l===t.TEXTURE_2D_ARRAY?n.texImage3D(l,c,p,e,i,r.depth,0,h,u,null):n.texImage2D(l,c,p,e,i,0,h,u,null)}n.bindFramebuffer(t.FRAMEBUFFER,e),lt(r)?d.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,o,l,i.get(s).__webglTexture,0,ot(r)):(l===t.TEXTURE_2D||l>=t.TEXTURE_CUBE_MAP_POSITIVE_X&&l<=t.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&t.framebufferTexture2D(t.FRAMEBUFFER,o,l,i.get(s).__webglTexture,c),n.bindFramebuffer(t.FRAMEBUFFER,null)}function at(e,n,i){if(t.bindRenderbuffer(t.RENDERBUFFER,e),n.depthBuffer&&!n.stencilBuffer){let r=!0===o?t.DEPTH_COMPONENT24:t.DEPTH_COMPONENT16;if(i||lt(n)){const e=n.depthTexture;e&&e.isDepthTexture&&(e.type===L?r=t.DEPTH_COMPONENT32F:e.type===C&&(r=t.DEPTH_COMPONENT24));const i=ot(n);lt(n)?d.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,i,r,n.width,n.height):t.renderbufferStorageMultisample(t.RENDERBUFFER,i,r,n.width,n.height)}else t.renderbufferStorage(t.RENDERBUFFER,r,n.width,n.height);t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,e)}else if(n.depthBuffer&&n.stencilBuffer){const r=ot(n);i&&!1===lt(n)?t.renderbufferStorageMultisample(t.RENDERBUFFER,r,t.DEPTH24_STENCIL8,n.width,n.height):lt(n)?d.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,r,t.DEPTH24_STENCIL8,n.width,n.height):t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_STENCIL,n.width,n.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,e)}else{const e=!0===n.isWebGLMultipleRenderTargets?n.texture:[n.texture];for(let r=0;r<e.length;r++){const s=e[r],o=a.convert(s.format,s.colorSpace),l=a.convert(s.type),c=B(s.internalFormat,o,l,s.colorSpace),h=ot(n);i&&!1===lt(n)?t.renderbufferStorageMultisample(t.RENDERBUFFER,h,c,n.width,n.height):lt(n)?d.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,h,c,n.width,n.height):t.renderbufferStorage(t.RENDERBUFFER,c,n.width,n.height)}}t.bindRenderbuffer(t.RENDERBUFFER,null)}function st(e){const r=i.get(e),a=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(t.FRAMEBUFFER,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),q(r.depthTexture,0);const a=i.get(r.depthTexture).__webglTexture,s=ot(r);if(r.depthTexture.format===I)lt(r)?d.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,a,0,s):t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,a,0);else{if(r.depthTexture.format!==N)throw new Error("Unknown depthTexture format");lt(r)?d.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,a,0,s):t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,a,0)}}(r.__webglFramebuffer,e)}else if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=t.createRenderbuffer(),at(r.__webglDepthbuffer[i],e,!1)}else n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),at(r.__webglDepthbuffer,e,!1);n.bindFramebuffer(t.FRAMEBUFFER,null)}function ot(t){return Math.min(u,t.samples)}function lt(t){const n=i.get(t);return o&&t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function ct(t,n){const i=t.colorSpace,r=t.format,a=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||t.format===nt||i!==Y&&i!==X&&(Ct.getTransfer(i)===Z?!1===o?!0===e.has("EXT_sRGB")&&r===D?(t.format=nt,t.minFilter=T,t.generateMipmaps=!1):n=Dt.sRGBToLinear(n):r===D&&a===A||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",i)),n}this.allocateTextureUnit=function(){const t=j;return t>=l&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+l),j+=1,t},this.resetTextureUnits=function(){j=0},this.setTexture2D=q,this.setTexture2DArray=function(e,r){const a=i.get(e);e.version>0&&a.__version!==e.version?it(a,e,r):n.bindTexture(t.TEXTURE_2D_ARRAY,a.__webglTexture,t.TEXTURE0+r)},this.setTexture3D=function(e,r){const a=i.get(e);e.version>0&&a.__version!==e.version?it(a,e,r):n.bindTexture(t.TEXTURE_3D,a.__webglTexture,t.TEXTURE0+r)},this.setTextureCube=function(e,r){const s=i.get(e);e.version>0&&s.__version!==e.version?function(e,r,s){if(6!==r.image.length)return;const l=et(e,r),h=r.source;n.bindTexture(t.TEXTURE_CUBE_MAP,e.__webglTexture,t.TEXTURE0+s);const u=i.get(h);if(h.version!==u.__version||!0===l){n.activeTexture(t.TEXTURE0+s);const e=Ct.getPrimaries(Ct.workingColorSpace),i=r.colorSpace===X?null:Ct.getPrimaries(r.colorSpace),d=r.colorSpace===X||e===i?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,r.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,r.unpackAlignment),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,d);const p=r.isCompressedTexture||r.image[0].isCompressedTexture,f=r.image[0]&&r.image[0].isDataTexture,m=[];for(let t=0;t<6;t++)m[t]=p||f?f?r.image[t].image:r.image[t]:x(r.image[t],!1,!0,c),m[t]=ct(r,m[t]);const g=m[0],_=O(g)||o,v=a.convert(r.format,r.colorSpace),y=a.convert(r.type),M=B(r.internalFormat,v,y,r.colorSpace),E=o&&!0!==r.isVideoTexture,S=void 0===u.__version||!0===l;let b,T=H(r,g,_);if(tt(t.TEXTURE_CUBE_MAP,r,_),p){E&&S&&n.texStorage2D(t.TEXTURE_CUBE_MAP,T,M,g.width,g.height);for(let e=0;e<6;e++){b=m[e].mipmaps;for(let i=0;i<b.length;i++){const a=b[i];r.format!==D?null!==v?E?n.compressedTexSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,0,0,a.width,a.height,v,a.data):n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,M,a.width,a.height,0,a.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):E?n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,0,0,a.width,a.height,v,y,a.data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,M,a.width,a.height,0,v,y,a.data)}}}else{b=r.mipmaps,E&&S&&(b.length>0&&T++,n.texStorage2D(t.TEXTURE_CUBE_MAP,T,M,m[0].width,m[0].height));for(let e=0;e<6;e++)if(f){E?n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,m[e].width,m[e].height,v,y,m[e].data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,M,m[e].width,m[e].height,0,v,y,m[e].data);for(let i=0;i<b.length;i++){const r=b[i].image[e].image;E?n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,0,0,r.width,r.height,v,y,r.data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,M,r.width,r.height,0,v,y,r.data)}}else{E?n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,v,y,m[e]):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,M,v,y,m[e]);for(let i=0;i<b.length;i++){const r=b[i];E?n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,0,0,v,y,r.image[e]):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,M,v,y,r.image[e])}}}F(r,_)&&z(t.TEXTURE_CUBE_MAP),u.__version=h.version,r.onUpdate&&r.onUpdate(r)}e.__version=r.version}(s,e,r):n.bindTexture(t.TEXTURE_CUBE_MAP,s.__webglTexture,t.TEXTURE0+r)},this.rebindTextures=function(e,n,r){const a=i.get(e);void 0!==n&&rt(a.__webglFramebuffer,e,e.texture,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,0),void 0!==r&&st(e)},this.setupRenderTarget=function(e){const l=e.texture,c=i.get(e),h=i.get(l);e.addEventListener("dispose",k),!0!==e.isWebGLMultipleRenderTargets&&(void 0===h.__webglTexture&&(h.__webglTexture=t.createTexture()),h.__version=l.version,s.memory.textures++);const u=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=O(e)||o;if(u){c.__webglFramebuffer=[];for(let e=0;e<6;e++)if(o&&l.mipmaps&&l.mipmaps.length>0){c.__webglFramebuffer[e]=[];for(let n=0;n<l.mipmaps.length;n++)c.__webglFramebuffer[e][n]=t.createFramebuffer()}else c.__webglFramebuffer[e]=t.createFramebuffer()}else{if(o&&l.mipmaps&&l.mipmaps.length>0){c.__webglFramebuffer=[];for(let e=0;e<l.mipmaps.length;e++)c.__webglFramebuffer[e]=t.createFramebuffer()}else c.__webglFramebuffer=t.createFramebuffer();if(d)if(r.drawBuffers){const n=e.texture;for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),s.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(o&&e.samples>0&&!1===lt(e)){const i=d?l:[l];c.__webglMultisampledFramebuffer=t.createFramebuffer(),c.__webglColorRenderbuffer=[],n.bindFramebuffer(t.FRAMEBUFFER,c.__webglMultisampledFramebuffer);for(let n=0;n<i.length;n++){const r=i[n];c.__webglColorRenderbuffer[n]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,c.__webglColorRenderbuffer[n]);const s=a.convert(r.format,r.colorSpace),o=a.convert(r.type),l=B(r.internalFormat,s,o,r.colorSpace,!0===e.isXRRenderTarget),h=ot(e);t.renderbufferStorageMultisample(t.RENDERBUFFER,h,l,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+n,t.RENDERBUFFER,c.__webglColorRenderbuffer[n])}t.bindRenderbuffer(t.RENDERBUFFER,null),e.depthBuffer&&(c.__webglDepthRenderbuffer=t.createRenderbuffer(),at(c.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(t.FRAMEBUFFER,null)}}if(u){n.bindTexture(t.TEXTURE_CUBE_MAP,h.__webglTexture),tt(t.TEXTURE_CUBE_MAP,l,p);for(let n=0;n<6;n++)if(o&&l.mipmaps&&l.mipmaps.length>0)for(let i=0;i<l.mipmaps.length;i++)rt(c.__webglFramebuffer[n][i],e,l,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,i);else rt(c.__webglFramebuffer[n],e,l,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);F(l,p)&&z(t.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(d){const r=e.texture;for(let a=0,s=r.length;a<s;a++){const s=r[a],o=i.get(s);n.bindTexture(t.TEXTURE_2D,o.__webglTexture),tt(t.TEXTURE_2D,s,p),rt(c.__webglFramebuffer,e,s,t.COLOR_ATTACHMENT0+a,t.TEXTURE_2D,0),F(s,p)&&z(t.TEXTURE_2D)}n.unbindTexture()}else{let i=t.TEXTURE_2D;if((e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(o?i=e.isWebGL3DRenderTarget?t.TEXTURE_3D:t.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(i,h.__webglTexture),tt(i,l,p),o&&l.mipmaps&&l.mipmaps.length>0)for(let n=0;n<l.mipmaps.length;n++)rt(c.__webglFramebuffer[n],e,l,t.COLOR_ATTACHMENT0,i,n);else rt(c.__webglFramebuffer,e,l,t.COLOR_ATTACHMENT0,i,0);F(l,p)&&z(i),n.unbindTexture()}e.depthBuffer&&st(e)},this.updateRenderTargetMipmap=function(e){const r=O(e)||o,a=!0===e.isWebGLMultipleRenderTargets?e.texture:[e.texture];for(let s=0,o=a.length;s<o;s++){const o=a[s];if(F(o,r)){const r=e.isWebGLCubeRenderTarget?t.TEXTURE_CUBE_MAP:t.TEXTURE_2D,a=i.get(o).__webglTexture;n.bindTexture(r,a),z(r),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(o&&e.samples>0&&!1===lt(e)){const r=e.isWebGLMultipleRenderTargets?e.texture:[e.texture],a=e.width,s=e.height;let o=t.COLOR_BUFFER_BIT;const l=[],c=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,h=i.get(e),u=!0===e.isWebGLMultipleRenderTargets;if(u)for(let e=0;e<r.length;e++)n.bindFramebuffer(t.FRAMEBUFFER,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,null),n.bindFramebuffer(t.FRAMEBUFFER,h.__webglFramebuffer),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,null,0);n.bindFramebuffer(t.READ_FRAMEBUFFER,h.__webglMultisampledFramebuffer),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,h.__webglFramebuffer);for(let n=0;n<r.length;n++){l.push(t.COLOR_ATTACHMENT0+n),e.depthBuffer&&l.push(c);const d=void 0!==h.__ignoreDepthValues&&h.__ignoreDepthValues;if(!1===d&&(e.depthBuffer&&(o|=t.DEPTH_BUFFER_BIT),e.stencilBuffer&&(o|=t.STENCIL_BUFFER_BIT)),u&&t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,h.__webglColorRenderbuffer[n]),!0===d&&(t.invalidateFramebuffer(t.READ_FRAMEBUFFER,[c]),t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,[c])),u){const e=i.get(r[n]).__webglTexture;t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}t.blitFramebuffer(0,0,a,s,0,0,a,s,o,t.NEAREST),p&&t.invalidateFramebuffer(t.READ_FRAMEBUFFER,l)}if(n.bindFramebuffer(t.READ_FRAMEBUFFER,null),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),u)for(let e=0;e<r.length;e++){n.bindFramebuffer(t.FRAMEBUFFER,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,h.__webglColorRenderbuffer[e]);const a=i.get(r[e]).__webglTexture;n.bindFramebuffer(t.FRAMEBUFFER,h.__webglFramebuffer),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,a,0)}n.bindFramebuffer(t.DRAW_FRAMEBUFFER,h.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=st,this.setupFrameBufferTexture=rt,this.useMultisampledRTT=lt}function Ha(t,e,n){const i=n.isWebGL2;return{convert:function(n,r=""){let a;const s=Ct.getTransfer(r);if(n===A)return t.UNSIGNED_BYTE;if(1017===n)return t.UNSIGNED_SHORT_4_4_4_4;if(1018===n)return t.UNSIGNED_SHORT_5_5_5_1;if(1010===n)return t.BYTE;if(1011===n)return t.SHORT;if(n===R)return t.UNSIGNED_SHORT;if(1013===n)return t.INT;if(n===C)return t.UNSIGNED_INT;if(n===L)return t.FLOAT;if(n===P)return i?t.HALF_FLOAT:(a=e.get("OES_texture_half_float"),null!==a?a.HALF_FLOAT_OES:null);if(1021===n)return t.ALPHA;if(n===D)return t.RGBA;if(1024===n)return t.LUMINANCE;if(1025===n)return t.LUMINANCE_ALPHA;if(n===I)return t.DEPTH_COMPONENT;if(n===N)return t.DEPTH_STENCIL;if(n===nt)return a=e.get("EXT_sRGB"),null!==a?a.SRGB_ALPHA_EXT:null;if(1028===n)return t.RED;if(1029===n)return t.RED_INTEGER;if(1030===n)return t.RG;if(1031===n)return t.RG_INTEGER;if(1033===n)return t.RGBA_INTEGER;if(n===O||n===F||n===z||n===B)if(s===Z){if(a=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===a)return null;if(n===O)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===F)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===z)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===B)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(a=e.get("WEBGL_compressed_texture_s3tc"),null===a)return null;if(n===O)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===F)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===z)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===B)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===n||35841===n||35842===n||35843===n){if(a=e.get("WEBGL_compressed_texture_pvrtc"),null===a)return null;if(35840===n)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===n)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===n)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===n)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===n)return a=e.get("WEBGL_compressed_texture_etc1"),null!==a?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===n||37496===n){if(a=e.get("WEBGL_compressed_texture_etc"),null===a)return null;if(37492===n)return s===Z?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(37496===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}if(37808===n||37809===n||37810===n||37811===n||37812===n||37813===n||37814===n||37815===n||37816===n||37817===n||37818===n||37819===n||37820===n||37821===n){if(a=e.get("WEBGL_compressed_texture_astc"),null===a)return null;if(37808===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===n)return s===Z?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===H||36494===n||36495===n){if(a=e.get("EXT_texture_compression_bptc"),null===a)return null;if(n===H)return s===Z?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(36494===n)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(36495===n)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(36283===n||36284===n||36285===n||36286===n){if(a=e.get("EXT_texture_compression_rgtc"),null===a)return null;if(n===H)return a.COMPRESSED_RED_RGTC1_EXT;if(36284===n)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(36285===n)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(36286===n)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===U?i?t.UNSIGNED_INT_24_8:(a=e.get("WEBGL_depth_texture"),null!==a?a.UNSIGNED_INT_24_8_WEBGL:null):void 0!==t[n]?t[n]:null}}}class Va extends ei{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class Ga extends je{constructor(){super(),this.isGroup=!0,this.type="Group"}}const ka={type:"move"};class Wa{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new Ga,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Ga,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Xt,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Xt),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Ga,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Xt,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Xt),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,a=null;const s=this._targetRay,o=this._grip,l=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState){if(l&&t.hand){a=!0;for(const i of t.hand.values()){const t=e.getJointPose(i,n),r=this._getHandJoint(l,i);null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.matrixWorldNeedsUpdate=!0,r.jointRadius=t.radius),r.visible=null!==t}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],s=i.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&s>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!l.inputState.pinching&&s<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));null!==s&&(i=e.getPose(t.targetRaySpace,n),null===i&&null!==r&&(i=r),null!==i&&(s.matrix.fromArray(i.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.matrixWorldNeedsUpdate=!0,i.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(i.linearVelocity)):s.hasLinearVelocity=!1,i.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(i.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(ka)))}return null!==s&&(s.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==a),this}_getHandJoint(t,e){if(void 0===t.joints[e.jointName]){const n=new Ga;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}class Xa extends at{constructor(t,e){super();const n=this;let i=null,r=1,a=null,s="local-floor",o=1,l=null,c=null,h=null,u=null,d=null,p=null;const f=e.getContextAttributes();let m=null,g=null;const _=[],v=[],x=new _t;let y=null;const M=new ei;M.layers.enable(1),M.viewport=new Bt;const E=new ei;E.layers.enable(2),E.viewport=new Bt;const S=[M,E],b=new Va;b.layers.enable(1),b.layers.enable(2);let T=null,w=null;function R(t){const e=v.indexOf(t.inputSource);if(-1===e)return;const n=_[e];void 0!==n&&(n.update(t.inputSource,t.frame,l||a),n.dispatchEvent({type:t.type,data:t.inputSource}))}function L(){i.removeEventListener("select",R),i.removeEventListener("selectstart",R),i.removeEventListener("selectend",R),i.removeEventListener("squeeze",R),i.removeEventListener("squeezestart",R),i.removeEventListener("squeezeend",R),i.removeEventListener("end",L),i.removeEventListener("inputsourceschange",P);for(let t=0;t<_.length;t++){const e=v[t];null!==e&&(v[t]=null,_[t].disconnect(e))}T=null,w=null,t.setRenderTarget(m),d=null,u=null,h=null,i=null,g=null,H.stop(),n.isPresenting=!1,t.setPixelRatio(y),t.setSize(x.width,x.height,!1),n.dispatchEvent({type:"sessionend"})}function P(t){for(let e=0;e<t.removed.length;e++){const n=t.removed[e],i=v.indexOf(n);i>=0&&(v[i]=null,_[i].disconnect(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e];let i=v.indexOf(n);if(-1===i){for(let t=0;t<_.length;t++){if(t>=v.length){v.push(n),i=t;break}if(null===v[t]){v[t]=n,i=t;break}}if(-1===i)break}const r=_[i];r&&r.connect(n)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=_[t];return void 0===e&&(e=new Wa,_[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=_[t];return void 0===e&&(e=new Wa,_[t]=e),e.getGripSpace()},this.getHand=function(t){let e=_[t];return void 0===e&&(e=new Wa,_[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){s=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||a},this.setReferenceSpace=function(t){l=t},this.getBaseLayer=function(){return null!==u?u:d},this.getBinding=function(){return h},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=async function(c){if(i=c,null!==i){if(m=t.getRenderTarget(),i.addEventListener("select",R),i.addEventListener("selectstart",R),i.addEventListener("selectend",R),i.addEventListener("squeeze",R),i.addEventListener("squeezestart",R),i.addEventListener("squeezeend",R),i.addEventListener("end",L),i.addEventListener("inputsourceschange",P),!0!==f.xrCompatible&&await e.makeXRCompatible(),y=t.getPixelRatio(),t.getSize(x),void 0===i.renderState.layers||!1===t.capabilities.isWebGL2){const n={antialias:void 0!==i.renderState.layers||f.antialias,alpha:!0,depth:f.depth,stencil:f.stencil,framebufferScaleFactor:r};d=new XRWebGLLayer(i,e,n),i.updateRenderState({baseLayer:d}),t.setPixelRatio(1),t.setSize(d.framebufferWidth,d.framebufferHeight,!1),g=new Vt(d.framebufferWidth,d.framebufferHeight,{format:D,type:A,colorSpace:t.outputColorSpace,stencilBuffer:f.stencil})}else{let n=null,a=null,s=null;f.depth&&(s=f.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,n=f.stencil?N:I,a=f.stencil?U:C);const o={colorFormat:e.RGBA8,depthFormat:s,scaleFactor:r};h=new XRWebGLBinding(i,e),u=h.createProjectionLayer(o),i.updateRenderState({layers:[u]}),t.setPixelRatio(1),t.setSize(u.textureWidth,u.textureHeight,!1),g=new Vt(u.textureWidth,u.textureHeight,{format:D,type:A,depthTexture:new Ki(u.textureWidth,u.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:f.stencil,colorSpace:t.outputColorSpace,samples:f.antialias?4:0}),t.properties.get(g).__ignoreDepthValues=u.ignoreDepthValues}g.isXRRenderTarget=!0,this.setFoveation(o),l=null,a=await i.requestReferenceSpace(s),H.setContext(i),H.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==i)return i.environmentBlendMode};const O=new Xt,F=new Xt;function z(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===i)return;b.near=E.near=M.near=t.near,b.far=E.far=M.far=t.far,T===b.near&&w===b.far||(i.updateRenderState({depthNear:b.near,depthFar:b.far}),T=b.near,w=b.far);const e=t.parent,n=b.cameras;z(b,e);for(let t=0;t<n.length;t++)z(n[t],e);2===n.length?function(t,e,n){O.setFromMatrixPosition(e.matrixWorld),F.setFromMatrixPosition(n.matrixWorld);const i=O.distanceTo(F),r=e.projectionMatrix.elements,a=n.projectionMatrix.elements,s=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(a[8]+1)/a[0],d=s*h,p=s*u,f=i/(-h+u),m=f*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=s+f,_=o+f,v=d-m,x=p+(i-m),y=l*o/_*g,M=c*o/_*g;t.projectionMatrix.makePerspective(v,x,y,M,g,_),t.projectionMatrixInverse.copy(t.projectionMatrix).invert()}(b,M,E):b.projectionMatrix.copy(M.projectionMatrix),function(t,e,n){null===n?t.matrix.copy(e.matrixWorld):(t.matrix.copy(n.matrixWorld),t.matrix.invert(),t.matrix.multiply(e.matrixWorld)),t.matrix.decompose(t.position,t.quaternion,t.scale),t.updateMatrixWorld(!0),t.projectionMatrix.copy(e.projectionMatrix),t.projectionMatrixInverse.copy(e.projectionMatrixInverse),t.isPerspectiveCamera&&(t.fov=2*lt*Math.atan(1/t.projectionMatrix.elements[5]),t.zoom=1)}(t,b,e)},this.getCamera=function(){return b},this.getFoveation=function(){if(null!==u||null!==d)return o},this.setFoveation=function(t){o=t,null!==u&&(u.fixedFoveation=t),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=t)};let B=null;const H=new pi;H.setAnimationLoop((function(e,i){if(c=i.getViewerPose(l||a),p=i,null!==c){const e=c.views;null!==d&&(t.setRenderTargetFramebuffer(g,d.framebuffer),t.setRenderTarget(g));let n=!1;e.length!==b.cameras.length&&(b.cameras.length=0,n=!0);for(let i=0;i<e.length;i++){const r=e[i];let a=null;if(null!==d)a=d.getViewport(r);else{const e=h.getViewSubImage(u,r);a=e.viewport,0===i&&(t.setRenderTargetTextures(g,e.colorTexture,u.ignoreDepthValues?void 0:e.depthStencilTexture),t.setRenderTarget(g))}let s=S[i];void 0===s&&(s=new ei,s.layers.enable(i),s.viewport=new Bt,S[i]=s),s.matrix.fromArray(r.transform.matrix),s.matrix.decompose(s.position,s.quaternion,s.scale),s.projectionMatrix.fromArray(r.projectionMatrix),s.projectionMatrixInverse.copy(s.projectionMatrix).invert(),s.viewport.set(a.x,a.y,a.width,a.height),0===i&&(b.matrix.copy(s.matrix),b.matrix.decompose(b.position,b.quaternion,b.scale)),!0===n&&b.cameras.push(s)}}for(let t=0;t<_.length;t++){const e=v[t],n=_[t];null!==e&&void 0!==n&&n.update(e,i,l||a)}B&&B(e,i),i.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:i}),p=null})),this.setAnimationLoop=function(t){B=t},this.dispose=function(){}}}function ja(t,e){function n(t,e){!0===t.matrixAutoUpdate&&t.updateMatrix(),e.value.copy(t.matrix)}function i(i,r){i.opacity.value=r.opacity,r.color&&i.diffuse.value.copy(r.color),r.emissive&&i.emissive.value.copy(r.emissive).multiplyScalar(r.emissiveIntensity),r.map&&(i.map.value=r.map,n(r.map,i.mapTransform)),r.alphaMap&&(i.alphaMap.value=r.alphaMap,n(r.alphaMap,i.alphaMapTransform)),r.bumpMap&&(i.bumpMap.value=r.bumpMap,n(r.bumpMap,i.bumpMapTransform),i.bumpScale.value=r.bumpScale,1===r.side&&(i.bumpScale.value*=-1)),r.normalMap&&(i.normalMap.value=r.normalMap,n(r.normalMap,i.normalMapTransform),i.normalScale.value.copy(r.normalScale),1===r.side&&i.normalScale.value.negate()),r.displacementMap&&(i.displacementMap.value=r.displacementMap,n(r.displacementMap,i.displacementMapTransform),i.displacementScale.value=r.displacementScale,i.displacementBias.value=r.displacementBias),r.emissiveMap&&(i.emissiveMap.value=r.emissiveMap,n(r.emissiveMap,i.emissiveMapTransform)),r.specularMap&&(i.specularMap.value=r.specularMap,n(r.specularMap,i.specularMapTransform)),r.alphaTest>0&&(i.alphaTest.value=r.alphaTest);const a=e.get(r).envMap;if(a&&(i.envMap.value=a,i.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,i.reflectivity.value=r.reflectivity,i.ior.value=r.ior,i.refractionRatio.value=r.refractionRatio),r.lightMap){i.lightMap.value=r.lightMap;const e=!0===t._useLegacyLights?Math.PI:1;i.lightMapIntensity.value=r.lightMapIntensity*e,n(r.lightMap,i.lightMapTransform)}r.aoMap&&(i.aoMap.value=r.aoMap,i.aoMapIntensity.value=r.aoMapIntensity,n(r.aoMap,i.aoMapTransform))}return{refreshFogUniforms:function(e,n){n.color.getRGB(e.fogColor.value,Zn(t)),n.isFog?(e.fogNear.value=n.near,e.fogFar.value=n.far):n.isFogExp2&&(e.fogDensity.value=n.density)},refreshMaterialUniforms:function(t,r,a,s,o){r.isMeshBasicMaterial||r.isMeshLambertMaterial?i(t,r):r.isMeshToonMaterial?(i(t,r),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(t,r)):r.isMeshPhongMaterial?(i(t,r),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4)}(t,r)):r.isMeshStandardMaterial?(i(t,r),function(t,i){t.metalness.value=i.metalness,i.metalnessMap&&(t.metalnessMap.value=i.metalnessMap,n(i.metalnessMap,t.metalnessMapTransform)),t.roughness.value=i.roughness,i.roughnessMap&&(t.roughnessMap.value=i.roughnessMap,n(i.roughnessMap,t.roughnessMapTransform));e.get(i).envMap&&(t.envMapIntensity.value=i.envMapIntensity)}(t,r),r.isMeshPhysicalMaterial&&function(t,e,i){t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap,n(e.sheenColorMap,t.sheenColorMapTransform)),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap,n(e.sheenRoughnessMap,t.sheenRoughnessMapTransform))),e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap,n(e.clearcoatMap,t.clearcoatMapTransform)),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap,n(e.clearcoatRoughnessMap,t.clearcoatRoughnessMapTransform)),e.clearcoatNormalMap&&(t.clearcoatNormalMap.value=e.clearcoatNormalMap,n(e.clearcoatNormalMap,t.clearcoatNormalMapTransform),t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),1===e.side&&t.clearcoatNormalScale.value.negate())),e.iridescence>0&&(t.iridescence.value=e.iridescence,t.iridescenceIOR.value=e.iridescenceIOR,t.iridescenceThicknessMinimum.value=e.iridescenceThicknessRange[0],t.iridescenceThicknessMaximum.value=e.iridescenceThicknessRange[1],e.iridescenceMap&&(t.iridescenceMap.value=e.iridescenceMap,n(e.iridescenceMap,t.iridescenceMapTransform)),e.iridescenceThicknessMap&&(t.iridescenceThicknessMap.value=e.iridescenceThicknessMap,n(e.iridescenceThicknessMap,t.iridescenceThicknessMapTransform))),e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap,n(e.transmissionMap,t.transmissionMapTransform)),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap,n(e.thicknessMap,t.thicknessMapTransform)),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor)),e.anisotropy>0&&(t.anisotropyVector.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation)),e.anisotropyMap&&(t.anisotropyMap.value=e.anisotropyMap,n(e.anisotropyMap,t.anisotropyMapTransform))),t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap,n(e.specularColorMap,t.specularColorMapTransform)),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap,n(e.specularIntensityMap,t.specularIntensityMapTransform))}(t,r,o)):r.isMeshMatcapMaterial?(i(t,r),function(t,e){e.matcap&&(t.matcap.value=e.matcap)}(t,r)):r.isMeshDepthMaterial?i(t,r):r.isMeshDistanceMaterial?(i(t,r),function(t,n){const i=e.get(n).light;t.referencePosition.value.setFromMatrixPosition(i.matrixWorld),t.nearDistance.value=i.shadow.camera.near,t.farDistance.value=i.shadow.camera.far}(t,r)):r.isMeshNormalMaterial?i(t,r):r.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,e.map&&(t.map.value=e.map,n(e.map,t.mapTransform))}(t,r),r.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,r)):r.isPointsMaterial?function(t,e,i,r){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*i,t.scale.value=.5*r,e.map&&(t.map.value=e.map,n(e.map,t.uvTransform)),e.alphaMap&&(t.alphaMap.value=e.alphaMap,n(e.alphaMap,t.alphaMapTransform)),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest)}(t,r,a,s):r.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map,n(e.map,t.mapTransform)),e.alphaMap&&(t.alphaMap.value=e.alphaMap,n(e.alphaMap,t.alphaMapTransform)),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest)}(t,r):r.isShadowMaterial?(t.color.value.copy(r.color),t.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1)}}}function Ya(t,e,n,i){let r={},a={},s=[];const o=n.isWebGL2?t.getParameter(t.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(t,e,n){const i=t.value;if(void 0===n[e]){if("number"==typeof i)n[e]=i;else{const t=Array.isArray(i)?i:[i],r=[];for(let e=0;e<t.length;e++)r.push(t[e].clone());n[e]=r}return!0}if("number"==typeof i){if(n[e]!==i)return n[e]=i,!0}else{const t=Array.isArray(n[e])?n[e]:[n[e]],r=Array.isArray(i)?i:[i];for(let e=0;e<t.length;e++){const n=t[e];if(!1===n.equals(r[e]))return n.copy(r[e]),!0}}return!1}function c(t){const e={boundary:0,storage:0};return"number"==typeof t?(e.boundary=4,e.storage=4):t.isVector2?(e.boundary=8,e.storage=8):t.isVector3||t.isColor?(e.boundary=16,e.storage=12):t.isVector4?(e.boundary=16,e.storage=16):t.isMatrix3?(e.boundary=48,e.storage=48):t.isMatrix4?(e.boundary=64,e.storage=64):t.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",t),e}function h(e){const n=e.target;n.removeEventListener("dispose",h);const i=s.indexOf(n.__bindingPointIndex);s.splice(i,1),t.deleteBuffer(r[n.id]),delete r[n.id],delete a[n.id]}return{bind:function(t,e){const n=e.program;i.uniformBlockBinding(t,n)},update:function(n,u){let d=r[n.id];void 0===d&&(function(t){const e=t.uniforms;let n=0;let i=0;for(let t=0,r=e.length;t<r;t++){const r=e[t],a={boundary:0,storage:0},s=Array.isArray(r.value)?r.value:[r.value];for(let t=0,e=s.length;t<e;t++){const e=c(s[t]);a.boundary+=e.boundary,a.storage+=e.storage}r.__data=new Float32Array(a.storage/Float32Array.BYTES_PER_ELEMENT),r.__offset=n,t>0&&(i=n%16,0!==i&&16-i-a.boundary<0&&(n+=16-i,r.__offset=n)),n+=a.storage}i=n%16,i>0&&(n+=16-i),t.__size=n,t.__cache={}}(n),d=function(e){const n=function(){for(let t=0;t<o;t++)if(-1===s.indexOf(t))return s.push(t),t;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();e.__bindingPointIndex=n;const i=t.createBuffer(),r=e.__size,a=e.usage;return t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,r,a),t.bindBuffer(t.UNIFORM_BUFFER,null),t.bindBufferBase(t.UNIFORM_BUFFER,n,i),i}(n),r[n.id]=d,n.addEventListener("dispose",h));const p=u.program;i.updateUBOMapping(n,p);const f=e.render.frame;a[n.id]!==f&&(function(e){const n=r[e.id],i=e.uniforms,a=e.__cache;t.bindBuffer(t.UNIFORM_BUFFER,n);for(let e=0,n=i.length;e<n;e++){const n=i[e];if(!0===l(n,e,a)){const e=n.__offset,i=Array.isArray(n.value)?n.value:[n.value];let r=0;for(let a=0;a<i.length;a++){const s=i[a],o=c(s);"number"==typeof s?(n.__data[0]=s,t.bufferSubData(t.UNIFORM_BUFFER,e+r,n.__data)):s.isMatrix3?(n.__data[0]=s.elements[0],n.__data[1]=s.elements[1],n.__data[2]=s.elements[2],n.__data[3]=s.elements[0],n.__data[4]=s.elements[3],n.__data[5]=s.elements[4],n.__data[6]=s.elements[5],n.__data[7]=s.elements[0],n.__data[8]=s.elements[6],n.__data[9]=s.elements[7],n.__data[10]=s.elements[8],n.__data[11]=s.elements[0]):(s.toArray(n.__data,r),r+=o.storage/Float32Array.BYTES_PER_ELEMENT)}t.bufferSubData(t.UNIFORM_BUFFER,e,n.__data)}}t.bindBuffer(t.UNIFORM_BUFFER,null)}(n),a[n.id]=f)},dispose:function(){for(const e in r)t.deleteBuffer(r[e]);s=[],r={},a={}}}}class qa{constructor(t={}){const{canvas:e=Et(),context:n=null,depth:r=!0,stencil:a=!0,alpha:s=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:d=!1}=t;let p;this.isWebGLRenderer=!0,p=null!==n?n.getContextAttributes().alpha:s;const f=new Uint32Array(4),m=new Int32Array(4);let g=null,_=null;const v=[],x=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=j,this._useLegacyLights=!1,this.toneMapping=u,this.toneMappingExposure=1;const y=this;let M=!1,E=0,S=0,b=null,T=-1,I=null;const N=new Bt,O=new Bt;let F=null;const z=new hn(0);let B=0,H=e.width,V=e.height,G=1,k=null,W=null;const X=new Bt(0,0,H,V),q=new Bt(0,0,H,V);let $=!1;const K=new di;let Z=!1,J=!1,Q=null;const tt=new Me,et=new _t,nt=new Xt,it={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function rt(){return null===b?G:1}let at,st,ot,lt,ct,ht,ut,dt,ft,mt,gt,vt,xt,yt,Mt,St,bt,Tt,wt,At,Rt,Ct,Lt,Pt,Ut=n;function Dt(t,n){for(let i=0;i<t.length;i++){const r=t[i],a=e.getContext(r,n);if(null!==a)return a}return null}try{const t={alpha:!0,depth:r,stencil:a,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:d};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${i}`),e.addEventListener("webglcontextlost",Ot,!1),e.addEventListener("webglcontextrestored",Ft,!1),e.addEventListener("webglcontextcreationerror",zt,!1),null===Ut){const e=["webgl2","webgl","experimental-webgl"];if(!0===y.isWebGL1Renderer&&e.shift(),Ut=Dt(e,t),null===Ut)throw Dt(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}"undefined"!=typeof WebGLRenderingContext&&Ut instanceof WebGLRenderingContext&&console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."),void 0===Ut.getShaderPrecisionFormat&&(Ut.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function It(){at=new Gi(Ut),st=new Si(Ut,at,t),at.init(st),Ct=new Ha(Ut,at,st),ot=new za(Ut,at,st),lt=new Xi(Ut),ct=new ba,ht=new Ba(Ut,at,ot,ct,st,Ct,lt),ut=new Ti(y),dt=new Vi(y),ft=new fi(Ut,st),Lt=new Mi(Ut,at,ft,st),mt=new ki(Ut,ft,lt,Lt),gt=new $i(Ut,mt,ft,lt),wt=new qi(Ut,st,ht),St=new bi(ct),vt=new Sa(y,ut,dt,at,st,Lt,St),xt=new ja(y,ct),yt=new Ra,Mt=new Ia(at,st),Tt=new yi(y,ut,dt,ot,gt,p,l),bt=new Fa(y,gt,st),Pt=new Ya(Ut,lt,st,ot),At=new Ei(Ut,at,lt,st),Rt=new Wi(Ut,at,lt,st),lt.programs=vt.programs,y.capabilities=st,y.extensions=at,y.properties=ct,y.renderLists=yt,y.shadowMap=bt,y.state=ot,y.info=lt}It();const Nt=new Xa(y,Ut);function Ot(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),M=!0}function Ft(){console.log("THREE.WebGLRenderer: Context Restored."),M=!1;const t=lt.autoReset,e=bt.enabled,n=bt.autoUpdate,i=bt.needsUpdate,r=bt.type;It(),lt.autoReset=t,bt.enabled=e,bt.autoUpdate=n,bt.needsUpdate=i,bt.type=r}function zt(t){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",t.statusMessage)}function Ht(t){const e=t.target;e.removeEventListener("dispose",Ht),function(t){(function(t){const e=ct.get(t).programs;void 0!==e&&(e.forEach((function(t){vt.releaseProgram(t)})),t.isShaderMaterial&&vt.releaseShaderCache(t))})(t),ct.remove(t)}(e)}function Gt(t,e,n){!0===t.transparent&&2===t.side&&!1===t.forceSinglePass?(t.side=1,t.needsUpdate=!0,Jt(t,e,n),t.side=0,t.needsUpdate=!0,Jt(t,e,n),t.side=2):Jt(t,e,n)}this.xr=Nt,this.getContext=function(){return Ut},this.getContextAttributes=function(){return Ut.getContextAttributes()},this.forceContextLoss=function(){const t=at.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=at.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return G},this.setPixelRatio=function(t){void 0!==t&&(G=t,this.setSize(H,V,!1))},this.getSize=function(t){return t.set(H,V)},this.setSize=function(t,n,i=!0){Nt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(H=t,V=n,e.width=Math.floor(t*G),e.height=Math.floor(n*G),!0===i&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return t.set(H*G,V*G).floor()},this.setDrawingBufferSize=function(t,n,i){H=t,V=n,G=i,e.width=Math.floor(t*i),e.height=Math.floor(n*i),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return t.copy(N)},this.getViewport=function(t){return t.copy(X)},this.setViewport=function(t,e,n,i){t.isVector4?X.set(t.x,t.y,t.z,t.w):X.set(t,e,n,i),ot.viewport(N.copy(X).multiplyScalar(G).floor())},this.getScissor=function(t){return t.copy(q)},this.setScissor=function(t,e,n,i){t.isVector4?q.set(t.x,t.y,t.z,t.w):q.set(t,e,n,i),ot.scissor(O.copy(q).multiplyScalar(G).floor())},this.getScissorTest=function(){return $},this.setScissorTest=function(t){ot.setScissorTest($=t)},this.setOpaqueSort=function(t){k=t},this.setTransparentSort=function(t){W=t},this.getClearColor=function(t){return t.copy(Tt.getClearColor())},this.setClearColor=function(){Tt.setClearColor.apply(Tt,arguments)},this.getClearAlpha=function(){return Tt.getClearAlpha()},this.setClearAlpha=function(){Tt.setClearAlpha.apply(Tt,arguments)},this.clear=function(t=!0,e=!0,n=!0){let i=0;if(t){let t=!1;if(null!==b){const e=b.texture.format;t=1033===e||1031===e||1029===e}if(t){const t=b.texture.type,e=t===A||t===C||t===R||t===U||1017===t||1018===t,n=Tt.getClearColor(),i=Tt.getClearAlpha(),r=n.r,a=n.g,s=n.b;e?(f[0]=r,f[1]=a,f[2]=s,f[3]=i,Ut.clearBufferuiv(Ut.COLOR,0,f)):(m[0]=r,m[1]=a,m[2]=s,m[3]=i,Ut.clearBufferiv(Ut.COLOR,0,m))}else i|=Ut.COLOR_BUFFER_BIT}e&&(i|=Ut.DEPTH_BUFFER_BIT),n&&(i|=Ut.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Ut.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Ot,!1),e.removeEventListener("webglcontextrestored",Ft,!1),e.removeEventListener("webglcontextcreationerror",zt,!1),yt.dispose(),Mt.dispose(),ct.dispose(),ut.dispose(),dt.dispose(),gt.dispose(),Lt.dispose(),Pt.dispose(),vt.dispose(),Nt.dispose(),Nt.removeEventListener("sessionstart",Wt),Nt.removeEventListener("sessionend",jt),Q&&(Q.dispose(),Q=null),Yt.stop()},this.renderBufferDirect=function(t,e,n,i,r,a){null===e&&(e=it);const s=r.isMesh&&r.matrixWorld.determinant()<0,o=function(t,e,n,i,r){!0!==e.isScene&&(e=it),ht.resetTextureUnits();const a=e.fog,s=i.isMeshStandardMaterial?e.environment:null,o=null===b?y.outputColorSpace:!0===b.isXRRenderTarget?b.texture.colorSpace:Y,l=(i.isMeshStandardMaterial?dt:ut).get(i.envMap||s),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,h=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0),d=!!n.morphAttributes.position,p=!!n.morphAttributes.normal,f=!!n.morphAttributes.color;let m=u;i.toneMapped&&(null!==b&&!0!==b.isXRRenderTarget||(m=y.toneMapping));const g=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,v=void 0!==g?g.length:0,x=ct.get(i),M=_.state.lights;if(!0===Z&&(!0===J||t!==I)){const e=t===I&&i.id===T;St.setState(i,t,e)}let E=!1;i.version===x.__version?x.needsLights&&x.lightsStateVersion!==M.state.version||x.outputColorSpace!==o||r.isBatchedMesh&&!1===x.batching?E=!0:r.isBatchedMesh||!0!==x.batching?r.isInstancedMesh&&!1===x.instancing?E=!0:r.isInstancedMesh||!0!==x.instancing?r.isSkinnedMesh&&!1===x.skinning?E=!0:r.isSkinnedMesh||!0!==x.skinning?r.isInstancedMesh&&!0===x.instancingColor&&null===r.instanceColor||r.isInstancedMesh&&!1===x.instancingColor&&null!==r.instanceColor||x.envMap!==l||!0===i.fog&&x.fog!==a?E=!0:void 0===x.numClippingPlanes||x.numClippingPlanes===St.numPlanes&&x.numIntersection===St.numIntersection?(x.vertexAlphas!==c||x.vertexTangents!==h||x.morphTargets!==d||x.morphNormals!==p||x.morphColors!==f||x.toneMapping!==m||!0===st.isWebGL2&&x.morphTargetsCount!==v)&&(E=!0):E=!0:E=!0:E=!0:E=!0:(E=!0,x.__version=i.version);let S=x.currentProgram;!0===E&&(S=Jt(i,e,r));let w=!1,A=!1,R=!1;const C=S.getUniforms(),L=x.uniforms;if(ot.useProgram(S.program)&&(w=!0,A=!0,R=!0),i.id!==T&&(T=i.id,A=!0),w||I!==t){C.setValue(Ut,"projectionMatrix",t.projectionMatrix),C.setValue(Ut,"viewMatrix",t.matrixWorldInverse);const e=C.map.cameraPosition;void 0!==e&&e.setValue(Ut,nt.setFromMatrixPosition(t.matrixWorld)),st.logarithmicDepthBuffer&&C.setValue(Ut,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&C.setValue(Ut,"isOrthographic",!0===t.isOrthographicCamera),I!==t&&(I=t,A=!0,R=!0)}if(r.isSkinnedMesh){C.setOptional(Ut,r,"bindMatrix"),C.setOptional(Ut,r,"bindMatrixInverse");const t=r.skeleton;t&&(st.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),C.setValue(Ut,"boneTexture",t.boneTexture,ht)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}r.isBatchedMesh&&(C.setOptional(Ut,r,"batchingTexture"),C.setValue(Ut,"batchingTexture",r._matricesTexture,ht));const P=n.morphAttributes;var U,D;if((void 0!==P.position||void 0!==P.normal||void 0!==P.color&&!0===st.isWebGL2)&&wt.update(r,n,S),(A||x.receiveShadow!==r.receiveShadow)&&(x.receiveShadow=r.receiveShadow,C.setValue(Ut,"receiveShadow",r.receiveShadow)),i.isMeshGouraudMaterial&&null!==i.envMap&&(L.envMap.value=l,L.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1),A&&(C.setValue(Ut,"toneMappingExposure",y.toneMappingExposure),x.needsLights&&(D=R,(U=L).ambientLightColor.needsUpdate=D,U.lightProbe.needsUpdate=D,U.directionalLights.needsUpdate=D,U.directionalLightShadows.needsUpdate=D,U.pointLights.needsUpdate=D,U.pointLightShadows.needsUpdate=D,U.spotLights.needsUpdate=D,U.spotLightShadows.needsUpdate=D,U.rectAreaLights.needsUpdate=D,U.hemisphereLights.needsUpdate=D),a&&!0===i.fog&&xt.refreshFogUniforms(L,a),xt.refreshMaterialUniforms(L,i,G,V,Q),ea.upload(Ut,Qt(x),L,ht)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(ea.upload(Ut,Qt(x),L,ht),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&C.setValue(Ut,"center",r.center),C.setValue(Ut,"modelViewMatrix",r.modelViewMatrix),C.setValue(Ut,"normalMatrix",r.normalMatrix),C.setValue(Ut,"modelMatrix",r.matrixWorld),i.isShaderMaterial||i.isRawShaderMaterial){const t=i.uniformsGroups;for(let e=0,n=t.length;e<n;e++)if(st.isWebGL2){const n=t[e];Pt.update(n,S),Pt.bind(n,S)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return S}(t,e,n,i,r);ot.setMaterial(i,s);let l=n.index,c=1;if(!0===i.wireframe){if(l=mt.getWireframeAttribute(n),void 0===l)return;c=2}const h=n.drawRange,d=n.attributes.position;let p=h.start*c,f=(h.start+h.count)*c;null!==a&&(p=Math.max(p,a.start*c),f=Math.min(f,(a.start+a.count)*c)),null!==l?(p=Math.max(p,0),f=Math.min(f,l.count)):null!=d&&(p=Math.max(p,0),f=Math.min(f,d.count));const m=f-p;if(m<0||m===1/0)return;let g;Lt.setup(r,i,o,n,l);let v=At;if(null!==l&&(g=ft.get(l),v=Rt,v.setIndex(g)),r.isMesh)!0===i.wireframe?(ot.setLineWidth(i.wireframeLinewidth*rt()),v.setMode(Ut.LINES)):v.setMode(Ut.TRIANGLES);else if(r.isLine){let t=i.linewidth;void 0===t&&(t=1),ot.setLineWidth(t*rt()),r.isLineSegments?v.setMode(Ut.LINES):r.isLineLoop?v.setMode(Ut.LINE_LOOP):v.setMode(Ut.LINE_STRIP)}else r.isPoints?v.setMode(Ut.POINTS):r.isSprite&&v.setMode(Ut.TRIANGLES);if(r.isBatchedMesh)v.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount);else if(r.isInstancedMesh)v.renderInstances(p,m,r.count);else if(n.isInstancedBufferGeometry){const t=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,e=Math.min(n.instanceCount,t);v.renderInstances(p,m,e)}else v.render(p,m)},this.compile=function(t,e,n=null){null===n&&(n=t),_=Mt.get(n),_.init(),x.push(_),n.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(_.pushLight(t),t.castShadow&&_.pushShadow(t))})),t!==n&&t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(_.pushLight(t),t.castShadow&&_.pushShadow(t))})),_.setupLights(y._useLegacyLights);const i=new Set;return t.traverse((function(t){const e=t.material;if(e)if(Array.isArray(e))for(let r=0;r<e.length;r++){const a=e[r];Gt(a,n,t),i.add(a)}else Gt(e,n,t),i.add(e)})),x.pop(),_=null,i},this.compileAsync=function(t,e,n=null){const i=this.compile(t,e,n);return new Promise((e=>{function n(){i.forEach((function(t){ct.get(t).currentProgram.isReady()&&i.delete(t)})),0!==i.size?setTimeout(n,10):e(t)}null!==at.get("KHR_parallel_shader_compile")?n():setTimeout(n,10)}))};let kt=null;function Wt(){Yt.stop()}function jt(){Yt.start()}const Yt=new pi;function qt(t,e,n,i){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)_.pushLight(t),t.castShadow&&_.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||K.intersectsSprite(t)){i&&nt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(tt);const e=gt.update(t),r=t.material;r.visible&&g.push(t,e,r,n,nt.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(!t.frustumCulled||K.intersectsObject(t))){const e=gt.update(t),r=t.material;if(i&&(void 0!==t.boundingSphere?(null===t.boundingSphere&&t.computeBoundingSphere(),nt.copy(t.boundingSphere.center)):(null===e.boundingSphere&&e.computeBoundingSphere(),nt.copy(e.boundingSphere.center)),nt.applyMatrix4(t.matrixWorld).applyMatrix4(tt)),Array.isArray(r)){const i=e.groups;for(let a=0,s=i.length;a<s;a++){const s=i[a],o=r[s.materialIndex];o&&o.visible&&g.push(t,e,o,n,nt.z,s)}}else r.visible&&g.push(t,e,r,n,nt.z,null)}const r=t.children;for(let t=0,a=r.length;t<a;t++)qt(r[t],e,n,i)}function $t(t,e,n,i){const r=t.opaque,a=t.transmissive,s=t.transparent;_.setupLightsView(n),!0===Z&&St.setGlobalState(y.clippingPlanes,n),a.length>0&&function(t,e,n,i){if(null!==(!0===n.isScene?n.overrideMaterial:null))return;const r=st.isWebGL2;null===Q&&(Q=new Vt(1,1,{generateMipmaps:!0,type:at.has("EXT_color_buffer_half_float")?P:A,minFilter:w,samples:r?4:0})),y.getDrawingBufferSize(et),r?Q.setSize(et.x,et.y):Q.setSize(pt(et.x),pt(et.y));const a=y.getRenderTarget();y.setRenderTarget(Q),y.getClearColor(z),B=y.getClearAlpha(),B<1&&y.setClearColor(16777215,.5),y.clear();const s=y.toneMapping;y.toneMapping=u,Kt(t,n,i),ht.updateMultisampleRenderTarget(Q),ht.updateRenderTargetMipmap(Q);let o=!1;for(let t=0,r=e.length;t<r;t++){const r=e[t],a=r.object,s=r.geometry,l=r.material,c=r.group;if(2===l.side&&a.layers.test(i.layers)){const t=l.side;l.side=1,l.needsUpdate=!0,Zt(a,n,i,s,l,c),l.side=t,l.needsUpdate=!0,o=!0}}!0===o&&(ht.updateMultisampleRenderTarget(Q),ht.updateRenderTargetMipmap(Q)),y.setRenderTarget(a),y.setClearColor(z,B),y.toneMapping=s}(r,a,e,n),i&&ot.viewport(N.copy(i)),r.length>0&&Kt(r,e,n),a.length>0&&Kt(a,e,n),s.length>0&&Kt(s,e,n),ot.buffers.depth.setTest(!0),ot.buffers.depth.setMask(!0),ot.buffers.color.setMask(!0),ot.setPolygonOffset(!1)}function Kt(t,e,n){const i=!0===e.isScene?e.overrideMaterial:null;for(let r=0,a=t.length;r<a;r++){const a=t[r],s=a.object,o=a.geometry,l=null===i?a.material:i,c=a.group;s.layers.test(n.layers)&&Zt(s,e,n,o,l,c)}}function Zt(t,e,n,i,r,a){t.onBeforeRender(y,e,n,i,r,a),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),r.onBeforeRender(y,e,n,i,t,a),!0===r.transparent&&2===r.side&&!1===r.forceSinglePass?(r.side=1,r.needsUpdate=!0,y.renderBufferDirect(n,e,i,r,t,a),r.side=0,r.needsUpdate=!0,y.renderBufferDirect(n,e,i,r,t,a),r.side=2):y.renderBufferDirect(n,e,i,r,t,a),t.onAfterRender(y,e,n,i,r,a)}function Jt(t,e,n){!0!==e.isScene&&(e=it);const i=ct.get(t),r=_.state.lights,a=_.state.shadowsArray,s=r.state.version,o=vt.getParameters(t,r.state,a,e,n),l=vt.getProgramCacheKey(o);let c=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null,i.fog=e.fog,i.envMap=(t.isMeshStandardMaterial?dt:ut).get(t.envMap||i.environment),void 0===c&&(t.addEventListener("dispose",Ht),c=new Map,i.programs=c);let h=c.get(l);if(void 0!==h){if(i.currentProgram===h&&i.lightsStateVersion===s)return te(t,o),h}else o.uniforms=vt.getUniforms(t),t.onBuild(n,o,y),t.onBeforeCompile(o,y),h=vt.acquireProgram(o,l),c.set(l,h),i.uniforms=o.uniforms;const u=i.uniforms;return(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(u.clippingPlanes=St.uniform),te(t,o),i.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),i.lightsStateVersion=s,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotLightMatrix.value=r.state.spotLightMatrix,u.spotLightMap.value=r.state.spotLightMap,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix),i.currentProgram=h,i.uniformsList=null,h}function Qt(t){if(null===t.uniformsList){const e=t.currentProgram.getUniforms();t.uniformsList=ea.seqWithValue(e.seq,t.uniforms)}return t.uniformsList}function te(t,e){const n=ct.get(t);n.outputColorSpace=e.outputColorSpace,n.batching=e.batching,n.instancing=e.instancing,n.instancingColor=e.instancingColor,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.morphColors=e.morphColors,n.morphTargetsCount=e.morphTargetsCount,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents,n.toneMapping=e.toneMapping}Yt.setAnimationLoop((function(t){kt&&kt(t)})),"undefined"!=typeof self&&Yt.setContext(self),this.setAnimationLoop=function(t){kt=t,Nt.setAnimationLoop(t),null===t?Yt.stop():Yt.start()},Nt.addEventListener("sessionstart",Wt),Nt.addEventListener("sessionend",jt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===M)return;!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),null===e.parent&&!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),!0===Nt.enabled&&!0===Nt.isPresenting&&(!0===Nt.cameraAutoUpdate&&Nt.updateCamera(e),e=Nt.getCamera()),!0===t.isScene&&t.onBeforeRender(y,t,e,b),_=Mt.get(t,x.length),_.init(),x.push(_),tt.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),K.setFromProjectionMatrix(tt),J=this.localClippingEnabled,Z=St.init(this.clippingPlanes,J),g=yt.get(t,v.length),g.init(),v.push(g),qt(t,e,0,y.sortObjects),g.finish(),!0===y.sortObjects&&g.sort(k,W),this.info.render.frame++,!0===Z&&St.beginShadows();const n=_.state.shadowsArray;if(bt.render(n,t,e),!0===Z&&St.endShadows(),!0===this.info.autoReset&&this.info.reset(),Tt.render(g,t),_.setupLights(y._useLegacyLights),e.isArrayCamera){const n=e.cameras;for(let e=0,i=n.length;e<i;e++){const i=n[e];$t(g,t,i,i.viewport)}}else $t(g,t,e);null!==b&&(ht.updateMultisampleRenderTarget(b),ht.updateRenderTargetMipmap(b)),!0===t.isScene&&t.onAfterRender(y,t,e),Lt.resetDefaultState(),T=-1,I=null,x.pop(),_=x.length>0?x[x.length-1]:null,v.pop(),g=v.length>0?v[v.length-1]:null},this.getActiveCubeFace=function(){return E},this.getActiveMipmapLevel=function(){return S},this.getRenderTarget=function(){return b},this.setRenderTargetTextures=function(t,e,n){ct.get(t.texture).__webglTexture=e,ct.get(t.depthTexture).__webglTexture=n;const i=ct.get(t);i.__hasExternalTextures=!0,i.__hasExternalTextures&&(i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===at.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(t,e){const n=ct.get(t);n.__webglFramebuffer=e,n.__useDefaultFramebuffer=void 0===e},this.setRenderTarget=function(t,e=0,n=0){b=t,E=e,S=n;let i=!0,r=null,a=!1,s=!1;if(t){const o=ct.get(t);void 0!==o.__useDefaultFramebuffer?(ot.bindFramebuffer(Ut.FRAMEBUFFER,null),i=!1):void 0===o.__webglFramebuffer?ht.setupRenderTarget(t):o.__hasExternalTextures&&ht.rebindTextures(t,ct.get(t.texture).__webglTexture,ct.get(t.depthTexture).__webglTexture);const l=t.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(s=!0);const c=ct.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=Array.isArray(c[e])?c[e][n]:c[e],a=!0):r=st.isWebGL2&&t.samples>0&&!1===ht.useMultisampledRTT(t)?ct.get(t).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c,N.copy(t.viewport),O.copy(t.scissor),F=t.scissorTest}else N.copy(X).multiplyScalar(G).floor(),O.copy(q).multiplyScalar(G).floor(),F=$;if(ot.bindFramebuffer(Ut.FRAMEBUFFER,r)&&st.drawBuffers&&i&&ot.drawBuffers(t,r),ot.viewport(N),ot.scissor(O),ot.setScissorTest(F),a){const i=ct.get(t.texture);Ut.framebufferTexture2D(Ut.FRAMEBUFFER,Ut.COLOR_ATTACHMENT0,Ut.TEXTURE_CUBE_MAP_POSITIVE_X+e,i.__webglTexture,n)}else if(s){const i=ct.get(t.texture),r=e||0;Ut.framebufferTextureLayer(Ut.FRAMEBUFFER,Ut.COLOR_ATTACHMENT0,i.__webglTexture,n||0,r)}T=-1},this.readRenderTargetPixels=function(t,e,n,i,r,a,s){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=ct.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==s&&(o=o[s]),o){ot.bindFramebuffer(Ut.FRAMEBUFFER,o);try{const s=t.texture,o=s.format,l=s.type;if(o!==D&&Ct.convert(o)!==Ut.getParameter(Ut.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===P&&(at.has("EXT_color_buffer_half_float")||st.isWebGL2&&at.has("EXT_color_buffer_float"));if(!(l===A||Ct.convert(l)===Ut.getParameter(Ut.IMPLEMENTATION_COLOR_READ_TYPE)||l===L&&(st.isWebGL2||at.has("OES_texture_float")||at.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&Ut.readPixels(e,n,i,r,Ct.convert(o),Ct.convert(l),a)}finally{const t=null!==b?ct.get(b).__webglFramebuffer:null;ot.bindFramebuffer(Ut.FRAMEBUFFER,t)}}},this.copyFramebufferToTexture=function(t,e,n=0){const i=Math.pow(2,-n),r=Math.floor(e.image.width*i),a=Math.floor(e.image.height*i);ht.setTexture2D(e,0),Ut.copyTexSubImage2D(Ut.TEXTURE_2D,n,0,0,t.x,t.y,r,a),ot.unbindTexture()},this.copyTextureToTexture=function(t,e,n,i=0){const r=e.image.width,a=e.image.height,s=Ct.convert(n.format),o=Ct.convert(n.type);ht.setTexture2D(n,0),Ut.pixelStorei(Ut.UNPACK_FLIP_Y_WEBGL,n.flipY),Ut.pixelStorei(Ut.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),Ut.pixelStorei(Ut.UNPACK_ALIGNMENT,n.unpackAlignment),e.isDataTexture?Ut.texSubImage2D(Ut.TEXTURE_2D,i,t.x,t.y,r,a,s,o,e.image.data):e.isCompressedTexture?Ut.compressedTexSubImage2D(Ut.TEXTURE_2D,i,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,s,e.mipmaps[0].data):Ut.texSubImage2D(Ut.TEXTURE_2D,i,t.x,t.y,s,o,e.image),0===i&&n.generateMipmaps&&Ut.generateMipmap(Ut.TEXTURE_2D),ot.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n,i,r=0){if(y.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const a=t.max.x-t.min.x+1,s=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=Ct.convert(i.format),c=Ct.convert(i.type);let h;if(i.isData3DTexture)ht.setTexture3D(i,0),h=Ut.TEXTURE_3D;else{if(!i.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");ht.setTexture2DArray(i,0),h=Ut.TEXTURE_2D_ARRAY}Ut.pixelStorei(Ut.UNPACK_FLIP_Y_WEBGL,i.flipY),Ut.pixelStorei(Ut.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),Ut.pixelStorei(Ut.UNPACK_ALIGNMENT,i.unpackAlignment);const u=Ut.getParameter(Ut.UNPACK_ROW_LENGTH),d=Ut.getParameter(Ut.UNPACK_IMAGE_HEIGHT),p=Ut.getParameter(Ut.UNPACK_SKIP_PIXELS),f=Ut.getParameter(Ut.UNPACK_SKIP_ROWS),m=Ut.getParameter(Ut.UNPACK_SKIP_IMAGES),g=n.isCompressedTexture?n.mipmaps[0]:n.image;Ut.pixelStorei(Ut.UNPACK_ROW_LENGTH,g.width),Ut.pixelStorei(Ut.UNPACK_IMAGE_HEIGHT,g.height),Ut.pixelStorei(Ut.UNPACK_SKIP_PIXELS,t.min.x),Ut.pixelStorei(Ut.UNPACK_SKIP_ROWS,t.min.y),Ut.pixelStorei(Ut.UNPACK_SKIP_IMAGES,t.min.z),n.isDataTexture||n.isData3DTexture?Ut.texSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,c,g.data):n.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Ut.compressedTexSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,g.data)):Ut.texSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,c,g),Ut.pixelStorei(Ut.UNPACK_ROW_LENGTH,u),Ut.pixelStorei(Ut.UNPACK_IMAGE_HEIGHT,d),Ut.pixelStorei(Ut.UNPACK_SKIP_PIXELS,p),Ut.pixelStorei(Ut.UNPACK_SKIP_ROWS,f),Ut.pixelStorei(Ut.UNPACK_SKIP_IMAGES,m),0===r&&i.generateMipmaps&&Ut.generateMipmap(h),ot.unbindTexture()},this.initTexture=function(t){t.isCubeTexture?ht.setTextureCube(t,0):t.isData3DTexture?ht.setTexture3D(t,0):t.isDataArrayTexture||t.isCompressedArrayTexture?ht.setTexture2DArray(t,0):ht.setTexture2D(t,0),ot.unbindTexture()},this.resetState=function(){E=0,S=0,b=null,ot.reset(),Lt.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return it}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=t===q?"display-p3":"srgb",e.unpackColorSpace=Ct.workingColorSpace===$?"display-p3":"srgb"}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(t){console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!t}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===j?W:3e3}set outputEncoding(t){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=t===W?j:Y}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(t){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=t}}(class extends qa{}).prototype.isWebGL1Renderer=!0;class $a extends je{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(e.object.backgroundIntensity=this.backgroundIntensity),e}}class Ka extends pn{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new hn(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const Za=new Xt,Ja=new Xt,Qa=new Me,ts=new ye,es=new de;class ns extends je{constructor(t=new Rn,e=new Ka){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,i=e.count;t<i;t++)Za.fromBufferAttribute(e,t-1),Ja.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=Za.distanceTo(Ja);t.setAttribute("lineDistance",new yn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,a=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),es.copy(n.boundingSphere),es.applyMatrix4(i),es.radius+=r,!1===t.ray.intersectsSphere(es))return;Qa.copy(i).invert(),ts.copy(t.ray).applyMatrix4(Qa);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s,l=new Xt,c=new Xt,h=new Xt,u=new Xt,d=this.isLineSegments?2:1,p=n.index,f=n.attributes.position;if(null!==p)for(let n=Math.max(0,a.start),i=Math.min(p.count,a.start+a.count)-1;n<i;n+=d){const i=p.getX(n),r=p.getX(n+1);if(l.fromBufferAttribute(f,i),c.fromBufferAttribute(f,r),ts.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const a=t.ray.origin.distanceTo(u);a<t.near||a>t.far||e.push({distance:a,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}else for(let n=Math.max(0,a.start),i=Math.min(f.count,a.start+a.count)-1;n<i;n+=d){if(l.fromBufferAttribute(f,n),c.fromBufferAttribute(f,n+1),ts.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const i=t.ray.origin.distanceTo(u);i<t.near||i>t.far||e.push({distance:i,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}class is extends Rn{constructor(t=1,e=32,n=16,i=0,r=2*Math.PI,a=0,s=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:s},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const o=Math.min(a+s,Math.PI);let l=0;const c=[],h=new Xt,u=new Xt,d=[],p=[],f=[],m=[];for(let d=0;d<=n;d++){const g=[],_=d/n;let v=0;0===d&&0===a?v=.5/e:d===n&&o===Math.PI&&(v=-.5/e);for(let n=0;n<=e;n++){const o=n/e;h.x=-t*Math.cos(i+o*r)*Math.sin(a+_*s),h.y=t*Math.cos(a+_*s),h.z=t*Math.sin(i+o*r)*Math.sin(a+_*s),p.push(h.x,h.y,h.z),u.copy(h).normalize(),f.push(u.x,u.y,u.z),m.push(o+v,1-_),g.push(l++)}c.push(g)}for(let t=0;t<n;t++)for(let i=0;i<e;i++){const e=c[t][i+1],r=c[t][i],s=c[t+1][i],l=c[t+1][i+1];(0!==t||a>0)&&d.push(e,r,l),(t!==n-1||o<Math.PI)&&d.push(r,s,l)}this.setIndex(d),this.setAttribute("position",new yn(p,3)),this.setAttribute("normal",new yn(f,3)),this.setAttribute("uv",new yn(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new is(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class rs extends Rn{constructor(t=1,e=.4,n=12,i=48,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r},n=Math.floor(n),i=Math.floor(i);const a=[],s=[],o=[],l=[],c=new Xt,h=new Xt,u=new Xt;for(let a=0;a<=n;a++)for(let d=0;d<=i;d++){const p=d/i*r,f=a/n*Math.PI*2;h.x=(t+e*Math.cos(f))*Math.cos(p),h.y=(t+e*Math.cos(f))*Math.sin(p),h.z=e*Math.sin(f),s.push(h.x,h.y,h.z),c.x=t*Math.cos(p),c.y=t*Math.sin(p),u.subVectors(h,c).normalize(),o.push(u.x,u.y,u.z),l.push(d/i),l.push(a/n)}for(let t=1;t<=n;t++)for(let e=1;e<=i;e++){const n=(i+1)*t+e-1,r=(i+1)*(t-1)+e-1,s=(i+1)*(t-1)+e,o=(i+1)*t+e;a.push(n,r,o),a.push(r,s,o)}this.setIndex(a),this.setAttribute("position",new yn(s,3)),this.setAttribute("normal",new yn(o,3)),this.setAttribute("uv",new yn(l,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new rs(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class as extends pn{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new hn(16777215),this.specular=new hn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new hn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new _t(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=l,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}function ss(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)}class os{constructor(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let a;n:{i:if(!(t<i)){for(let a=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===a)break;if(r=i,i=e[++n],t<i)break e}a=e.length;break n}if(t>=r)break t;{const s=e[1];t<s&&(n=2,r=s);for(let a=n-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(n===a)break;if(i=r,r=e[--n-1],t>=r)break e}a=n,n=0}}for(;n<a;){const i=n+a>>>1;t<e[i]?a=i:n=i+1}if(i=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===i)return n=e.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class ls extends os{constructor(t,e,n,i){super(t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,a=t+1,s=i[r],o=i[a];if(void 0===s)switch(this.getSettings_().endingStart){case 2401:r=t,s=2*e-n;break;case 2402:r=i.length-2,s=e+i[r]-i[r+1];break;default:r=t,s=n}if(void 0===o)switch(this.getSettings_().endingEnd){case 2401:a=t,o=2*n-e;break;case 2402:a=1,o=n+i[1]-i[0];break;default:a=t-1,o=e}const l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-s),this._weightNext=l/(o-n),this._offsetPrev=r*c,this._offsetNext=a*c}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(n-e)/(i-e),f=p*p,m=f*p,g=-u*m+2*u*f-u*p,_=(1+u)*m+(-1.5-2*u)*f+(-.5+u)*p+1,v=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f;for(let t=0;t!==s;++t)r[t]=g*a[c+t]+_*a[l+t]+v*a[o+t]+x*a[h+t];return r}}class cs extends os{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=(n-e)/(i-e),h=1-c;for(let t=0;t!==s;++t)r[t]=a[l+t]*h+a[o+t]*c;return r}}class hs extends os{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class us{constructor(t,e,n,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=ss(e,this.TimeBufferType),this.values=ss(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:ss(t.times,Array),values:ss(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new hs(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new cs(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new ls(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case V:e=this.InterpolantFactoryMethodDiscrete;break;case G:e=this.InterpolantFactoryMethodLinear;break;case k:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return V;case this.InterpolantFactoryMethodLinear:return G;case this.InterpolantFactoryMethodSmooth:return k}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]*=t}return this}trim(t,e){const n=this.times,i=n.length;let r=0,a=i-1;for(;r!==i&&n[r]<t;)++r;for(;-1!==a&&n[a]>e;)--a;if(++a,0!==r||a!==i){r>=a&&(a=Math.max(a,1),r=a-1);const t=this.getValueSize();this.times=n.slice(r,a),this.values=this.values.slice(r*t,a*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let a=null;for(let e=0;e!==r;e++){const i=n[e];if("number"==typeof i&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i),t=!1;break}if(null!==a&&a>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,a),t=!1;break}a=i}if(void 0!==i&&(s=i,ArrayBuffer.isView(s)&&!(s instanceof DataView)))for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n),t=!1;break}}var s;return t}optimize(){const t=this.times.slice(),e=this.values.slice(),n=this.getValueSize(),i=this.getInterpolation()===k,r=t.length-1;let a=1;for(let s=1;s<r;++s){let r=!1;const o=t[s];if(o!==t[s+1]&&(1!==s||o!==t[0]))if(i)r=!0;else{const t=s*n,i=t-n,a=t+n;for(let s=0;s!==n;++s){const n=e[t+s];if(n!==e[i+s]||n!==e[a+s]){r=!0;break}}}if(r){if(s!==a){t[a]=t[s];const i=s*n,r=a*n;for(let t=0;t!==n;++t)e[r+t]=e[i+t]}++a}}if(r>0){t[a]=t[r];for(let t=r*n,i=a*n,s=0;s!==n;++s)e[i+s]=e[t+s];++a}return a!==t.length?(this.times=t.slice(0,a),this.values=e.slice(0,a*n)):(this.times=t,this.values=e),this}clone(){const t=this.times.slice(),e=this.values.slice(),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}us.prototype.TimeBufferType=Float32Array,us.prototype.ValueBufferType=Float32Array,us.prototype.DefaultInterpolation=G;class ds extends us{}ds.prototype.ValueTypeName="bool",ds.prototype.ValueBufferType=Array,ds.prototype.DefaultInterpolation=V,ds.prototype.InterpolantFactoryMethodLinear=void 0,ds.prototype.InterpolantFactoryMethodSmooth=void 0;(class extends us{}).prototype.ValueTypeName="color";(class extends us{}).prototype.ValueTypeName="number";class ps extends os{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=(n-e)/(i-e);let l=t*s;for(let t=l+s;l!==t;l+=4)Wt.slerpFlat(r,0,a,l-s,a,l,o);return r}}class fs extends us{InterpolantFactoryMethodLinear(t){return new ps(this.times,this.values,this.getValueSize(),t)}}fs.prototype.ValueTypeName="quaternion",fs.prototype.DefaultInterpolation=G,fs.prototype.InterpolantFactoryMethodSmooth=void 0;class ms extends us{}ms.prototype.ValueTypeName="string",ms.prototype.ValueBufferType=Array,ms.prototype.DefaultInterpolation=V,ms.prototype.InterpolantFactoryMethodLinear=void 0,ms.prototype.InterpolantFactoryMethodSmooth=void 0;(class extends us{}).prototype.ValueTypeName="vector";class gs extends je{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new hn(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}class _s extends gs{constructor(t,e,n){super(t,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(je.DEFAULT_UP),this.updateMatrix(),this.groundColor=new hn(e)}copy(t,e){return super.copy(t,e),this.groundColor.copy(t.groundColor),this}}const vs=new Me,xs=new Xt,ys=new Xt;class Ms{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new _t(512,512),this.map=null,this.mapPass=null,this.matrix=new Me,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new di,this._frameExtents=new _t(1,1),this._viewportCount=1,this._viewports=[new Bt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;xs.setFromMatrixPosition(t.matrixWorld),e.position.copy(xs),ys.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(ys),e.updateMatrixWorld(),vs.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(vs),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(vs)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class Es extends Ms{constructor(){super(new wi(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Ss extends gs{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(je.DEFAULT_UP),this.updateMatrix(),this.target=new je,this.shadow=new Es}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}const bs="\\[\\]\\.:\\/",Ts=new RegExp("["+bs+"]","g"),ws="[^"+bs+"]",As="[^"+bs.replace("\\.","")+"]",Rs=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",ws)+/(WCOD+)?/.source.replace("WCOD",As)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",ws)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",ws)+"$"),Cs=["material","materials","bones","map"];class Ls{constructor(t,e,n){this.path=e,this.parsedPath=n||Ls.parseTrackName(e),this.node=Ls.findNode(t,this.parsedPath.nodeName),this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new Ls.Composite(t,e,n):new Ls(t,e,n)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(Ts,"")}static parseTrackName(t){const e=Rs.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){const t=n.nodeName.substring(i+1);-1!==Cs.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const a=n(r.children);if(a)return a}return null},i=n(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)t[e++]=n[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=Ls.findNode(this.rootNode,e.nodeName),this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");if(n){let i=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;case"map":if("map"in t){t=t.map;break}if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);t=t.material.map;break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==i){if(void 0===t[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[i]}}const a=t[i];if(void 0===a){const n=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",t)}let s=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?s=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(s=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else void 0!==a.fromArray&&void 0!==a.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(o=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][s]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Ls.Composite=class{constructor(t,e,n){const i=n||Ls.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},Ls.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Ls.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Ls.prototype.GetterByBindingType=[Ls.prototype._getValue_direct,Ls.prototype._getValue_array,Ls.prototype._getValue_arrayElement,Ls.prototype._getValue_toArray],Ls.prototype.SetterByBindingTypeAndVersioning=[[Ls.prototype._setValue_direct,Ls.prototype._setValue_direct_setNeedsUpdate,Ls.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Ls.prototype._setValue_array,Ls.prototype._setValue_array_setNeedsUpdate,Ls.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Ls.prototype._setValue_arrayElement,Ls.prototype._setValue_arrayElement_setNeedsUpdate,Ls.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Ls.prototype._setValue_fromArray,Ls.prototype._setValue_fromArray_setNeedsUpdate,Ls.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]],new Float32Array(1);class Ps{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(ht(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}function Us(t){return Us="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Us(t)}function Ds(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,r,a,s,o=[],l=!0,c=!1;try{if(a=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;l=!1}else for(;!(l=(i=a.call(n)).done)&&(o.push(i.value),o.length!==e);l=!0);}catch(t){c=!0,r=t}finally{try{if(!l&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(c)throw r}}return o}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Is(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Is(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Is(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function Ns(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Os(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(void 0,r=function(t,e){if("object"!==Us(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!==Us(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i.key),"symbol"===Us(r)?r:String(r)),i)}var r}function Fs(t,e,n){return e&&Os(t.prototype,e),n&&Os(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:i}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=i);var zs=function(){function t(e,n){Ns(this,t),this.scene=n,this.graph=e,this.wrong_vertexes=!0,this.edges=[],this.vertexes=[],this.layers=[[],[],[],[]],this.layers_show=[!0,!0,!0,!0],this.layer_edges_show=!1,this.between_layer_edges_show=!1,this.update_graph()}return Fs(t,[{key:"update_graph",value:function(){this.update_vertexes(),this.edges=[]}},{key:"update_vertexes",value:function(){for(var t=this.vertexes.length;t<this.graph.vertexCount;t++)this.vertexes.push(new Bs(t,0,0,0,-1,this.scene));this.update_state()}},{key:"update_edges",value:function(){var t=this;this.edges=[],this.graph.edges.forEach((function(e){var n=Ds(e,2),i=n[0],r=n[1];i==r?t.edges.push(new Vs(t.vertexes[i],t.scene)):t.edges.push(new Hs(t.vertexes[i],t.vertexes[r],t.scene))}))}},{key:"update_state",value:function(){var t=this;if(this.layers=[[],[],[],[]],this.vertexes.forEach((function(t){t.layer=-1,t.corrupted=!0})),0==this.graph.independentSet.length)return this.vertexes.forEach((function(e){e.layer=1,e.corrupted=!1,t.layers[1].push(e.id)})),void this.compute_layers_positions();this.graph.independentSet.forEach((function(e){var n=t.vertexes[e];null!=n&&0!=n.layer&&(n.layer=0,n.corrupted=!1,t.layers[0].push(n.id))})),this.graph.edges.forEach((function(e){var n=Ds(e,2),i=n[0],r=n[1];if(i!=r){var a=t.vertexes[i],s=t.vertexes[r];return 0==a.layer&&0==s.layer?(a.corrupted=!0,void(s.corrupted=!0)):0==a.layer&&-1==s.layer?(s.layer=1,s.corrupted=!1,void t.layers[1].push(r)):void(0==s.layer&&-1==a.layer&&(a.layer=1,a.corrupted=!1,t.layers[1].push(i)))}})),this.graph.edges.forEach((function(e){var n=Ds(e,2),i=n[0],r=n[1];if(i!=r){var a=t.vertexes[i],s=t.vertexes[r];if(1==a.layer&&-1==s.layer)return s.layer=2,s.corrupted=!1,void t.layers[2].push(r);1==s.layer&&-1==a.layer&&(a.layer=2,a.corrupted=!1,t.layers[2].push(i))}})),this.vertexes.forEach((function(e){-1==e.layer&&(e.layer=3,t.layers[3].push(e.id))})),this.compute_layers_positions(),this.edges.forEach((function(t){t.update()})),this.color_vertexes()}},{key:"color_vertexes",value:function(){var t=this;this.vertexes.forEach((function(e){if(e.corrupted&&t.wrong_vertexes)e.change_color(16711680);else switch(e.layer){case 0:e.change_color(16777215);break;case 1:e.change_color(11184810);break;case 2:e.change_color(4473924);break;case 3:e.change_color(0)}}))}},{key:"compute_layers_positions",value:function(){var t=this;this.layers.forEach((function(e,n){t.compute_layer_positions(n)}))}},{key:"compute_layer_positions",value:function(t){var e=this,n=Math.ceil(Math.sqrt(this.layers[t].length)),i=-(n-1)/2*3,r=3*-(t-1)*3,a=-(n-1)/2*3,s=0,o=0;this.layers[t].forEach((function(t){e.vertexes[t].translate(i+3*s,r,a+3*o),++s>=n&&(s=0,o++)}))}},{key:"enable_layer",value:function(t,e){var n=this;this.layers_show[t]=e,this.layers[t].forEach((function(t){n.vertexes[t].set_visible(e)})),this.edges.forEach((function(i){var r=i.source,a=i.target;r.layer==t&&a.layer==t?i.set_visible(e&&n.layer_edges_show):r.layer!=t&&a.layer!=t||i.set_visible(e&&n.between_layer_edges_show)}))}},{key:"show_wrong_vertexes",value:function(t){this.wrong_vertexes=t,this.color_vertexes()}},{key:"show_layer_edges",value:function(t){var e=this;t&&0==this.edges.length&&this.update_edges(),this.layer_edges_show=t,this.edges.forEach((function(n){var i=n.source.layer;i==n.target.layer&&e.layers_show[i]&&n.set_visible(t)}))}},{key:"show_between_layer_edges",value:function(t){var e=this;t&&0==this.edges.length&&this.update_edges(),this.between_layer_edges_show=t,this.edges.forEach((function(n){var i=n.source.layer,r=n.target.layer;i!=r&&e.layers_show[i]&&e.layers_show[r]&&n.set_visible(t)}))}}]),t}(),Bs=function(){function t(e,n,i,r,a,s){Ns(this,t),this.id=e;var o=new is(1,16,16),l=new as({color:16776960});this.mesh=new jn(o,l),s.add(this.mesh),this.corrupted=!1}return Fs(t,[{key:"translate",value:function(t,e,n){this.mesh.position.x=t,this.mesh.position.y=e,this.mesh.position.z=n}},{key:"change_color",value:function(t){this.mesh.material.color.setHex(t)}},{key:"set_visible",value:function(t){this.mesh.visible=t}}]),t}(),Hs=function(){function t(e,n,i){Ns(this,t),this.source=e,this.target=n;var r=[new Xt(this.source.mesh.position.x,this.source.mesh.position.y,this.source.mesh.position.z),new Xt(this.target.mesh.position.x,this.target.mesh.position.y,this.target.mesh.position.z)],a=(new Rn).setFromPoints(r),s=new Ka({color:0});this.mesh=new ns(a,s),i.add(this.mesh),this.set_visible(!1)}return Fs(t,[{key:"update",value:function(){this.mesh.geometry.attributes.position.array[0]=this.source.mesh.position.x,this.mesh.geometry.attributes.position.array[1]=this.source.mesh.position.y,this.mesh.geometry.attributes.position.array[2]=this.source.mesh.position.z,this.mesh.geometry.attributes.position.array[3]=this.target.mesh.position.x,this.mesh.geometry.attributes.position.array[4]=this.target.mesh.position.y,this.mesh.geometry.attributes.position.array[5]=this.target.mesh.position.z,this.mesh.geometry.attributes.position.needsUpdate=!0}},{key:"set_visible",value:function(t){this.mesh.visible=t}},{key:"destroy",value:function(){this.mesh.geometry.dispose(),this.mesh.material.dispose()}}]),t}(),Vs=function(){function t(e,n){Ns(this,t),this.source=e,this.target=e;var i=new rs(.7,.03,3,5),r=new as({color:0});this.mesh=new jn(i,r),this.mesh.rotation.x=Math.PI/2,n.add(this.mesh),this.set_visible(!1),this.update()}return Fs(t,[{key:"update",value:function(){this.mesh.position.x=this.source.mesh.position.x,this.mesh.position.y=this.source.mesh.position.y+1,this.mesh.position.z=this.source.mesh.position.z}},{key:"set_visible",value:function(t){this.mesh.visible=t}},{key:"destroy",value:function(){this.mesh.geometry.dispose(),this.mesh.material.dispose()}}]),t}();const Gs=zs,ks={type:"change"},Ws={type:"start"},Xs={type:"end"},js=new ye,Ys=new ci,qs=Math.cos(70*gt);class $s extends at{constructor(t,e){super(),this.object=t,this.domElement=e,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new Xt,this.cursor=new Xt,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:0,MIDDLE:1,RIGHT:2},this.touches={ONE:0,TWO:2},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return s.phi},this.getAzimuthalAngle=function(){return s.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(t){t.addEventListener("keydown",j),this._domElementKeyEvents=t},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",j),this._domElementKeyEvents=null},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(ks),n.update(),r=i.NONE},this.update=function(){const e=new Xt,h=(new Wt).setFromUnitVectors(t.up,new Xt(0,1,0)),u=h.clone().invert(),d=new Xt,p=new Wt,f=new Xt,m=2*Math.PI;return function(g=null){const _=n.object.position;e.copy(_).sub(n.target),e.applyQuaternion(h),s.setFromVector3(e),n.autoRotate&&r===i.NONE&&T(function(t){return null!==t?2*Math.PI/60*n.autoRotateSpeed*t:2*Math.PI/60/60*n.autoRotateSpeed}(g)),n.enableDamping?(s.theta+=o.theta*n.dampingFactor,s.phi+=o.phi*n.dampingFactor):(s.theta+=o.theta,s.phi+=o.phi);let v=n.minAzimuthAngle,E=n.maxAzimuthAngle;isFinite(v)&&isFinite(E)&&(v<-Math.PI?v+=m:v>Math.PI&&(v-=m),E<-Math.PI?E+=m:E>Math.PI&&(E-=m),s.theta=v<=E?Math.max(v,Math.min(E,s.theta)):s.theta>(v+E)/2?Math.max(v,s.theta):Math.min(E,s.theta)),s.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,s.phi)),s.makeSafe(),!0===n.enableDamping?n.target.addScaledVector(c,n.dampingFactor):n.target.add(c),n.target.sub(n.cursor),n.target.clampLength(n.minTargetRadius,n.maxTargetRadius),n.target.add(n.cursor),n.zoomToCursor&&M||n.object.isOrthographicCamera?s.radius=D(s.radius):s.radius=D(s.radius*l),e.setFromSpherical(s),e.applyQuaternion(u),_.copy(n.target).add(e),n.object.lookAt(n.target),!0===n.enableDamping?(o.theta*=1-n.dampingFactor,o.phi*=1-n.dampingFactor,c.multiplyScalar(1-n.dampingFactor)):(o.set(0,0,0),c.set(0,0,0));let S=!1;if(n.zoomToCursor&&M){let i=null;if(n.object.isPerspectiveCamera){const t=e.length();i=D(t*l);const r=t-i;n.object.position.addScaledVector(x,r),n.object.updateMatrixWorld()}else if(n.object.isOrthographicCamera){const t=new Xt(y.x,y.y,0);t.unproject(n.object),n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/l)),n.object.updateProjectionMatrix(),S=!0;const r=new Xt(y.x,y.y,0);r.unproject(n.object),n.object.position.sub(r).add(t),n.object.updateMatrixWorld(),i=e.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),n.zoomToCursor=!1;null!==i&&(this.screenSpacePanning?n.target.set(0,0,-1).transformDirection(n.object.matrix).multiplyScalar(i).add(n.object.position):(js.origin.copy(n.object.position),js.direction.set(0,0,-1).transformDirection(n.object.matrix),Math.abs(n.object.up.dot(js.direction))<qs?t.lookAt(n.target):(Ys.setFromNormalAndCoplanarPoint(n.object.up,n.target),js.intersectPlane(Ys,n.target))))}else n.object.isOrthographicCamera&&(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/l)),n.object.updateProjectionMatrix(),S=!0);return l=1,M=!1,!!(S||d.distanceToSquared(n.object.position)>a||8*(1-p.dot(n.object.quaternion))>a||f.distanceToSquared(n.target)>0)&&(n.dispatchEvent(ks),d.copy(n.object.position),p.copy(n.object.quaternion),f.copy(n.target),!0)}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",Y),n.domElement.removeEventListener("pointerdown",G),n.domElement.removeEventListener("pointercancel",W),n.domElement.removeEventListener("wheel",X),n.domElement.removeEventListener("pointermove",k),n.domElement.removeEventListener("pointerup",W),null!==n._domElementKeyEvents&&(n._domElementKeyEvents.removeEventListener("keydown",j),n._domElementKeyEvents=null)};const n=this,i={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let r=i.NONE;const a=1e-6,s=new Ps,o=new Ps;let l=1;const c=new Xt,h=new _t,u=new _t,d=new _t,p=new _t,f=new _t,m=new _t,g=new _t,_=new _t,v=new _t,x=new Xt,y=new _t;let M=!1;const E=[],S={};function b(){return Math.pow(.95,n.zoomSpeed)}function T(t){o.theta-=t}function w(t){o.phi-=t}const A=function(){const t=new Xt;return function(e,n){t.setFromMatrixColumn(n,0),t.multiplyScalar(-e),c.add(t)}}(),R=function(){const t=new Xt;return function(e,i){!0===n.screenSpacePanning?t.setFromMatrixColumn(i,1):(t.setFromMatrixColumn(i,0),t.crossVectors(n.object.up,t)),t.multiplyScalar(e),c.add(t)}}(),C=function(){const t=new Xt;return function(e,i){const r=n.domElement;if(n.object.isPerspectiveCamera){const a=n.object.position;t.copy(a).sub(n.target);let s=t.length();s*=Math.tan(n.object.fov/2*Math.PI/180),A(2*e*s/r.clientHeight,n.object.matrix),R(2*i*s/r.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(A(e*(n.object.right-n.object.left)/n.object.zoom/r.clientWidth,n.object.matrix),R(i*(n.object.top-n.object.bottom)/n.object.zoom/r.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function L(t){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?l/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function P(t){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?l*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function U(t){if(!n.zoomToCursor)return;M=!0;const e=n.domElement.getBoundingClientRect(),i=t.clientX-e.left,r=t.clientY-e.top,a=e.width,s=e.height;y.x=i/a*2-1,y.y=-r/s*2+1,x.set(y.x,y.y,1).unproject(n.object).sub(n.object.position).normalize()}function D(t){return Math.max(n.minDistance,Math.min(n.maxDistance,t))}function I(t){h.set(t.clientX,t.clientY)}function N(t){p.set(t.clientX,t.clientY)}function O(){if(1===E.length)h.set(E[0].pageX,E[0].pageY);else{const t=.5*(E[0].pageX+E[1].pageX),e=.5*(E[0].pageY+E[1].pageY);h.set(t,e)}}function F(){if(1===E.length)p.set(E[0].pageX,E[0].pageY);else{const t=.5*(E[0].pageX+E[1].pageX),e=.5*(E[0].pageY+E[1].pageY);p.set(t,e)}}function z(){const t=E[0].pageX-E[1].pageX,e=E[0].pageY-E[1].pageY,n=Math.sqrt(t*t+e*e);g.set(0,n)}function B(t){if(1==E.length)u.set(t.pageX,t.pageY);else{const e=$(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);u.set(n,i)}d.subVectors(u,h).multiplyScalar(n.rotateSpeed);const e=n.domElement;T(2*Math.PI*d.x/e.clientHeight),w(2*Math.PI*d.y/e.clientHeight),h.copy(u)}function H(t){if(1===E.length)f.set(t.pageX,t.pageY);else{const e=$(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);f.set(n,i)}m.subVectors(f,p).multiplyScalar(n.panSpeed),C(m.x,m.y),p.copy(f)}function V(t){const e=$(t),i=t.pageX-e.x,r=t.pageY-e.y,a=Math.sqrt(i*i+r*r);_.set(0,a),v.set(0,Math.pow(_.y/g.y,n.zoomSpeed)),L(v.y),g.copy(_)}function G(t){!1!==n.enabled&&(0===E.length&&(n.domElement.setPointerCapture(t.pointerId),n.domElement.addEventListener("pointermove",k),n.domElement.addEventListener("pointerup",W)),function(t){E.push(t)}(t),"touch"===t.pointerType?function(t){switch(q(t),E.length){case 1:switch(n.touches.ONE){case 0:if(!1===n.enableRotate)return;O(),r=i.TOUCH_ROTATE;break;case 1:if(!1===n.enablePan)return;F(),r=i.TOUCH_PAN;break;default:r=i.NONE}break;case 2:switch(n.touches.TWO){case 2:if(!1===n.enableZoom&&!1===n.enablePan)return;n.enableZoom&&z(),n.enablePan&&F(),r=i.TOUCH_DOLLY_PAN;break;case 3:if(!1===n.enableZoom&&!1===n.enableRotate)return;n.enableZoom&&z(),n.enableRotate&&O(),r=i.TOUCH_DOLLY_ROTATE;break;default:r=i.NONE}break;default:r=i.NONE}r!==i.NONE&&n.dispatchEvent(Ws)}(t):function(t){let e;switch(t.button){case 0:e=n.mouseButtons.LEFT;break;case 1:e=n.mouseButtons.MIDDLE;break;case 2:e=n.mouseButtons.RIGHT;break;default:e=-1}switch(e){case 1:if(!1===n.enableZoom)return;!function(t){U(t),g.set(t.clientX,t.clientY)}(t),r=i.DOLLY;break;case 0:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===n.enablePan)return;N(t),r=i.PAN}else{if(!1===n.enableRotate)return;I(t),r=i.ROTATE}break;case 2:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===n.enableRotate)return;I(t),r=i.ROTATE}else{if(!1===n.enablePan)return;N(t),r=i.PAN}break;default:r=i.NONE}r!==i.NONE&&n.dispatchEvent(Ws)}(t))}function k(t){!1!==n.enabled&&("touch"===t.pointerType?function(t){switch(q(t),r){case i.TOUCH_ROTATE:if(!1===n.enableRotate)return;B(t),n.update();break;case i.TOUCH_PAN:if(!1===n.enablePan)return;H(t),n.update();break;case i.TOUCH_DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(t){n.enableZoom&&V(t),n.enablePan&&H(t)}(t),n.update();break;case i.TOUCH_DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(t){n.enableZoom&&V(t),n.enableRotate&&B(t)}(t),n.update();break;default:r=i.NONE}}(t):function(t){switch(r){case i.ROTATE:if(!1===n.enableRotate)return;!function(t){u.set(t.clientX,t.clientY),d.subVectors(u,h).multiplyScalar(n.rotateSpeed);const e=n.domElement;T(2*Math.PI*d.x/e.clientHeight),w(2*Math.PI*d.y/e.clientHeight),h.copy(u),n.update()}(t);break;case i.DOLLY:if(!1===n.enableZoom)return;!function(t){_.set(t.clientX,t.clientY),v.subVectors(_,g),v.y>0?L(b()):v.y<0&&P(b()),g.copy(_),n.update()}(t);break;case i.PAN:if(!1===n.enablePan)return;!function(t){f.set(t.clientX,t.clientY),m.subVectors(f,p).multiplyScalar(n.panSpeed),C(m.x,m.y),p.copy(f),n.update()}(t)}}(t))}function W(t){!function(t){delete S[t.pointerId];for(let e=0;e<E.length;e++)if(E[e].pointerId==t.pointerId)return void E.splice(e,1)}(t),0===E.length&&(n.domElement.releasePointerCapture(t.pointerId),n.domElement.removeEventListener("pointermove",k),n.domElement.removeEventListener("pointerup",W)),n.dispatchEvent(Xs),r=i.NONE}function X(t){!1!==n.enabled&&!1!==n.enableZoom&&r===i.NONE&&(t.preventDefault(),n.dispatchEvent(Ws),function(t){U(t),t.deltaY<0?P(b()):t.deltaY>0&&L(b()),n.update()}(t),n.dispatchEvent(Xs))}function j(t){!1!==n.enabled&&!1!==n.enablePan&&function(t){let e=!1;switch(t.code){case n.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?w(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):C(0,n.keyPanSpeed),e=!0;break;case n.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?w(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):C(0,-n.keyPanSpeed),e=!0;break;case n.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?T(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):C(n.keyPanSpeed,0),e=!0;break;case n.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?T(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):C(-n.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),n.update())}(t)}function Y(t){!1!==n.enabled&&t.preventDefault()}function q(t){let e=S[t.pointerId];void 0===e&&(e=new _t,S[t.pointerId]=e),e.set(t.pageX,t.pageY)}function $(t){const e=t.pointerId===E[0].pointerId?E[1]:E[0];return S[e.pointerId]}n.domElement.addEventListener("contextmenu",Y),n.domElement.addEventListener("pointerdown",G),n.domElement.addEventListener("pointercancel",W),n.domElement.addEventListener("wheel",X,{passive:!1}),this.update()}}const Ks=class{static isWebGLAvailable(){try{const t=document.createElement("canvas");return!(!window.WebGLRenderingContext||!t.getContext("webgl")&&!t.getContext("experimental-webgl"))}catch(t){return!1}}static isWebGL2Available(){try{const t=document.createElement("canvas");return!(!window.WebGL2RenderingContext||!t.getContext("webgl2"))}catch(t){return!1}}static isColorSpaceAvailable(t){try{const e=document.createElement("canvas"),n=window.WebGL2RenderingContext&&e.getContext("webgl2");return n.drawingBufferColorSpace=t,n.drawingBufferColorSpace===t}catch(t){return!1}}static getWebGLErrorMessage(){return this.getErrorMessage(1)}static getWebGL2ErrorMessage(){return this.getErrorMessage(2)}static getErrorMessage(t){const e={1:window.WebGLRenderingContext,2:window.WebGL2RenderingContext};let n='Your $0 does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">$1</a>';const i=document.createElement("div");return i.id="webglmessage",i.style.fontFamily="monospace",i.style.fontSize="13px",i.style.fontWeight="normal",i.style.textAlign="center",i.style.background="#fff",i.style.color="#000",i.style.padding="1.5em",i.style.width="400px",i.style.margin="5em auto 0",n=e[t]?n.replace("$0","graphics card"):n.replace("$0","browser"),n=n.replace("$1",{1:"WebGL",2:"WebGL 2"}[t]),i.innerHTML=n,i}};function Zs(t){return Zs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Zs(t)}function Js(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(void 0,r=function(t,e){if("object"!==Zs(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!==Zs(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i.key),"symbol"===Zs(r)?r:String(r)),i)}var r}function Qs(t,e,n){return e&&Js(t.prototype,e),n&&Js(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}const to=Qs((function t(){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),Ks.isWebGLAvailable()){this.scene=new $a,this.camera=new ei(75,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.z=50,this.camera.position.y=50,this.renderer=new qa,this.renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(this.renderer.domElement),this.scene.background=new hn(8900331);var e=new _s(16777215,9276813,1);e.position.set(0,20,0),this.scene.add(e);var n=new Ss(16777215,3);n.position.set(-3,10,-10),this.scene.add(n),this.controls=new $s(this.camera,this.renderer.domElement),this.controls.target.set(0,0,0)}else{var i=Ks.getWebGLErrorMessage();document.getElementById("container").appendChild(i)}}));class eo{constructor(t,e,n,i,r="div"){this.parent=t,this.object=e,this.property=n,this._disabled=!1,this._hidden=!1,this.initialValue=this.getValue(),this.domElement=document.createElement("div"),this.domElement.classList.add("controller"),this.domElement.classList.add(i),this.$name=document.createElement("div"),this.$name.classList.add("name"),eo.nextNameID=eo.nextNameID||0,this.$name.id="lil-gui-name-"+ ++eo.nextNameID,this.$widget=document.createElement(r),this.$widget.classList.add("widget"),this.$disable=this.$widget,this.domElement.appendChild(this.$name),this.domElement.appendChild(this.$widget),this.parent.children.push(this),this.parent.controllers.push(this),this.parent.$children.appendChild(this.domElement),this._listenCallback=this._listenCallback.bind(this),this.name(n)}name(t){return this._name=t,this.$name.innerHTML=t,this}onChange(t){return this._onChange=t,this}_callOnChange(){this.parent._callOnChange(this),void 0!==this._onChange&&this._onChange.call(this,this.getValue()),this._changed=!0}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(){this._changed&&(this.parent._callOnFinishChange(this),void 0!==this._onFinishChange&&this._onFinishChange.call(this,this.getValue())),this._changed=!1}reset(){return this.setValue(this.initialValue),this._callOnFinishChange(),this}enable(t=!0){return this.disable(!t)}disable(t=!0){return t===this._disabled||(this._disabled=t,this.domElement.classList.toggle("disabled",t),this.$disable.toggleAttribute("disabled",t)),this}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}options(t){const e=this.parent.add(this.object,this.property,t);return e.name(this._name),this.destroy(),e}min(t){return this}max(t){return this}step(t){return this}decimals(t){return this}listen(t=!0){return this._listening=t,void 0!==this._listenCallbackID&&(cancelAnimationFrame(this._listenCallbackID),this._listenCallbackID=void 0),this._listening&&this._listenCallback(),this}_listenCallback(){this._listenCallbackID=requestAnimationFrame(this._listenCallback);const t=this.save();t!==this._listenPrevValue&&this.updateDisplay(),this._listenPrevValue=t}getValue(){return this.object[this.property]}setValue(t){return this.object[this.property]=t,this._callOnChange(),this.updateDisplay(),this}updateDisplay(){return this}load(t){return this.setValue(t),this._callOnFinishChange(),this}save(){return this.getValue()}destroy(){this.listen(!1),this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.controllers.splice(this.parent.controllers.indexOf(this),1),this.parent.$children.removeChild(this.domElement)}}class no extends eo{constructor(t,e,n){super(t,e,n,"boolean","label"),this.$input=document.createElement("input"),this.$input.setAttribute("type","checkbox"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$input.addEventListener("change",(()=>{this.setValue(this.$input.checked),this._callOnFinishChange()})),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.checked=this.getValue(),this}}function io(t){let e,n;return(e=t.match(/(#|0x)?([a-f0-9]{6})/i))?n=e[2]:(e=t.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/))?n=parseInt(e[1]).toString(16).padStart(2,0)+parseInt(e[2]).toString(16).padStart(2,0)+parseInt(e[3]).toString(16).padStart(2,0):(e=t.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i))&&(n=e[1]+e[1]+e[2]+e[2]+e[3]+e[3]),!!n&&"#"+n}const ro={isPrimitive:!0,match:t=>"string"==typeof t,fromHexString:io,toHexString:io},ao={isPrimitive:!0,match:t=>"number"==typeof t,fromHexString:t=>parseInt(t.substring(1),16),toHexString:t=>"#"+t.toString(16).padStart(6,0)},so={isPrimitive:!1,match:Array.isArray,fromHexString(t,e,n=1){const i=ao.fromHexString(t);e[0]=(i>>16&255)/255*n,e[1]=(i>>8&255)/255*n,e[2]=(255&i)/255*n},toHexString:([t,e,n],i=1)=>ao.toHexString(t*(i=255/i)<<16^e*i<<8^n*i<<0)},oo={isPrimitive:!1,match:t=>Object(t)===t,fromHexString(t,e,n=1){const i=ao.fromHexString(t);e.r=(i>>16&255)/255*n,e.g=(i>>8&255)/255*n,e.b=(255&i)/255*n},toHexString:({r:t,g:e,b:n},i=1)=>ao.toHexString(t*(i=255/i)<<16^e*i<<8^n*i<<0)},lo=[ro,ao,so,oo];class co extends eo{constructor(t,e,n,i){var r;super(t,e,n,"color"),this.$input=document.createElement("input"),this.$input.setAttribute("type","color"),this.$input.setAttribute("tabindex",-1),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$text=document.createElement("input"),this.$text.setAttribute("type","text"),this.$text.setAttribute("spellcheck","false"),this.$text.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$display.appendChild(this.$input),this.$widget.appendChild(this.$display),this.$widget.appendChild(this.$text),this._format=(r=this.initialValue,lo.find((t=>t.match(r)))),this._rgbScale=i,this._initialValueHexString=this.save(),this._textFocused=!1,this.$input.addEventListener("input",(()=>{this._setValueFromHexString(this.$input.value)})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$text.addEventListener("input",(()=>{const t=io(this.$text.value);t&&this._setValueFromHexString(t)})),this.$text.addEventListener("focus",(()=>{this._textFocused=!0,this.$text.select()})),this.$text.addEventListener("blur",(()=>{this._textFocused=!1,this.updateDisplay(),this._callOnFinishChange()})),this.$disable=this.$text,this.updateDisplay()}reset(){return this._setValueFromHexString(this._initialValueHexString),this}_setValueFromHexString(t){if(this._format.isPrimitive){const e=this._format.fromHexString(t);this.setValue(e)}else this._format.fromHexString(t,this.getValue(),this._rgbScale),this._callOnChange(),this.updateDisplay()}save(){return this._format.toHexString(this.getValue(),this._rgbScale)}load(t){return this._setValueFromHexString(t),this._callOnFinishChange(),this}updateDisplay(){return this.$input.value=this._format.toHexString(this.getValue(),this._rgbScale),this._textFocused||(this.$text.value=this.$input.value.substring(1)),this.$display.style.backgroundColor=this.$input.value,this}}class ho extends eo{constructor(t,e,n){super(t,e,n,"function"),this.$button=document.createElement("button"),this.$button.appendChild(this.$name),this.$widget.appendChild(this.$button),this.$button.addEventListener("click",(t=>{t.preventDefault(),this.getValue().call(this.object)})),this.$button.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$disable=this.$button}}class uo extends eo{constructor(t,e,n,i,r,a){super(t,e,n,"number"),this._initInput(),this.min(i),this.max(r);const s=void 0!==a;this.step(s?a:this._getImplicitStep(),s),this.updateDisplay()}decimals(t){return this._decimals=t,this.updateDisplay(),this}min(t){return this._min=t,this._onUpdateMinMax(),this}max(t){return this._max=t,this._onUpdateMinMax(),this}step(t,e=!0){return this._step=t,this._stepExplicit=e,this}updateDisplay(){const t=this.getValue();if(this._hasSlider){let e=(t-this._min)/(this._max-this._min);e=Math.max(0,Math.min(e,1)),this.$fill.style.width=100*e+"%"}return this._inputFocused||(this.$input.value=void 0===this._decimals?t:t.toFixed(this._decimals)),this}_initInput(){this.$input=document.createElement("input"),this.$input.setAttribute("type","number"),this.$input.setAttribute("step","any"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$disable=this.$input;const t=t=>{const e=parseFloat(this.$input.value);isNaN(e)||(this._snapClampSetValue(e+t),this.$input.value=this.getValue())};let e,n,i,r,a,s=!1;const o=t=>{if(s){const i=t.clientX-e,r=t.clientY-n;Math.abs(r)>5?(t.preventDefault(),this.$input.blur(),s=!1,this._setDraggingStyle(!0,"vertical")):Math.abs(i)>5&&l()}if(!s){const e=t.clientY-i;a-=e*this._step*this._arrowKeyMultiplier(t),r+a>this._max?a=this._max-r:r+a<this._min&&(a=this._min-r),this._snapClampSetValue(r+a)}i=t.clientY},l=()=>{this._setDraggingStyle(!1,"vertical"),this._callOnFinishChange(),window.removeEventListener("mousemove",o),window.removeEventListener("mouseup",l)};this.$input.addEventListener("input",(()=>{let t=parseFloat(this.$input.value);isNaN(t)||(this._stepExplicit&&(t=this._snap(t)),this.setValue(this._clamp(t)))})),this.$input.addEventListener("keydown",(e=>{"Enter"===e.code&&this.$input.blur(),"ArrowUp"===e.code&&(e.preventDefault(),t(this._step*this._arrowKeyMultiplier(e))),"ArrowDown"===e.code&&(e.preventDefault(),t(this._step*this._arrowKeyMultiplier(e)*-1))})),this.$input.addEventListener("wheel",(e=>{this._inputFocused&&(e.preventDefault(),t(this._step*this._normalizeMouseWheel(e)))}),{passive:!1}),this.$input.addEventListener("mousedown",(t=>{e=t.clientX,n=i=t.clientY,s=!0,r=this.getValue(),a=0,window.addEventListener("mousemove",o),window.addEventListener("mouseup",l)})),this.$input.addEventListener("focus",(()=>{this._inputFocused=!0})),this.$input.addEventListener("blur",(()=>{this._inputFocused=!1,this.updateDisplay(),this._callOnFinishChange()}))}_initSlider(){this._hasSlider=!0,this.$slider=document.createElement("div"),this.$slider.classList.add("slider"),this.$fill=document.createElement("div"),this.$fill.classList.add("fill"),this.$slider.appendChild(this.$fill),this.$widget.insertBefore(this.$slider,this.$input),this.domElement.classList.add("hasSlider");const t=t=>{const e=this.$slider.getBoundingClientRect();let n=(i=t,r=e.left,a=e.right,s=this._min,(i-r)/(a-r)*(this._max-s)+s);var i,r,a,s;this._snapClampSetValue(n)},e=e=>{t(e.clientX)},n=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("mousemove",e),window.removeEventListener("mouseup",n)};let i,r,a=!1;const s=e=>{e.preventDefault(),this._setDraggingStyle(!0),t(e.touches[0].clientX),a=!1},o=e=>{if(a){const t=e.touches[0].clientX-i,n=e.touches[0].clientY-r;Math.abs(t)>Math.abs(n)?s(e):(window.removeEventListener("touchmove",o),window.removeEventListener("touchend",l))}else e.preventDefault(),t(e.touches[0].clientX)},l=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("touchmove",o),window.removeEventListener("touchend",l)},c=this._callOnFinishChange.bind(this);let h;this.$slider.addEventListener("mousedown",(i=>{this._setDraggingStyle(!0),t(i.clientX),window.addEventListener("mousemove",e),window.addEventListener("mouseup",n)})),this.$slider.addEventListener("touchstart",(t=>{t.touches.length>1||(this._hasScrollBar?(i=t.touches[0].clientX,r=t.touches[0].clientY,a=!0):s(t),window.addEventListener("touchmove",o,{passive:!1}),window.addEventListener("touchend",l))}),{passive:!1}),this.$slider.addEventListener("wheel",(t=>{if(Math.abs(t.deltaX)<Math.abs(t.deltaY)&&this._hasScrollBar)return;t.preventDefault();const e=this._normalizeMouseWheel(t)*this._step;this._snapClampSetValue(this.getValue()+e),this.$input.value=this.getValue(),clearTimeout(h),h=setTimeout(c,400)}),{passive:!1})}_setDraggingStyle(t,e="horizontal"){this.$slider&&this.$slider.classList.toggle("active",t),document.body.classList.toggle("lil-gui-dragging",t),document.body.classList.toggle("lil-gui-"+e,t)}_getImplicitStep(){return this._hasMin&&this._hasMax?(this._max-this._min)/1e3:.1}_onUpdateMinMax(){!this._hasSlider&&this._hasMin&&this._hasMax&&(this._stepExplicit||this.step(this._getImplicitStep(),!1),this._initSlider(),this.updateDisplay())}_normalizeMouseWheel(t){let{deltaX:e,deltaY:n}=t;return Math.floor(t.deltaY)!==t.deltaY&&t.wheelDelta&&(e=0,n=-t.wheelDelta/120,n*=this._stepExplicit?1:10),e+-n}_arrowKeyMultiplier(t){let e=this._stepExplicit?1:10;return t.shiftKey?e*=10:t.altKey&&(e/=10),e}_snap(t){const e=Math.round(t/this._step)*this._step;return parseFloat(e.toPrecision(15))}_clamp(t){return t<this._min&&(t=this._min),t>this._max&&(t=this._max),t}_snapClampSetValue(t){this.setValue(this._clamp(this._snap(t)))}get _hasScrollBar(){const t=this.parent.root.$children;return t.scrollHeight>t.clientHeight}get _hasMin(){return void 0!==this._min}get _hasMax(){return void 0!==this._max}}class po extends eo{constructor(t,e,n,i){super(t,e,n,"option"),this.$select=document.createElement("select"),this.$select.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this._values=Array.isArray(i)?i:Object.values(i),this._names=Array.isArray(i)?i:Object.keys(i),this._names.forEach((t=>{const e=document.createElement("option");e.innerHTML=t,this.$select.appendChild(e)})),this.$select.addEventListener("change",(()=>{this.setValue(this._values[this.$select.selectedIndex]),this._callOnFinishChange()})),this.$select.addEventListener("focus",(()=>{this.$display.classList.add("focus")})),this.$select.addEventListener("blur",(()=>{this.$display.classList.remove("focus")})),this.$widget.appendChild(this.$select),this.$widget.appendChild(this.$display),this.$disable=this.$select,this.updateDisplay()}updateDisplay(){const t=this.getValue(),e=this._values.indexOf(t);return this.$select.selectedIndex=e,this.$display.innerHTML=-1===e?t:this._names[e],this}}class fo extends eo{constructor(t,e,n){super(t,e,n,"string"),this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$input.addEventListener("input",(()=>{this.setValue(this.$input.value)})),this.$input.addEventListener("keydown",(t=>{"Enter"===t.code&&this.$input.blur()})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$widget.appendChild(this.$input),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.value=this.getValue(),this}}let mo=!1;class go{constructor({parent:t,autoPlace:e=void 0===t,container:n,width:i,title:r="Controls",injectStyles:a=!0,touchStyles:s=!0}={}){if(this.parent=t,this.root=t?t.root:this,this.children=[],this.controllers=[],this.folders=[],this._closed=!1,this._hidden=!1,this.domElement=document.createElement("div"),this.domElement.classList.add("lil-gui"),this.$title=document.createElement("div"),this.$title.classList.add("title"),this.$title.setAttribute("role","button"),this.$title.setAttribute("aria-expanded",!0),this.$title.setAttribute("tabindex",0),this.$title.addEventListener("click",(()=>this.openAnimated(this._closed))),this.$title.addEventListener("keydown",(t=>{"Enter"!==t.code&&"Space"!==t.code||(t.preventDefault(),this.$title.click())})),this.$title.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$children=document.createElement("div"),this.$children.classList.add("children"),this.domElement.appendChild(this.$title),this.domElement.appendChild(this.$children),this.title(r),s&&this.domElement.classList.add("allow-touch-styles"),this.parent)return this.parent.children.push(this),this.parent.folders.push(this),void this.parent.$children.appendChild(this.domElement);this.domElement.classList.add("root"),!mo&&a&&(function(t){const e=document.createElement("style");e.innerHTML='.lil-gui{--background-color:#1f1f1f;--text-color:#ebebeb;--title-background-color:#111;--title-text-color:#ebebeb;--widget-color:#424242;--hover-color:#4f4f4f;--focus-color:#595959;--number-color:#2cc9ff;--string-color:#a2db3c;--font-size:11px;--input-font-size:11px;--font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Arial,sans-serif;--font-family-mono:Menlo,Monaco,Consolas,"Droid Sans Mono",monospace;--padding:4px;--spacing:4px;--widget-height:20px;--name-width:45%;--slider-knob-width:2px;--slider-input-width:27%;--color-input-width:27%;--slider-input-min-width:45px;--color-input-min-width:45px;--folder-indent:7px;--widget-padding:0 0 0 3px;--widget-border-radius:2px;--checkbox-size:calc(var(--widget-height)*0.75);--scrollbar-width:5px;background-color:var(--background-color);color:var(--text-color);font-family:var(--font-family);font-size:var(--font-size);font-style:normal;font-weight:400;line-height:1;text-align:left;touch-action:manipulation;user-select:none;-webkit-user-select:none}.lil-gui,.lil-gui *{box-sizing:border-box;margin:0;padding:0}.lil-gui.root{display:flex;flex-direction:column;width:var(--width,245px)}.lil-gui.root>.title{background:var(--title-background-color);color:var(--title-text-color)}.lil-gui.root>.children{overflow-x:hidden;overflow-y:auto}.lil-gui.root>.children::-webkit-scrollbar{background:var(--background-color);height:var(--scrollbar-width);width:var(--scrollbar-width)}.lil-gui.root>.children::-webkit-scrollbar-thumb{background:var(--focus-color);border-radius:var(--scrollbar-width)}.lil-gui.force-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}.lil-gui.autoPlace{max-height:100%;position:fixed;right:15px;top:0;z-index:1001}.lil-gui .controller{align-items:center;display:flex;margin:var(--spacing) 0;padding:0 var(--padding)}.lil-gui .controller.disabled{opacity:.5}.lil-gui .controller.disabled,.lil-gui .controller.disabled *{pointer-events:none!important}.lil-gui .controller>.name{flex-shrink:0;line-height:var(--widget-height);min-width:var(--name-width);padding-right:var(--spacing);white-space:pre}.lil-gui .controller .widget{align-items:center;display:flex;min-height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.string input{color:var(--string-color)}.lil-gui .controller.boolean .widget{cursor:pointer}.lil-gui .controller.color .display{border-radius:var(--widget-border-radius);height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.color input[type=color]{cursor:pointer;height:100%;opacity:0;width:100%}.lil-gui .controller.color input[type=text]{flex-shrink:0;font-family:var(--font-family-mono);margin-left:var(--spacing);min-width:var(--color-input-min-width);width:var(--color-input-width)}.lil-gui .controller.option select{max-width:100%;opacity:0;position:absolute;width:100%}.lil-gui .controller.option .display{background:var(--widget-color);border-radius:var(--widget-border-radius);height:var(--widget-height);line-height:var(--widget-height);max-width:100%;overflow:hidden;padding-left:.55em;padding-right:1.75em;pointer-events:none;position:relative;word-break:break-all}.lil-gui .controller.option .display.active{background:var(--focus-color)}.lil-gui .controller.option .display:after{bottom:0;content:"↕";font-family:lil-gui;padding-right:.375em;position:absolute;right:0;top:0}.lil-gui .controller.option .widget,.lil-gui .controller.option select{cursor:pointer}.lil-gui .controller.number input{color:var(--number-color)}.lil-gui .controller.number.hasSlider input{flex-shrink:0;margin-left:var(--spacing);min-width:var(--slider-input-min-width);width:var(--slider-input-width)}.lil-gui .controller.number .slider{background-color:var(--widget-color);border-radius:var(--widget-border-radius);cursor:ew-resize;height:var(--widget-height);overflow:hidden;padding-right:var(--slider-knob-width);touch-action:pan-y;width:100%}.lil-gui .controller.number .slider.active{background-color:var(--focus-color)}.lil-gui .controller.number .slider.active .fill{opacity:.95}.lil-gui .controller.number .fill{border-right:var(--slider-knob-width) solid var(--number-color);box-sizing:content-box;height:100%}.lil-gui-dragging .lil-gui{--hover-color:var(--widget-color)}.lil-gui-dragging *{cursor:ew-resize!important}.lil-gui-dragging.lil-gui-vertical *{cursor:ns-resize!important}.lil-gui .title{--title-height:calc(var(--widget-height) + var(--spacing)*1.25);-webkit-tap-highlight-color:transparent;text-decoration-skip:objects;cursor:pointer;font-weight:600;height:var(--title-height);line-height:calc(var(--title-height) - 4px);outline:none;padding:0 var(--padding)}.lil-gui .title:before{content:"▾";display:inline-block;font-family:lil-gui;padding-right:2px}.lil-gui .title:active{background:var(--title-background-color);opacity:.75}.lil-gui.root>.title:focus{text-decoration:none!important}.lil-gui.closed>.title:before{content:"▸"}.lil-gui.closed>.children{opacity:0;transform:translateY(-7px)}.lil-gui.closed:not(.transition)>.children{display:none}.lil-gui.transition>.children{overflow:hidden;pointer-events:none;transition-duration:.3s;transition-property:height,opacity,transform;transition-timing-function:cubic-bezier(.2,.6,.35,1)}.lil-gui .children:empty:before{content:"Empty";display:block;font-style:italic;height:var(--widget-height);line-height:var(--widget-height);margin:var(--spacing) 0;opacity:.5;padding:0 var(--padding)}.lil-gui.root>.children>.lil-gui>.title{border-width:0;border-bottom:1px solid var(--widget-color);border-left:0 solid var(--widget-color);border-right:0 solid var(--widget-color);border-top:1px solid var(--widget-color);transition:border-color .3s}.lil-gui.root>.children>.lil-gui.closed>.title{border-bottom-color:transparent}.lil-gui+.controller{border-top:1px solid var(--widget-color);margin-top:0;padding-top:var(--spacing)}.lil-gui .lil-gui .lil-gui>.title{border:none}.lil-gui .lil-gui .lil-gui>.children{border:none;border-left:2px solid var(--widget-color);margin-left:var(--folder-indent)}.lil-gui .lil-gui .controller{border:none}.lil-gui input{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:0;border-radius:var(--widget-border-radius);color:var(--text-color);font-family:var(--font-family);font-size:var(--input-font-size);height:var(--widget-height);outline:none;width:100%}.lil-gui input:disabled{opacity:1}.lil-gui input[type=number],.lil-gui input[type=text]{padding:var(--widget-padding)}.lil-gui input[type=number]:focus,.lil-gui input[type=text]:focus{background:var(--focus-color)}.lil-gui input::-webkit-inner-spin-button,.lil-gui input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.lil-gui input[type=number]{-moz-appearance:textfield}.lil-gui input[type=checkbox]{appearance:none;-webkit-appearance:none;border-radius:var(--widget-border-radius);cursor:pointer;height:var(--checkbox-size);text-align:center;width:var(--checkbox-size)}.lil-gui input[type=checkbox]:checked:before{content:"✓";font-family:lil-gui;font-size:var(--checkbox-size);line-height:var(--checkbox-size)}.lil-gui button{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:1px solid var(--widget-color);border-radius:var(--widget-border-radius);color:var(--text-color);cursor:pointer;font-family:var(--font-family);font-size:var(--font-size);height:var(--widget-height);line-height:calc(var(--widget-height) - 4px);outline:none;text-align:center;text-transform:none;width:100%}.lil-gui button:active{background:var(--focus-color)}@font-face{font-family:lil-gui;src:url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff")}@media (pointer:coarse){.lil-gui.allow-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}}@media (hover:hover){.lil-gui .controller.color .display:hover:before{border:1px solid #fff9;border-radius:var(--widget-border-radius);bottom:0;content:" ";display:block;left:0;position:absolute;right:0;top:0}.lil-gui .controller.option .display.focus{background:var(--focus-color)}.lil-gui .controller.option .widget:hover .display{background:var(--hover-color)}.lil-gui .controller.number .slider:hover{background-color:var(--hover-color)}body:not(.lil-gui-dragging) .lil-gui .title:hover{background:var(--title-background-color);opacity:.85}.lil-gui .title:focus{text-decoration:underline var(--focus-color)}.lil-gui input:hover{background:var(--hover-color)}.lil-gui input:active{background:var(--focus-color)}.lil-gui input[type=checkbox]:focus{box-shadow:inset 0 0 0 1px var(--focus-color)}.lil-gui button:hover{background:var(--hover-color);border-color:var(--hover-color)}.lil-gui button:focus{border-color:var(--focus-color)}}';const n=document.querySelector("head link[rel=stylesheet], head style");n?document.head.insertBefore(e,n):document.head.appendChild(e)}(),mo=!0),n?n.appendChild(this.domElement):e&&(this.domElement.classList.add("autoPlace"),document.body.appendChild(this.domElement)),i&&this.domElement.style.setProperty("--width",i+"px"),this.domElement.addEventListener("keydown",(t=>t.stopPropagation())),this.domElement.addEventListener("keyup",(t=>t.stopPropagation()))}add(t,e,n,i,r){if(Object(n)===n)return new po(this,t,e,n);const a=t[e];switch(typeof a){case"number":return new uo(this,t,e,n,i,r);case"boolean":return new no(this,t,e);case"string":return new fo(this,t,e);case"function":return new ho(this,t,e)}console.error("gui.add failed\n\tproperty:",e,"\n\tobject:",t,"\n\tvalue:",a)}addColor(t,e,n=1){return new co(this,t,e,n)}addFolder(t){return new go({parent:this,title:t})}load(t,e=!0){return t.controllers&&this.controllers.forEach((e=>{e instanceof ho||e._name in t.controllers&&e.load(t.controllers[e._name])})),e&&t.folders&&this.folders.forEach((e=>{e._title in t.folders&&e.load(t.folders[e._title])})),this}save(t=!0){const e={controllers:{},folders:{}};return this.controllers.forEach((t=>{if(!(t instanceof ho)){if(t._name in e.controllers)throw new Error(`Cannot save GUI with duplicate property "${t._name}"`);e.controllers[t._name]=t.save()}})),t&&this.folders.forEach((t=>{if(t._title in e.folders)throw new Error(`Cannot save GUI with duplicate folder "${t._title}"`);e.folders[t._title]=t.save()})),e}open(t=!0){return this._closed=!t,this.$title.setAttribute("aria-expanded",!this._closed),this.domElement.classList.toggle("closed",this._closed),this}close(){return this.open(!1)}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}openAnimated(t=!0){return this._closed=!t,this.$title.setAttribute("aria-expanded",!this._closed),requestAnimationFrame((()=>{const e=this.$children.clientHeight;this.$children.style.height=e+"px",this.domElement.classList.add("transition");const n=t=>{t.target===this.$children&&(this.$children.style.height="",this.domElement.classList.remove("transition"),this.$children.removeEventListener("transitionend",n))};this.$children.addEventListener("transitionend",n);const i=t?this.$children.scrollHeight:0;this.domElement.classList.toggle("closed",!t),requestAnimationFrame((()=>{this.$children.style.height=i+"px"}))})),this}title(t){return this._title=t,this.$title.innerHTML=t,this}reset(t=!0){return(t?this.controllersRecursive():this.controllers).forEach((t=>t.reset())),this}onChange(t){return this._onChange=t,this}_callOnChange(t){this.parent&&this.parent._callOnChange(t),void 0!==this._onChange&&this._onChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(t){this.parent&&this.parent._callOnFinishChange(t),void 0!==this._onFinishChange&&this._onFinishChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}destroy(){this.parent&&(this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.folders.splice(this.parent.folders.indexOf(this),1)),this.domElement.parentElement&&this.domElement.parentElement.removeChild(this.domElement),Array.from(this.children).forEach((t=>t.destroy()))}controllersRecursive(){let t=Array.from(this.controllers);return this.folders.forEach((e=>{t=t.concat(e.controllersRecursive())})),t}foldersRecursive(){let t=Array.from(this.folders);return this.folders.forEach((e=>{t=t.concat(e.foldersRecursive())})),t}}var _o=function(){var t=0,e=document.createElement("div");function n(t){return e.appendChild(t.dom),t}function i(n){for(var i=0;i<e.children.length;i++)e.children[i].style.display=i===n?"block":"none";t=n}e.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",e.addEventListener("click",(function(n){n.preventDefault(),i(++t%e.children.length)}),!1);var r=(performance||Date).now(),a=r,s=0,o=n(new _o.Panel("FPS","#0ff","#002")),l=n(new _o.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var c=n(new _o.Panel("MB","#f08","#201"));return i(0),{REVISION:16,dom:e,addPanel:n,showPanel:i,begin:function(){r=(performance||Date).now()},end:function(){s++;var t=(performance||Date).now();if(l.update(t-r,200),t>=a+1e3&&(o.update(1e3*s/(t-a),100),a=t,s=0,c)){var e=performance.memory;c.update(e.usedJSHeapSize/1048576,e.jsHeapSizeLimit/1048576)}return t},update:function(){r=this.end()},domElement:e,setMode:i}};_o.Panel=function(t,e,n){var i=1/0,r=0,a=Math.round,s=a(window.devicePixelRatio||1),o=80*s,l=48*s,c=3*s,h=2*s,u=3*s,d=15*s,p=74*s,f=30*s,m=document.createElement("canvas");m.width=o,m.height=l,m.style.cssText="width:80px;height:48px";var g=m.getContext("2d");return g.font="bold "+9*s+"px Helvetica,Arial,sans-serif",g.textBaseline="top",g.fillStyle=n,g.fillRect(0,0,o,l),g.fillStyle=e,g.fillText(t,c,h),g.fillRect(u,d,p,f),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(u,d,p,f),{dom:m,update:function(l,_){i=Math.min(i,l),r=Math.max(r,l),g.fillStyle=n,g.globalAlpha=1,g.fillRect(0,0,o,d),g.fillStyle=e,g.fillText(a(l)+" "+t+" ("+a(i)+"-"+a(r)+")",c,h),g.drawImage(m,u+s,d,p-s,f,u,d,p-s,f),g.fillRect(u+p-s,d,s,f),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(u+p-s,d,s,a((1-l/_)*f))}}};const vo=_o,xo="[[0, 1], [2, 3], [2, 4], [5, 6], [5, 7], [8, 9], [10, 11], [12, 13], [12, 14], [15, 16], [17, 18], [12, 19], [20, 21], [20, 22], [23, 24], [23, 25], [23, 26], [23, 27], [23, 28], [23, 29], [23, 30], [23, 31], [23, 32], [23, 33], [23, 34], [23, 35], [23, 36], [23, 37], [23, 38], [23, 39], [23, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [41, 51], [52, 53], [54, 55], [54, 56], [54, 57], [54, 58], [54, 59], [60, 61], [54, 54], [62, 63], [64, 65], [62, 4], [66, 67], [68, 69], [42, 41], [70, 71], [72, 21], [71, 70], [73, 74], [75, 76], [75, 48], [77, 78], [77, 79], [80, 81], [80, 68], [19, 62], [82, 83], [22, 21], [82, 84], [21, 72], [41, 85], [41, 86], [41, 87], [82, 86], [88, 89], [90, 91], [92, 20], [41, 93], [41, 94], [41, 95], [89, 96], [89, 88], [97, 98], [97, 99], [97, 100], [97, 101], [97, 102], [103, 104], [51, 41], [82, 105], [90, 106], [62, 107], [108, 109], [108, 66], [108, 110], [108, 111], [108, 112], [113, 114], [115, 116], [117, 118], [76, 119], [17, 120], [82, 121], [122, 123], [14, 12], [124, 125], [13, 126], [127, 128], [127, 129], [127, 130], [131, 132], [40, 26], [40, 29], [18, 133], [56, 55], [56, 54], [56, 59], [134, 6], [115, 62], [135, 136], [137, 138], [137, 137], [22, 20], [139, 140], [141, 142], [143, 143], [143, 51], [143, 133], [144, 145], [146, 147], [83, 82], [148, 149], [150, 103], [150, 150], [49, 84], [151, 28], [152, 153], [153, 152], [154, 155], [156, 157], [139, 15], [158, 159], [4, 2], [4, 3], [133, 18], [160, 161], [84, 162], [84, 50], [84, 49], [84, 71], [72, 163], [164, 139], [165, 166], [167, 168], [123, 122], [169, 115], [169, 170], [40, 171], [123, 103], [123, 172], [123, 61], [123, 123], [24, 96], [81, 80], [173, 21], [174, 175], [176, 177], [176, 178], [122, 179], [21, 22], [180, 130], [181, 182], [129, 183], [184, 184], [181, 179], [185, 52], [70, 186], [106, 187], [137, 175], [137, 174], [188, 189], [108, 190], [191, 157], [191, 191], [192, 193], [192, 194], [192, 195], [192, 2], [192, 192], [41, 196], [41, 197], [41, 198], [41, 199], [41, 200], [41, 167], [41, 201], [41, 202], [41, 203], [41, 204], [41, 205], [41, 206], [41, 207], [208, 208], [61, 123], [209, 210], [41, 128], [211, 54], [115, 212], [106, 189], [137, 208], [212, 115], [56, 58], [30, 25], [30, 36], [30, 41], [155, 213], [48, 47], [214, 180], [96, 24], [4, 4], [4, 62], [155, 215], [216, 15], [170, 170], [71, 217], [71, 50], [71, 49], [13, 13], [98, 97], [74, 1], [74, 218], [74, 219], [74, 215], [74, 220], [74, 221], [74, 222], [74, 223], [74, 18], [74, 224], [74, 225], [74, 226], [74, 227], [74, 17], [74, 228], [229, 64], [100, 97], [230, 21], [230, 20], [231, 232], [233, 209], [233, 234], [233, 235], [233, 236], [233, 159], [233, 237], [233, 210], [233, 238], [233, 239], [233, 240], [233, 241], [233, 242], [233, 243], [233, 244], [245, 115], [246, 247], [248, 74], [13, 238], [106, 62], [106, 249], [13, 27], [13, 209], [103, 250], [40, 251], [175, 252], [169, 251], [115, 169], [232, 231], [75, 253], [75, 40], [175, 174], [254, 137], [249, 212], [249, 255], [249, 256], [222, 74], [183, 257], [17, 218], [183, 198], [183, 258], [183, 183], [19, 12], [259, 72], [259, 260], [75, 261], [115, 170], [251, 169], [262, 262], [263, 263], [264, 265], [264, 266], [264, 267], [106, 268], [269, 45], [129, 270], [271, 272], [81, 256], [46, 139], [46, 15], [46, 273], [46, 272], [46, 274], [46, 164], [46, 216], [46, 45], [275, 276], [277, 277], [155, 114], [158, 62], [129, 278], [101, 101], [29, 40], [279, 107], [155, 208], [231, 280], [281, 281], [282, 283], [155, 284], [46, 46], [160, 28], [160, 23], [285, 286], [285, 211], [258, 183], [69, 287], [280, 231], [212, 249], [162, 288], [162, 71], [162, 84], [280, 289], [280, 270], [280, 196], [280, 168], [280, 167], [280, 290], [280, 203], [280, 14], [280, 291], [280, 284], [280, 129], [280, 130], [280, 292], [293, 19], [254, 226], [129, 294], [189, 106], [295, 296], [165, 115], [287, 69], [287, 80], [74, 248], [74, 297], [74, 73], [298, 299], [281, 137], [147, 62], [147, 249], [62, 300], [301, 248], [302, 303], [303, 302], [304, 303], [252, 233], [252, 166], [252, 121], [252, 145], [252, 115], [136, 115], [92, 22], [303, 304], [268, 106], [252, 212], [252, 288], [252, 58], [252, 175], [252, 305], [252, 48], [12, 293], [306, 62], [281, 2], [236, 209], [236, 238], [236, 235], [236, 243], [236, 244], [102, 97], [175, 15], [6, 5], [17, 307], [17, 308], [17, 1], [17, 177], [17, 74], [17, 309], [17, 215], [17, 248], [17, 220], [17, 310], [17, 85], [17, 311], [17, 221], [17, 312], [17, 222], [17, 313], [17, 223], [17, 0], [17, 224], [17, 314], [17, 225], [17, 315], [17, 226], [17, 73], [17, 316], [17, 317], [17, 228], [245, 318], [35, 62], [236, 319], [167, 167], [167, 201], [167, 133], [167, 18], [320, 321], [254, 62], [322, 45], [220, 177], [215, 295], [321, 320], [102, 323], [102, 300], [147, 212], [147, 42], [147, 105], [11, 324], [21, 173], [21, 325], [21, 10], [21, 20], [21, 306], [21, 326], [21, 327], [21, 230], [328, 329], [64, 229], [215, 5], [209, 236], [18, 62], [73, 330], [73, 248], [73, 331], [73, 297], [73, 17], [290, 290], [141, 332], [69, 306], [139, 46], [333, 114], [334, 335], [336, 337], [336, 116], [336, 165], [336, 115], [336, 136], [336, 338], [336, 169], [336, 251], [336, 135], [336, 339], [340, 134], [251, 336], [58, 57], [341, 74], [341, 309], [341, 215], [341, 311], [341, 222], [341, 316], [191, 342], [191, 277], [191, 149], [191, 262], [191, 343], [191, 344], [191, 345], [191, 346], [191, 214], [191, 347], [191, 348], [191, 349], [191, 350], [191, 284], [191, 351], [191, 231], [191, 278], [191, 130], [191, 178], [191, 122], [191, 179], [191, 352], [191, 207], [353, 354], [353, 185], [90, 13], [114, 155], [288, 233], [142, 355], [356, 357], [114, 113], [47, 339], [194, 194], [194, 195], [63, 137], [43, 358], [63, 63], [359, 360], [86, 128], [64, 5], [160, 187], [114, 361], [232, 103], [244, 236], [160, 190], [69, 212], [335, 334], [114, 129], [243, 271], [184, 190], [212, 69], [62, 18], [44, 362], [44, 293], [271, 243], [310, 62], [252, 105], [88, 303], [153, 62], [363, 283], [363, 161], [363, 280], [363, 256], [363, 211], [363, 364], [363, 106], [363, 236], [363, 365], [363, 249], [114, 263], [114, 318], [145, 87], [145, 252], [263, 114], [39, 28], [105, 252], [153, 366], [165, 28], [165, 114], [165, 169], [165, 367], [37, 37], [52, 185], [187, 329], [187, 106], [220, 223], [52, 52], [52, 368], [252, 304], [252, 96], [252, 89], [252, 88], [252, 302], [252, 369], [116, 169], [362, 44], [362, 293], [184, 298], [169, 116], [178, 176], [265, 264], [236, 363], [195, 194], [40, 370], [238, 236], [170, 136], [353, 371], [86, 205], [86, 41], [190, 184], [372, 373], [288, 162], [160, 113], [54, 211], [180, 343], [55, 58], [160, 263], [62, 153], [374, 44], [58, 208], [62, 340], [14, 290], [170, 115], [5, 215], [80, 375], [376, 377], [22, 92], [94, 201], [58, 162], [55, 54], [295, 378], [295, 379], [295, 103], [295, 380], [295, 381], [295, 382], [295, 376], [295, 181], [295, 383], [295, 384], [295, 283], [295, 157], [295, 385], [295, 386], [295, 387], [295, 388], [295, 389], [295, 390], [295, 61], [295, 391], [295, 392], [295, 393], [295, 394], [295, 250], [295, 395], [295, 396], [295, 397], [295, 398], [295, 377], [295, 368], [295, 104], [295, 321], [295, 60], [295, 150], [295, 320], [295, 295], [40, 35], [37, 30], [133, 307], [133, 399], [133, 167], [133, 400], [133, 133], [133, 401], [133, 232], [133, 291], [133, 284], [133, 206], [133, 402], [133, 52], [133, 179], [133, 403], [68, 21], [404, 166], [113, 160], [405, 106], [306, 69], [113, 47], [43, 406], [43, 407], [103, 378], [103, 377], [103, 321], [157, 395], [213, 155], [263, 160], [4, 63], [4, 286], [183, 282], [286, 4], [213, 61], [213, 320], [61, 380], [2, 195], [114, 256], [114, 365], [2, 305], [286, 174], [183, 303], [377, 376], [408, 408], [377, 103], [164, 216], [409, 409], [305, 2], [305, 63], [2, 2], [410, 329], [355, 256], [355, 365], [135, 135], [132, 411], [132, 132], [114, 340], [412, 4], [412, 2], [183, 129], [201, 94], [63, 3], [63, 62], [57, 137], [2, 412], [157, 191], [135, 336], [172, 413], [172, 123], [193, 193], [3, 63], [377, 61], [296, 296], [63, 174], [96, 96], [149, 148], [414, 415], [306, 306], [61, 377], [195, 2], [258, 329], [267, 19], [5, 5], [327, 21], [327, 416], [327, 173], [48, 50], [48, 75], [263, 417], [50, 87], [50, 49], [50, 71], [50, 84], [418, 62], [418, 184], [418, 299], [216, 164], [9, 19], [214, 345], [214, 351], [419, 290], [29, 420], [9, 421], [366, 366], [417, 263], [87, 422], [87, 154], [87, 41], [87, 145], [87, 50], [254, 186], [422, 87], [115, 136], [249, 105], [423, 417], [16, 424], [284, 155], [13, 301], [38, 25], [38, 26], [38, 40], [425, 426], [115, 427], [417, 423], [118, 117], [86, 189], [329, 187], [174, 63], [21, 68], [329, 410], [231, 172], [154, 87], [428, 429], [184, 299], [430, 249], [282, 212], [282, 121], [282, 83], [282, 424], [71, 162], [71, 431], [71, 432], [71, 433], [71, 83], [71, 84], [13, 36], [270, 129], [434, 215], [132, 285], [179, 157], [115, 338], [435, 435], [435, 147], [39, 23], [424, 15], [424, 45], [115, 337], [115, 436], [115, 123], [115, 437], [115, 165], [115, 336], [115, 438], [115, 251], [115, 439], [115, 135], [115, 339], [138, 137], [105, 249], [440, 413], [440, 275], [440, 178], [394, 104], [414, 414], [29, 23], [441, 360], [20, 86], [85, 17], [30, 23], [85, 41], [417, 442], [23, 115], [417, 443], [417, 444], [212, 282], [212, 145], [137, 57], [27, 23], [438, 35], [434, 23], [255, 249], [139, 129], [139, 445], [417, 113], [417, 114], [140, 139], [140, 446], [140, 447], [140, 448], [438, 169], [139, 342], [35, 438], [321, 104], [414, 449], [115, 23], [55, 56], [55, 57], [324, 11], [23, 434], [57, 55], [450, 434], [29, 438], [338, 116], [250, 150], [160, 405], [363, 154], [74, 177], [74, 74], [19, 267], [288, 217], [288, 84], [438, 29], [451, 452], [284, 160], [437, 135], [178, 177], [135, 437], [116, 338], [86, 453], [454, 357], [169, 438], [210, 210], [405, 160], [169, 338], [248, 142], [73, 73], [437, 455], [456, 456], [84, 82], [84, 121], [65, 457], [73, 215], [21, 212], [212, 21], [458, 129], [164, 46], [177, 176], [177, 178], [139, 164], [62, 283], [152, 147], [21, 74], [107, 113], [107, 417], [107, 114], [147, 152], [333, 62], [223, 459], [406, 11], [40, 48], [238, 244], [253, 75], [260, 74], [417, 62], [113, 417], [106, 405], [62, 333], [139, 429], [434, 450], [434, 460], [434, 365], [68, 80], [275, 172], [461, 45], [116, 336], [283, 308], [462, 463], [216, 216], [207, 41], [448, 140], [448, 272], [448, 46], [448, 45], [244, 238], [62, 441], [338, 123], [268, 459], [464, 280], [465, 155], [422, 404], [466, 421], [142, 187], [160, 18], [61, 295], [467, 152], [58, 305], [26, 38], [26, 40], [351, 180], [148, 468], [265, 19], [314, 17], [160, 284], [455, 375], [91, 469], [283, 282], [170, 470], [102, 2], [393, 378], [393, 379], [393, 103], [393, 381], [393, 376], [393, 181], [393, 385], [393, 388], [393, 390], [393, 61], [393, 392], [393, 393], [393, 394], [393, 296], [393, 250], [393, 395], [393, 397], [393, 377], [393, 368], [393, 104], [393, 321], [393, 60], [393, 150], [393, 320], [393, 295], [232, 52], [375, 455], [171, 40], [471, 472], [471, 255], [105, 473], [105, 434], [152, 467], [280, 464], [474, 91], [126, 13], [176, 292], [470, 170], [79, 62], [258, 62], [166, 424], [375, 143], [375, 475], [375, 356], [375, 329], [375, 66], [375, 469], [375, 108], [375, 110], [375, 375], [375, 91], [375, 476], [375, 111], [375, 474], [375, 112], [375, 328], [375, 357], [375, 477], [375, 258], [375, 478], [375, 90], [381, 177], [381, 176], [381, 344], [381, 479], [381, 320], [480, 282], [91, 375], [123, 338], [52, 232], [267, 265], [320, 381], [106, 44], [106, 190], [292, 176], [164, 388], [166, 165], [86, 106], [80, 287], [481, 55], [116, 136], [454, 189], [165, 337], [165, 361], [165, 27], [165, 30], [165, 116], [165, 133], [165, 165], [165, 336], [165, 136], [165, 135], [139, 139], [482, 340], [2, 102], [106, 42], [351, 178], [249, 115], [249, 169], [329, 66], [329, 328], [169, 249], [481, 58], [483, 377], [12, 265], [58, 366], [137, 107], [291, 291], [214, 214], [481, 211], [481, 208], [283, 82], [283, 121], [316, 1], [2, 194], [172, 275], [107, 137], [62, 152], [387, 296], [387, 295], [62, 474], [62, 258], [303, 183], [380, 380], [178, 344], [434, 105], [408, 59], [172, 93], [194, 2], [167, 280], [115, 107], [62, 314], [377, 377], [150, 393], [290, 484], [100, 429], [429, 164], [194, 192], [13, 10], [429, 140], [429, 447], [429, 448], [13, 446], [13, 35], [164, 429], [340, 114], [63, 371], [63, 363], [13, 25], [44, 407], [13, 303], [13, 95], [13, 129], [340, 340], [170, 485], [400, 260], [149, 149], [309, 215], [309, 222], [296, 393], [104, 103], [3, 3], [258, 474], [184, 418], [318, 486], [314, 62], [314, 85], [487, 488], [489, 489], [20, 230], [417, 151], [145, 121], [75, 372], [105, 82], [259, 20], [448, 40], [335, 15], [63, 4], [215, 215], [329, 143], [329, 356], [329, 108], [329, 375], [329, 357], [329, 478], [329, 90], [36, 129], [187, 142], [311, 459], [47, 443], [420, 29], [19, 161], [23, 62], [155, 285], [176, 344], [95, 201], [282, 62], [249, 62], [249, 355], [218, 74], [121, 212], [81, 107], [81, 62], [128, 86], [107, 99], [212, 121], [103, 103], [311, 215], [490, 129], [490, 365], [491, 168], [491, 167], [199, 196], [199, 51], [199, 197], [199, 199], [199, 200], [199, 128], [199, 167], [199, 203], [199, 204], [199, 206], [199, 41], [199, 94], [199, 95], [199, 207], [199, 201], [429, 139], [429, 46], [340, 10], [46, 429], [363, 63], [162, 492], [64, 91], [62, 81], [132, 271], [428, 139], [428, 446], [428, 447], [346, 157], [346, 294], [450, 440], [450, 275], [450, 458], [95, 13], [186, 121], [321, 103], [10, 260], [493, 294], [494, 83], [440, 450], [312, 377], [33, 23], [490, 106], [3, 2], [64, 141], [210, 159], [210, 158], [309, 74], [309, 272], [309, 223], [257, 278], [251, 251], [107, 161], [190, 106], [168, 129], [86, 295], [20, 495], [495, 20], [379, 157], [198, 183], [282, 16], [83, 496], [157, 396], [497, 78], [36, 28], [62, 79], [295, 86], [107, 4], [68, 62], [28, 36], [232, 232], [264, 498], [298, 184], [305, 285], [198, 387], [86, 86], [181, 181], [181, 394], [181, 250], [181, 377], [181, 104], [278, 257], [499, 44], [499, 500], [499, 501], [499, 502], [499, 503], [499, 406], [499, 407], [499, 504], [499, 505], [499, 43], [499, 358], [499, 506], [265, 267], [254, 107], [7, 44], [62, 226], [23, 460], [131, 411], [245, 113], [206, 346], [62, 30], [62, 23], [62, 128], [62, 41], [507, 243], [129, 168], [508, 509], [305, 58], [89, 469], [96, 89], [309, 309], [113, 151], [141, 7], [267, 498], [86, 510], [128, 62], [54, 281], [19, 265], [485, 170], [294, 346], [191, 511], [174, 174], [97, 300], [19, 362], [260, 248], [260, 297], [260, 259], [35, 24], [107, 174], [512, 155], [174, 107], [300, 97], [513, 222], [113, 361], [113, 263], [113, 444], [113, 318], [113, 423], [113, 245], [174, 4], [514, 514], [362, 498], [5, 117], [28, 35], [305, 211], [129, 114], [12, 12], [486, 394], [178, 351], [28, 23], [434, 128], [434, 161], [434, 19], [434, 129], [174, 164], [129, 365], [249, 129], [411, 132], [155, 512], [168, 515], [516, 517], [91, 514], [213, 360], [269, 46], [222, 513], [321, 394], [515, 168], [84, 84], [42, 74], [345, 180], [154, 363], [518, 173], [354, 353], [152, 62], [394, 321], [283, 62], [173, 518], [41, 62], [51, 280], [211, 285], [211, 305], [141, 430], [519, 519], [300, 160], [160, 362], [59, 520], [59, 137], [211, 481], [211, 208], [269, 140], [160, 300], [211, 286], [211, 96], [521, 340], [521, 134], [430, 141], [62, 417], [211, 55], [114, 169], [4, 194], [58, 252], [58, 404], [522, 523], [524, 72], [377, 378], [377, 250], [377, 368], [377, 104], [377, 150], [40, 438], [74, 42], [7, 141], [484, 87], [440, 168], [59, 55], [222, 215], [2, 55], [499, 525], [92, 520], [157, 6], [157, 64], [44, 44], [103, 526], [263, 444], [263, 423], [263, 245], [263, 76], [263, 485], [115, 115], [174, 286], [211, 371], [183, 365], [44, 500], [44, 43], [44, 365], [527, 318], [527, 48], [283, 256], [283, 365], [37, 36], [128, 205], [527, 114], [104, 394], [104, 321], [114, 527], [183, 106], [150, 377], [6, 157], [258, 258], [520, 92], [30, 62], [42, 87], [87, 484], [300, 107], [342, 139], [450, 256], [107, 300], [528, 64], [528, 489], [21, 520], [438, 40], [95, 41], [105, 393], [105, 493], [105, 145], [105, 147], [150, 368], [150, 104], [249, 363], [145, 212], [145, 42], [145, 427], [96, 302], [269, 288], [466, 141], [466, 529], [466, 496], [466, 498], [438, 170], [482, 41], [438, 151], [246, 530], [170, 438], [48, 527], [356, 329], [329, 474], [506, 64], [113, 442], [92, 100], [356, 356], [340, 531], [141, 466], [477, 108], [477, 91], [175, 532], [113, 333], [252, 408], [252, 132], [252, 2], [46, 269], [196, 41], [173, 513], [229, 229], [438, 123], [160, 180], [82, 366], [64, 89], [434, 533], [180, 257], [145, 145], [89, 474], [133, 51], [252, 269], [106, 16], [423, 263], [123, 438], [534, 256], [531, 340], [100, 92], [318, 527], [135, 251], [201, 486], [284, 149], [42, 190], [13, 506], [300, 62], [13, 535], [536, 86], [168, 440], [89, 437], [141, 64], [177, 344], [176, 176], [370, 417], [114, 245], [63, 520], [232, 537], [466, 9], [370, 40], [92, 538], [211, 211], [303, 13], [465, 465], [15, 139], [539, 78], [190, 42], [447, 139], [447, 446], [474, 329], [160, 45], [86, 540], [322, 139], [249, 434], [303, 62], [340, 521], [184, 81], [197, 128], [251, 116], [328, 459], [288, 252], [249, 42], [249, 106], [188, 459], [116, 251], [541, 181], [542, 183], [542, 399], [542, 413], [542, 168], [542, 543], [542, 256], [542, 419], [542, 440], [542, 544], [542, 275], [542, 458], [542, 403], [82, 283], [275, 542], [42, 249], [16, 106], [464, 483], [42, 183], [42, 81], [42, 115], [84, 288], [51, 133], [440, 542], [288, 71], [133, 128], [133, 280], [288, 70], [495, 363], [13, 90], [440, 226], [177, 17], [121, 82], [121, 105], [534, 544], [29, 25], [29, 26], [29, 27], [29, 30], [29, 33], [29, 34], [29, 35], [29, 38], [29, 39], [29, 545], [151, 438], [327, 5], [175, 288], [91, 474], [59, 54], [59, 56], [59, 58], [423, 455], [86, 362], [40, 37], [284, 377], [280, 133], [13, 118], [258, 402], [217, 432], [217, 433], [217, 366], [217, 84], [217, 70], [305, 57], [62, 170], [181, 296], [378, 377], [62, 329], [331, 73], [250, 181], [250, 394], [250, 250], [250, 377], [250, 104], [423, 76], [121, 233], [121, 145], [121, 546], [474, 478], [164, 174], [255, 363], [86, 536], [61, 320], [155, 518], [474, 110], [283, 107], [283, 142], [13, 2], [250, 103], [160, 321], [282, 254], [395, 395], [113, 443], [113, 547], [113, 171], [12, 141], [105, 121], [534, 440], [544, 542], [421, 529], [170, 548], [545, 29], [421, 496], [149, 277], [149, 284], [209, 233], [387, 198], [298, 246], [252, 412], [431, 50], [89, 303], [549, 550], [323, 97], [323, 102], [316, 379], [269, 256], [240, 210], [526, 103], [209, 58], [45, 461], [160, 61], [82, 233], [82, 546], [537, 232], [107, 256], [496, 421], [496, 529], [473, 29], [462, 462], [160, 319], [251, 40], [97, 323], [32, 23], [335, 322], [86, 223], [32, 26], [183, 64], [434, 163], [434, 255], [434, 81], [434, 106], [434, 471], [434, 189], [434, 551], [357, 357], [254, 282], [254, 142], [552, 305], [434, 490], [362, 86], [210, 240], [553, 554], [553, 340], [174, 285], [174, 16], [174, 371], [174, 46], [167, 41], [167, 51], [19, 7], [179, 381], [140, 174], [324, 555], [157, 377], [423, 423], [174, 3], [174, 140], [107, 306], [282, 226], [370, 47], [370, 41], [370, 38], [62, 114], [62, 365], [302, 89], [153, 107], [434, 249], [232, 321], [249, 430], [195, 195], [450, 95], [458, 542], [321, 232], [310, 78], [2, 252], [185, 354], [28, 114], [28, 165], [28, 169], [28, 367], [114, 283], [114, 63], [114, 62], [58, 55], [58, 56], [58, 59], [58, 209], [114, 28], [114, 165], [114, 367], [306, 107], [379, 316], [95, 64], [116, 361], [51, 29], [14, 280], [215, 222], [2, 13], [232, 556], [377, 157], [167, 351], [447, 447], [377, 181], [377, 296], [447, 46], [359, 452], [351, 167], [245, 114], [245, 48], [296, 377], [296, 181], [385, 296], [183, 543], [107, 62], [296, 295], [296, 385], [133, 557], [359, 558], [62, 256], [123, 41], [285, 305], [559, 282], [62, 434], [62, 106], [62, 249], [528, 528], [308, 283], [285, 208], [560, 459], [2, 63], [462, 561], [5, 64], [5, 327], [6, 327], [327, 6], [283, 5], [438, 438], [322, 140], [322, 335], [322, 273], [322, 334], [6, 379], [6, 489], [48, 252], [412, 252], [64, 95], [529, 359], [372, 433], [372, 86], [372, 134], [372, 83], [419, 542], [254, 115], [254, 31], [47, 41], [338, 115], [47, 114], [99, 107], [506, 44], [506, 365], [529, 421], [404, 58], [447, 448], [179, 180], [21, 363], [562, 562], [495, 211], [218, 196], [96, 115], [96, 170], [96, 252], [170, 96], [196, 95], [40, 417], [160, 338], [269, 216], [95, 207], [181, 150], [232, 284], [159, 209], [40, 25], [40, 27], [40, 28], [40, 30], [40, 33], [40, 34], [40, 38], [40, 39], [40, 545], [150, 181], [417, 318], [483, 464], [3, 4], [395, 157], [62, 70], [563, 290], [232, 133], [232, 557], [115, 302], [87, 441], [19, 473], [504, 160], [134, 372], [134, 553], [134, 482], [134, 173], [134, 521], [87, 493], [196, 128], [3, 408], [450, 413], [450, 172], [564, 209], [116, 115], [196, 280], [196, 167], [196, 203], [473, 460], [209, 11], [135, 96], [40, 448], [379, 6], [12, 565], [14, 430], [566, 452], [278, 256], [278, 180], [96, 135], [223, 86], [338, 28], [290, 567], [129, 450], [290, 568], [28, 338], [173, 306], [569, 360], [569, 161], [569, 7], [569, 566], [569, 570], [569, 452], [63, 571], [320, 394], [136, 337], [132, 62], [473, 19], [478, 474], [451, 496], [394, 320], [471, 434], [559, 518], [189, 434], [171, 41], [377, 60], [64, 157], [566, 569], [328, 90], [450, 129], [434, 256], [446, 269], [446, 216], [68, 86], [107, 115], [377, 394], [29, 51], [233, 252], [233, 404], [233, 532], [233, 115], [371, 211], [543, 183], [160, 314], [160, 17], [173, 134], [125, 353], [160, 42], [371, 63], [338, 160], [452, 141], [159, 233], [159, 237], [159, 210], [159, 234], [159, 238], [159, 158], [159, 235], [159, 240], [159, 236], [159, 241], [159, 242], [159, 243], [159, 244], [299, 184], [452, 359], [541, 150], [305, 552], [61, 61], [61, 394], [350, 572], [573, 566], [361, 113], [361, 443], [361, 263], [361, 114], [361, 245], [361, 47], [295, 459], [105, 180], [303, 89], [63, 211], [39, 86], [58, 63], [160, 367], [285, 552], [62, 132], [280, 574], [160, 377], [257, 180], [493, 129], [136, 135], [234, 234], [483, 214], [136, 251], [178, 575], [226, 440], [234, 210], [234, 236], [374, 7], [60, 377], [142, 576], [377, 160], [35, 28], [113, 28], [114, 417], [129, 172], [72, 259], [577, 375], [98, 99], [577, 578], [450, 142], [232, 61], [232, 53], [216, 579], [129, 493], [172, 129], [490, 434], [28, 113], [232, 41], [259, 74], [259, 248], [580, 580], [74, 311], [74, 341], [43, 43], [581, 41], [282, 74], [582, 62], [274, 269], [212, 256], [103, 232], [62, 531], [62, 77], [7, 569], [285, 174], [264, 500], [264, 440], [264, 452], [249, 283], [114, 371], [458, 458], [484, 563], [521, 583], [521, 482], [62, 582], [273, 269], [42, 405], [140, 269], [209, 209], [209, 121], [391, 368], [272, 290], [272, 584], [43, 505], [114, 78], [114, 531], [285, 155], [429, 428], [429, 269], [53, 280], [377, 295], [377, 284], [5, 232], [5, 53], [498, 506], [247, 246], [296, 387], [247, 19], [6, 134], [5, 115], [211, 63], [211, 552], [284, 232], [5, 528], [95, 95], [90, 90], [210, 420], [197, 197], [286, 286], [2, 192], [528, 5], [359, 529], [585, 585], [230, 230], [484, 290], [255, 255], [362, 362], [506, 506], [495, 208], [411, 411], [284, 351], [329, 208], [195, 4], [495, 371], [106, 21], [106, 20], [484, 143], [128, 128], [2, 586], [2, 408], [2, 138], [2, 434], [2, 6], [2, 281], [6, 2], [6, 4], [450, 542], [464, 41], [340, 482], [121, 209], [579, 269], [579, 216], [194, 587], [213, 473], [413, 542], [219, 79], [29, 24], [29, 28], [29, 31], [29, 32], [29, 36], [29, 37], [29, 588], [333, 263], [232, 60], [375, 80], [282, 589], [92, 21], [554, 419], [142, 282], [58, 2], [335, 139], [92, 137], [155, 429], [419, 554], [62, 355], [335, 269], [218, 459], [51, 232], [38, 443], [570, 569], [23, 590], [351, 284], [413, 172], [60, 232], [114, 208], [96, 591], [217, 71], [232, 51], [274, 592], [81, 509], [420, 210], [62, 45], [593, 197], [262, 215], [168, 280], [513, 173], [21, 92], [95, 196], [95, 51], [95, 199], [95, 200], [95, 128], [95, 167], [95, 206], [95, 93], [372, 282], [372, 431], [372, 594], [372, 70], [137, 92], [58, 54], [45, 269], [447, 269], [251, 23], [108, 509], [593, 51], [424, 212], [486, 183], [67, 66], [169, 114], [448, 269], [17, 42], [169, 363], [589, 282], [338, 337], [169, 165], [115, 5], [196, 218], [45, 45], [280, 53], [74, 188], [129, 256], [424, 82], [424, 121], [129, 486], [23, 251], [41, 28], [41, 280], [41, 133], [41, 114], [41, 123], [41, 165], [41, 483], [41, 169], [314, 317], [0, 316], [357, 356], [61, 213], [218, 95], [76, 417], [86, 68], [438, 32], [170, 169], [474, 258], [87, 131], [79, 79], [339, 455], [473, 189], [42, 17], [486, 129], [183, 486], [226, 459], [25, 438], [335, 164], [160, 106], [157, 379], [157, 376], [157, 5], [157, 397], [385, 385], [417, 76], [142, 450], [231, 231], [416, 327], [82, 183], [82, 285], [82, 234], [82, 211], [82, 552], [181, 321], [14, 103], [14, 380], [14, 389], [14, 537], [14, 526], [14, 61], [14, 85], [14, 53], [14, 394], [14, 221], [14, 312], [14, 18], [14, 178], [14, 403], [14, 486], [591, 96], [133, 41], [15, 62], [32, 438], [461, 272], [62, 28], [156, 179], [482, 74], [74, 482], [282, 559], [95, 218], [267, 267], [371, 495], [183, 88], [183, 63], [236, 159], [189, 473], [362, 441], [180, 346], [180, 214], [180, 148], [180, 351], [419, 450], [49, 71], [592, 269], [430, 62], [41, 136], [334, 15], [334, 269], [90, 474], [438, 25], [139, 269], [438, 30], [441, 498], [316, 0], [196, 204], [322, 269], [282, 142], [346, 168], [318, 127], [252, 303], [252, 59], [160, 280], [91, 478], [366, 58], [115, 252], [321, 181], [32, 30], [180, 278], [82, 531], [420, 402], [142, 283], [282, 493], [13, 352], [440, 200], [440, 562], [440, 458], [440, 65], [71, 71], [10, 339], [52, 595], [12, 161], [62, 78], [212, 252], [596, 597], [370, 27], [169, 28], [169, 367], [169, 96], [177, 223], [179, 377], [105, 569], [268, 222], [173, 340], [339, 10], [359, 141], [127, 318], [137, 365], [360, 213], [62, 430], [137, 520], [216, 269], [272, 46], [197, 41], [337, 336], [158, 237], [158, 209], [158, 238], [158, 241], [158, 242], [169, 169], [141, 359], [114, 333], [27, 370], [577, 366], [210, 371], [107, 81], [381, 179], [370, 48], [194, 4], [157, 156], [61, 232], [201, 207], [1, 1], [5, 140], [223, 223], [520, 137], [520, 21], [520, 63], [520, 59], [412, 412], [6, 6], [48, 40], [51, 51], [81, 418], [377, 321], [321, 377], [489, 6], [242, 158], [513, 462], [93, 93], [49, 297], [140, 5], [411, 131], [62, 115], [97, 335], [128, 197], [569, 105], [55, 107], [459, 249], [222, 268], [168, 346], [438, 6], [164, 335], [70, 433], [144, 254], [13, 550], [335, 97], [96, 211], [470, 155], [90, 62], [105, 283], [55, 59], [433, 70], [144, 186], [134, 598], [357, 107], [357, 474], [418, 81], [371, 114], [50, 48], [340, 464], [283, 105], [581, 557], [155, 470], [42, 145], [42, 147], [0, 146], [371, 210], [136, 41], [168, 526], [100, 101], [380, 321], [263, 527], [263, 361], [263, 113], [263, 443], [263, 318], [263, 442], [263, 47], [263, 48], [263, 171], [263, 333], [433, 217], [433, 288], [433, 71], [107, 283], [526, 168], [158, 599], [433, 372], [3, 58], [482, 134], [490, 371], [321, 380], [353, 404], [196, 196], [196, 51], [196, 197], [196, 199], [196, 200], [196, 201], [196, 206], [196, 94], [196, 207], [433, 162], [433, 152], [433, 432], [433, 180], [433, 84], [146, 0], [353, 125], [437, 27], [191, 6], [146, 146], [230, 62], [81, 473], [353, 100], [450, 438], [450, 340], [450, 169], [375, 96], [96, 375], [209, 159], [209, 237], [209, 234], [209, 238], [209, 158], [209, 235], [209, 240], [209, 241], [209, 242], [209, 243], [209, 244], [438, 450], [19, 513], [281, 211], [281, 552], [180, 256], [129, 458], [424, 139], [138, 58], [62, 15], [129, 600], [178, 214], [62, 173], [62, 190], [142, 41], [128, 51], [128, 41], [175, 3], [251, 438], [86, 83], [166, 283], [201, 133], [201, 18], [204, 377], [258, 469], [265, 12], [132, 166], [83, 372], [34, 35], [83, 283], [190, 62], [148, 402], [581, 205], [469, 258], [81, 189], [333, 113], [489, 64], [33, 40], [160, 41], [158, 210], [83, 308], [83, 166], [83, 601], [83, 366], [552, 281], [373, 283], [45, 371], [180, 433], [23, 588], [602, 569], [414, 603], [43, 499], [43, 498], [83, 494], [83, 86], [96, 604], [121, 71], [569, 602], [83, 154], [83, 233], [83, 107], [83, 424], [83, 62], [58, 552], [83, 160], [83, 71], [83, 84], [245, 263], [133, 201], [105, 533], [414, 605], [547, 171], [211, 281], [409, 10], [352, 41], [557, 51], [393, 154], [393, 162], [393, 155], [393, 546], [181, 291], [62, 445], [166, 132], [349, 402], [546, 145], [495, 21], [495, 16], [160, 320], [7, 161], [320, 160], [47, 116], [495, 329], [495, 128], [495, 606], [495, 290], [495, 114], [607, 249], [284, 277], [498, 43], [160, 133], [320, 351], [212, 509], [209, 183], [160, 478], [340, 553], [213, 247], [213, 499], [213, 608], [213, 246], [340, 173], [552, 211], [249, 607], [195, 192], [513, 19], [351, 320], [363, 165], [115, 363], [134, 340], [448, 216], [116, 47], [34, 25], [34, 38], [34, 40], [269, 269], [59, 481], [556, 483], [284, 280], [30, 438], [30, 609], [410, 258], [114, 48], [226, 42], [226, 106], [183, 209], [6, 438], [610, 96], [161, 7], [211, 103], [211, 117], [211, 611], [211, 612], [211, 560], [211, 338], [211, 107], [211, 62], [613, 613], [613, 614], [211, 126], [211, 209], [314, 226], [146, 52], [258, 410], [93, 41], [13, 179], [54, 34], [427, 615], [476, 474], [73, 311], [338, 438], [143, 375], [96, 610], [209, 211], [427, 470], [427, 151], [616, 320], [427, 170], [288, 433], [427, 119], [112, 108], [427, 261], [132, 283], [269, 139], [269, 448], [269, 434], [320, 616], [7, 374], [62, 230], [114, 495], [103, 283], [617, 618], [461, 139], [288, 104], [581, 79], [184, 473], [268, 1], [141, 529], [143, 484], [498, 359], [209, 303], [118, 118], [121, 121], [109, 62], [286, 58], [303, 209], [115, 245], [455, 438], [160, 81], [58, 195], [474, 404], [101, 100], [25, 23], [105, 142], [282, 115], [96, 56], [96, 57], [96, 303], [96, 619], [56, 96], [56, 57], [56, 303], [56, 89], [56, 610], [56, 619], [620, 620], [137, 59], [96, 169], [602, 616], [261, 32], [195, 58], [79, 219], [79, 120], [273, 322], [438, 455], [57, 96], [616, 602], [323, 100], [455, 339], [455, 302], [344, 149], [303, 96], [486, 486], [302, 455], [80, 16], [80, 282], [80, 142], [367, 28], [367, 114], [367, 165], [367, 169], [96, 339], [42, 226], [367, 151], [211, 301], [232, 368], [441, 374], [367, 261], [21, 106], [559, 166], [452, 566], [226, 282], [619, 96], [303, 56], [303, 57], [303, 610], [303, 619], [151, 35], [87, 438], [346, 180], [419, 336], [51, 141], [195, 6], [147, 87], [554, 535], [188, 282], [401, 621], [424, 80], [238, 587], [238, 622], [216, 446], [390, 14], [129, 128], [129, 585], [116, 27], [27, 116], [404, 107], [213, 529], [86, 107], [136, 89], [282, 188], [52, 146], [368, 368], [190, 509], [132, 131], [58, 4], [214, 178], [390, 296], [390, 395], [390, 295], [368, 52], [51, 35], [623, 623], [448, 139], [448, 446], [448, 447], [448, 429], [170, 116], [521, 554], [275, 515], [102, 98], [161, 12], [160, 453], [49, 433], [185, 353], [26, 25], [6, 195], [20, 106], [129, 572], [35, 23], [457, 401], [65, 257], [65, 434], [554, 521], [434, 233], [96, 417], [438, 87], [162, 532], [129, 413], [12, 510], [413, 129], [64, 64], [329, 62], [36, 30], [105, 384], [105, 161], [105, 280], [105, 518], [105, 203], [105, 363], [105, 351], [105, 236], [324, 43], [452, 43], [5, 105], [105, 16], [181, 61], [181, 320], [281, 58], [281, 63], [281, 208], [116, 170], [291, 181], [452, 451], [200, 94], [63, 58], [63, 281], [63, 208], [14, 390], [13, 624], [128, 129], [63, 175], [294, 206], [46, 303], [46, 210], [46, 371], [46, 211], [46, 63], [46, 236], [46, 174], [63, 625], [401, 457], [114, 105], [63, 56], [114, 4], [114, 210], [114, 2], [114, 3], [114, 137], [114, 46], [31, 23], [57, 208], [114, 278], [114, 115], [613, 117], [394, 181], [169, 129], [193, 2], [192, 412], [6, 64], [337, 337], [21, 105], [120, 17], [280, 280], [104, 377], [321, 368], [168, 168], [260, 400], [374, 374], [35, 51], [417, 96], [417, 547], [417, 171], [13, 420], [417, 40], [113, 41], [115, 114], [249, 424], [61, 393], [395, 390], [395, 295], [105, 5], [87, 626], [438, 96], [212, 147], [210, 236], [371, 129], [96, 438], [136, 464], [41, 113], [430, 498], [87, 17], [91, 91], [133, 143], [569, 43], [81, 160], [56, 63], [366, 441], [627, 184], [17, 87], [283, 103], [444, 263], [164, 334], [238, 239], [178, 231], [139, 428], [425, 425], [300, 355], [29, 560], [303, 285], [303, 15], [303, 210], [303, 371], [303, 286], [303, 211], [303, 63], [303, 137], [320, 628], [62, 303], [251, 32], [42, 560], [32, 251], [40, 590], [282, 166], [40, 32], [590, 40], [122, 122], [104, 368], [179, 122], [179, 179], [209, 283], [137, 303], [211, 57], [142, 183], [275, 413], [275, 440], [486, 201], [323, 323], [211, 129], [285, 303], [60, 150], [211, 58], [409, 118], [129, 211], [129, 371], [129, 169], [60, 296], [560, 42], [233, 434], [211, 303], [61, 321], [496, 141], [496, 466], [496, 498], [412, 305], [61, 182], [190, 160], [62, 184], [401, 425], [282, 355], [211, 249], [498, 496], [427, 367], [94, 94], [101, 120], [3, 174], [566, 43], [12, 573], [51, 113], [412, 192], [321, 546], [113, 51], [362, 7], [7, 362], [188, 106], [441, 366], [70, 288], [13, 286], [154, 62], [376, 103], [16, 495], [363, 329], [363, 495], [363, 28], [363, 303], [363, 210], [363, 371], [363, 296], [363, 81], [363, 351], [363, 129], [154, 518], [154, 173], [107, 357], [284, 231], [546, 321], [41, 464], [41, 581], [41, 30], [41, 232], [41, 593], [41, 482], [41, 47], [41, 336], [41, 171], [183, 362], [183, 19], [165, 212], [256, 212], [282, 64], [212, 165], [629, 316], [282, 518], [349, 180], [379, 396], [424, 434], [336, 41], [496, 496], [89, 136], [305, 412], [263, 96], [64, 6], [201, 41], [494, 86], [466, 608], [429, 45], [53, 397], [397, 53], [62, 245], [182, 61], [211, 256], [86, 114], [28, 365], [351, 342], [556, 232], [556, 330], [404, 100], [301, 211], [136, 116], [359, 421], [359, 496], [359, 213], [269, 15], [351, 214], [495, 129], [466, 267], [329, 129], [264, 264], [385, 295], [2, 193], [194, 54], [194, 193], [4, 195], [329, 258], [127, 21], [127, 20], [400, 560], [560, 106], [148, 344], [21, 495], [258, 107], [630, 630], [81, 356], [489, 5], [6, 140], [36, 31], [319, 319], [389, 389], [631, 631], [506, 141], [245, 245], [632, 632], [633, 633], [283, 283], [634, 634], [634, 635], [636, 636], [637, 637], [31, 31], [80, 80], [81, 329], [81, 184], [108, 108], [4, 114], [4, 81], [18, 223], [11, 11], [103, 582], [99, 99], [51, 160], [388, 164], [103, 296], [116, 116], [48, 114], [64, 68], [64, 506], [10, 36], [48, 455], [492, 254], [269, 273], [269, 272], [269, 274], [269, 164], [184, 42], [172, 62], [86, 450], [86, 82], [51, 199], [249, 155], [344, 148], [268, 215], [638, 46], [638, 639], [638, 124], [638, 338], [638, 640], [638, 638], [638, 158], [638, 55], [638, 210], [638, 356], [249, 441], [210, 303], [344, 180], [526, 403], [638, 300], [235, 233], [212, 364], [129, 495], [42, 184], [638, 10], [638, 340], [492, 186], [129, 329], [106, 495], [638, 329], [638, 81], [638, 480], [492, 144], [638, 12], [132, 6], [638, 589], [44, 430], [346, 342], [105, 42], [105, 427], [357, 256], [85, 226], [180, 289], [180, 621], [180, 342], [180, 149], [180, 345], [180, 191], [180, 179], [84, 83], [157, 157], [641, 163], [165, 129], [83, 431], [41, 443], [430, 44], [441, 264], [11, 209], [10, 535], [264, 441], [44, 506], [177, 377], [145, 233], [213, 182], [19, 441], [42, 642], [42, 329], [42, 474], [42, 169], [42, 453], [330, 223], [393, 82], [393, 121], [393, 612], [393, 105], [393, 83], [393, 180], [393, 643], [393, 17], [81, 42], [46, 140], [11, 406], [320, 213], [188, 155], [357, 454], [99, 139], [140, 164], [160, 51], [170, 165], [51, 197], [51, 109], [379, 389], [329, 81], [329, 42], [109, 51], [271, 132], [41, 352], [405, 42], [537, 460], [33, 35], [357, 258], [495, 1], [495, 203], [495, 377], [495, 106], [495, 365], [164, 140], [164, 164], [249, 81], [15, 303], [447, 140], [447, 429], [129, 249], [155, 393], [86, 103], [86, 377], [171, 417], [174, 2], [240, 236], [581, 139], [551, 106], [40, 245], [478, 357], [69, 260], [644, 489], [40, 113], [113, 250], [141, 498], [165, 280], [249, 160], [160, 237], [113, 40], [114, 326], [537, 473], [21, 364], [460, 537], [473, 537], [460, 434], [455, 48], [96, 64], [64, 14], [64, 124], [320, 379], [64, 379], [69, 68], [364, 21], [183, 187], [2, 174], [180, 262], [180, 344], [180, 156], [180, 348], [180, 349], [180, 122], [434, 473], [19, 183], [121, 110], [121, 84], [31, 229], [133, 65], [121, 83], [14, 64], [121, 393], [105, 366], [86, 263], [86, 444], [82, 393], [283, 132], [233, 145], [103, 352], [357, 212], [6, 132], [160, 165], [546, 58], [136, 165], [103, 295], [404, 404], [280, 165], [107, 338], [69, 81], [271, 131], [271, 411], [62, 68], [234, 209], [155, 188], [377, 177], [129, 343], [129, 568], [129, 130], [183, 44], [96, 21], [165, 25], [165, 417], [165, 443], [165, 261], [165, 482], [165, 39], [165, 545], [64, 96], [243, 375], [474, 143], [474, 356], [474, 375], [474, 357], [96, 116], [366, 282], [458, 600], [245, 62], [263, 62], [115, 96], [11, 159], [62, 263], [283, 373], [562, 440], [21, 96], [438, 251], [438, 367], [367, 438], [397, 376], [165, 420], [645, 645], [281, 4], [394, 628], [140, 429], [385, 380], [385, 387], [100, 100], [408, 3], [379, 379], [4, 174], [120, 79], [305, 305], [5, 489], [646, 646], [647, 647], [648, 648], [450, 450], [628, 628], [394, 394], [394, 377], [260, 69], [21, 127], [256, 357], [340, 74], [466, 649], [308, 308], [650, 215], [14, 181], [14, 226], [167, 53], [47, 455], [420, 301], [420, 651], [58, 546], [122, 347], [107, 86], [612, 393], [301, 420], [141, 362], [44, 183], [169, 364], [55, 55], [526, 290], [379, 397], [65, 413], [65, 200], [65, 440], [65, 275], [65, 178], [65, 562], [482, 521], [86, 372], [86, 494], [139, 581], [464, 340], [133, 568], [86, 424], [165, 339], [129, 434], [129, 180], [129, 41], [129, 115], [129, 173], [231, 290], [279, 62], [419, 652], [29, 151], [129, 290], [28, 438], [62, 86], [74, 260], [173, 327], [115, 63], [489, 16], [86, 62], [366, 105], [170, 133], [40, 547], [173, 173], [438, 28], [94, 41], [169, 123], [367, 62], [420, 283], [365, 365], [20, 188], [133, 170], [349, 191], [653, 653], [81, 69], [30, 35], [404, 654], [19, 19], [81, 460], [132, 305], [132, 211], [295, 18], [81, 106], [28, 62], [474, 62], [272, 271], [397, 390], [81, 249], [204, 41], [460, 81], [187, 189], [376, 397], [533, 285], [480, 211], [409, 13], [420, 165], [139, 446], [139, 447], [285, 533], [233, 637], [150, 60], [13, 444], [655, 367], [211, 132], [188, 20], [402, 402], [444, 96], [18, 103], [18, 295], [13, 65], [83, 83], [318, 48], [371, 490], [262, 656], [96, 444], [95, 351], [139, 448], [62, 453], [63, 2], [267, 570], [446, 446], [140, 322], [269, 657], [547, 547], [84, 217], [84, 152], [84, 433], [84, 70], [412, 195], [225, 311], [223, 74], [444, 455], [343, 278], [128, 28], [131, 271], [218, 218], [129, 42], [286, 137], [51, 593], [129, 165], [658, 658], [278, 343], [28, 128], [63, 115], [244, 244], [63, 286], [63, 59], [44, 19], [286, 303], [137, 286], [7, 7], [63, 46], [58, 62], [217, 288], [525, 525], [525, 247], [525, 499], [525, 8], [525, 406], [566, 141], [652, 419], [55, 211], [659, 659], [63, 408], [581, 0], [223, 18], [195, 412], [285, 2], [2, 285], [660, 660], [172, 172], [378, 378], [452, 573], [5, 2], [116, 339], [525, 9], [525, 466], [63, 303], [3, 192], [3, 303], [2, 137], [260, 325], [548, 170], [36, 10], [159, 631], [215, 650], [661, 502], [413, 214], [413, 178], [79, 581], [413, 440], [413, 275], [377, 483], [107, 404], [494, 107], [143, 41], [62, 58], [173, 259], [105, 269], [58, 115], [244, 301], [140, 428], [6, 473], [612, 49], [612, 311], [612, 404], [6, 96], [275, 562], [58, 286], [547, 40], [366, 312], [236, 210], [96, 6], [196, 143], [230, 107], [13, 306], [98, 323], [312, 366], [62, 662], [80, 663], [238, 238], [334, 164], [301, 244], [238, 241], [547, 370], [233, 288], [233, 546], [139, 461], [45, 322], [380, 296], [163, 72], [69, 108], [3, 56], [3, 286], [3, 59], [56, 3], [170, 490], [121, 427], [4, 193], [145, 105], [380, 295], [363, 215], [425, 664], [665, 4], [662, 62], [408, 63], [362, 666], [362, 11], [362, 365], [7, 666], [7, 19], [7, 661], [7, 12], [395, 174], [377, 86], [394, 61], [99, 98], [99, 97], [99, 323], [42, 44], [174, 395], [467, 434], [183, 168], [183, 401], [434, 467], [68, 82], [82, 68], [256, 211], [508, 212], [508, 667], [508, 550], [508, 549], [173, 154], [212, 508], [275, 450], [665, 58], [174, 137], [72, 20], [404, 101], [554, 554], [554, 134], [94, 204], [58, 665], [506, 62], [462, 256], [579, 579], [107, 474], [301, 362], [74, 259], [474, 128], [438, 115], [24, 35], [371, 303], [362, 301], [128, 593], [297, 49], [161, 569], [170, 123], [170, 437], [170, 338], [170, 251], [170, 135], [170, 339], [174, 379], [404, 84], [452, 569], [55, 481], [62, 506], [417, 116], [170, 427], [346, 191], [57, 58], [53, 232], [58, 211], [549, 173], [193, 4], [483, 345], [323, 404], [141, 496], [666, 452], [157, 342], [157, 345], [157, 346], [157, 214], [157, 350], [157, 351], [157, 483], [157, 668], [157, 352], [345, 483], [62, 279], [345, 214], [608, 466], [2, 323], [483, 157], [116, 417], [527, 96], [527, 6], [527, 5], [527, 64], [5, 527], [408, 305], [377, 572], [377, 156], [377, 593], [377, 204], [377, 350], [377, 94], [377, 320], [11, 362], [408, 516], [408, 517], [434, 434], [669, 669], [670, 670], [84, 404], [64, 140], [64, 80], [213, 359], [45, 15], [45, 274], [61, 181], [460, 467], [187, 434], [187, 671], [62, 183], [478, 375], [124, 64], [434, 187], [9, 8], [103, 86], [418, 582], [64, 489], [142, 366], [114, 183], [486, 113], [131, 87], [238, 159], [671, 187], [451, 265], [265, 451], [113, 183], [562, 65], [128, 474], [51, 557], [474, 166], [467, 460], [21, 624], [64, 93], [146, 67], [371, 128], [364, 152], [493, 401], [430, 672], [137, 301], [160, 104], [183, 62], [183, 113], [183, 114], [152, 364], [366, 283], [194, 412], [263, 455], [69, 549], [129, 401], [495, 495], [665, 665], [495, 673], [128, 371], [284, 284], [147, 460], [167, 203], [480, 549], [210, 283], [210, 365], [480, 106], [371, 360], [129, 129], [63, 285], [11, 10], [249, 82], [190, 296], [249, 210], [357, 5], [404, 474], [286, 57], [121, 41], [121, 142], [212, 105], [286, 63], [59, 3], [56, 286], [56, 174], [286, 3], [4, 665], [254, 152], [467, 20], [160, 4], [341, 248], [290, 572], [495, 160], [290, 620], [494, 510], [215, 311], [494, 283], [105, 212], [82, 256], [82, 410], [82, 153], [444, 485], [254, 665], [301, 137], [569, 358], [141, 674], [5, 357], [211, 2], [106, 551], [181, 390], [181, 60], [140, 334], [160, 153], [113, 133], [72, 311], [160, 495], [160, 147], [106, 490], [388, 388], [58, 233], [263, 16], [354, 185], [389, 295], [63, 305], [376, 296], [376, 60], [283, 166], [572, 290], [283, 210], [283, 366], [147, 434], [460, 147], [62, 172], [305, 408], [290, 198], [608, 267], [362, 183], [675, 675], [516, 408], [4, 160], [2, 211], [2, 58], [2, 238], [301, 651], [47, 113], [62, 458], [106, 459], [106, 671], [165, 256], [165, 364], [377, 342], [377, 203], [377, 351], [377, 179], [269, 303], [269, 210], [269, 371], [269, 63], [269, 236], [137, 2], [234, 242], [404, 124], [404, 98], [404, 640], [404, 99], [495, 434], [495, 671], [495, 459], [458, 62], [69, 64], [375, 663], [236, 269], [238, 2], [560, 20], [113, 527], [377, 1], [232, 204], [29, 473], [428, 269], [428, 676], [428, 216], [129, 93], [63, 269], [233, 121], [233, 160], [133, 113], [160, 233], [300, 108], [11, 161], [424, 263], [473, 434], [204, 232], [549, 480], [549, 509], [0, 268], [167, 204], [27, 136], [404, 357], [133, 64], [470, 427], [40, 75], [143, 474], [434, 212], [136, 27], [199, 677], [192, 3], [241, 242], [186, 152], [210, 62], [566, 7], [355, 282], [355, 518], [64, 376], [63, 532], [370, 455], [7, 566], [185, 533], [370, 85], [85, 370], [19, 570], [86, 318], [529, 506], [248, 612], [549, 184], [549, 189], [549, 508], [549, 678], [58, 285], [663, 679], [13, 418], [180, 105], [221, 316], [113, 113], [301, 511], [35, 34], [89, 302], [210, 269], [173, 20], [316, 221], [178, 440], [343, 191], [542, 129], [666, 62], [549, 1], [408, 2], [49, 612], [129, 542], [434, 147], [323, 98], [267, 608], [438, 417], [352, 350], [282, 225], [282, 17], [131, 131], [179, 191], [679, 80], [174, 121], [42, 187], [498, 430], [663, 80], [188, 222], [380, 177], [380, 680], [380, 61], [380, 440], [380, 178], [380, 539], [231, 191], [545, 25], [316, 222], [444, 76], [204, 204], [681, 682], [144, 492], [222, 188], [222, 316], [458, 450], [408, 285], [408, 520], [408, 281], [5, 58], [527, 113], [157, 61], [61, 157], [2, 520], [642, 642], [683, 683], [285, 408], [285, 520], [285, 63], [285, 281], [305, 55], [285, 532], [394, 486], [684, 684], [351, 351], [351, 345], [351, 122], [24, 40], [207, 207], [157, 380], [106, 188], [106, 589], [106, 434], [106, 365], [106, 147], [21, 308], [168, 291], [168, 542], [168, 450], [10, 325], [93, 133], [496, 451], [80, 62], [450, 168], [345, 351], [339, 96], [195, 63], [86, 131], [86, 132], [86, 593], [665, 142], [42, 160], [557, 232], [142, 121], [581, 51], [69, 311], [128, 114], [25, 654], [494, 128], [666, 362], [137, 685], [611, 486], [86, 686], [455, 423], [174, 685], [80, 679], [136, 437], [160, 114], [101, 98], [470, 470], [76, 76], [304, 304], [568, 129], [106, 340], [55, 305], [121, 174], [589, 459], [589, 434], [589, 106], [589, 671], [589, 365], [685, 137], [679, 663], [214, 413], [128, 16], [86, 117], [434, 424], [107, 687], [380, 391], [180, 129], [58, 5], [309, 221], [107, 258], [122, 351], [142, 210], [142, 236], [225, 282], [264, 608], [264, 213], [180, 284], [188, 311], [273, 46], [311, 188], [63, 665], [389, 394], [389, 486], [665, 63], [486, 458], [63, 194], [63, 195], [362, 506], [290, 584], [63, 434], [178, 61], [178, 629], [440, 177], [440, 61], [440, 629], [543, 688], [543, 689], [82, 82], [69, 473], [513, 272], [142, 23], [390, 181], [16, 128], [69, 184], [351, 191], [125, 125], [460, 233], [460, 473], [26, 23], [458, 440], [5, 279], [191, 681], [191, 682], [18, 17], [516, 5], [86, 37], [69, 190], [141, 510], [510, 141], [20, 173], [404, 371], [106, 690], [363, 114], [363, 169], [363, 367], [691, 691], [493, 280], [231, 692], [177, 61], [177, 629], [177, 440], [160, 103], [160, 393], [543, 542], [429, 100], [397, 295], [91, 64], [131, 366], [560, 29], [233, 460], [462, 212], [63, 132], [419, 329], [543, 292], [114, 363], [60, 179], [211, 411], [292, 543], [59, 5], [83, 693], [83, 373], [329, 419], [390, 389], [390, 390], [283, 16], [5, 59], [283, 589], [285, 285], [565, 266], [663, 663], [549, 694], [380, 157], [340, 78], [132, 63], [635, 137], [635, 4], [286, 285], [286, 211], [635, 520], [635, 286], [635, 2], [635, 63], [635, 126], [635, 285], [635, 208], [11, 608], [126, 211], [695, 695], [377, 174], [48, 263], [48, 361], [48, 442], [48, 245], [48, 443], [48, 76], [48, 417], [48, 485], [48, 113], [48, 444], [48, 423], [48, 171], [48, 547], [48, 333], [297, 696], [143, 329], [695, 607], [695, 259], [695, 189], [695, 21], [695, 222], [695, 227], [695, 315], [695, 459], [695, 317], [695, 85], [695, 106], [695, 228], [695, 20], [695, 316], [56, 532], [654, 25], [387, 385], [212, 462], [249, 506], [174, 377], [269, 211], [269, 174], [269, 365], [212, 329], [212, 28], [212, 128], [212, 114], [212, 81], [212, 355], [212, 367], [394, 14], [414, 697], [186, 165], [249, 301], [21, 695], [212, 169], [397, 296], [251, 340], [491, 695], [91, 89], [424, 308], [424, 283], [427, 282], [411, 58], [226, 85], [226, 317], [351, 377], [86, 340], [96, 304], [142, 427], [86, 417], [341, 297], [165, 186], [340, 86], [434, 89], [304, 96], [529, 525], [282, 427], [151, 34], [89, 434], [106, 160], [667, 550], [667, 549], [667, 161], [309, 297], [330, 64], [170, 64], [438, 114], [698, 698], [506, 249], [357, 64], [699, 406], [379, 174], [699, 700], [296, 342], [296, 203], [296, 351], [296, 179], [353, 99], [211, 4], [222, 459], [359, 533], [366, 142], [667, 128], [568, 401], [296, 379], [351, 179], [51, 581], [296, 397], [249, 128], [37, 86], [357, 62], [379, 296], [165, 128], [179, 342], [179, 296], [179, 203], [179, 351], [698, 305], [160, 35], [99, 353], [698, 285], [28, 160], [128, 256], [312, 85], [184, 287], [290, 231], [128, 165], [104, 320], [60, 103], [428, 461], [302, 333], [320, 104], [87, 115], [287, 184], [157, 179], [562, 654], [258, 357], [474, 419], [5, 669], [462, 701], [185, 323], [356, 107], [18, 160], [323, 185], [26, 24], [15, 269], [541, 162], [0, 581], [249, 365], [115, 87], [115, 155], [419, 474], [473, 184], [178, 539], [19, 666], [19, 661], [685, 175], [359, 11], [113, 455], [539, 178], [371, 371], [107, 153], [107, 77], [107, 17], [107, 173], [107, 169], [107, 46], [107, 326], [107, 671], [107, 355], [107, 367], [107, 702], [107, 453], [107, 295], [107, 45], [107, 147], [107, 249], [5, 211], [182, 213], [497, 562], [568, 290], [114, 438], [172, 61], [362, 421], [438, 116], [562, 497], [62, 410], [296, 256], [438, 113], [116, 438], [309, 316], [53, 466], [115, 42], [6, 516], [6, 517], [430, 430], [581, 133], [194, 5], [516, 6], [591, 591], [5, 194], [351, 157], [506, 362], [535, 554], [48, 643], [65, 172], [42, 106], [494, 318], [207, 201], [140, 6], [134, 554], [38, 370], [316, 309], [256, 296], [21, 107], [510, 510], [152, 121], [107, 230], [113, 339], [90, 220], [458, 275], [170, 107], [377, 280], [178, 380], [269, 533], [234, 654], [199, 174], [180, 180], [123, 115], [434, 303], [434, 371], [434, 295], [651, 301], [344, 177], [344, 344], [344, 178], [15, 335], [177, 177], [181, 172], [295, 434], [515, 515], [515, 494], [280, 377], [371, 404], [311, 268], [115, 280], [404, 434], [404, 185], [404, 97], [404, 323], [71, 152], [434, 404], [290, 329], [290, 357], [160, 467], [37, 229], [37, 28], [359, 359], [218, 17], [282, 366], [357, 290], [141, 506], [272, 15], [272, 273], [272, 274], [211, 5], [273, 139], [174, 158], [538, 92], [91, 90], [538, 538], [308, 320], [255, 256], [256, 81], [242, 234], [178, 413], [308, 21], [366, 367], [467, 160], [409, 90], [140, 46], [661, 264], [280, 115], [215, 268], [452, 264], [340, 598], [340, 554], [40, 24], [62, 310], [15, 274], [15, 334], [437, 136], [367, 655], [42, 129], [42, 128], [42, 215], [42, 434], [359, 498], [183, 353], [5, 305], [340, 371], [237, 237], [703, 703], [704, 704], [502, 502], [477, 477], [705, 705], [240, 240], [61, 178], [227, 227], [418, 190], [290, 706], [426, 425], [75, 427], [218, 133], [103, 393], [21, 62], [353, 183], [467, 62], [186, 70], [232, 277], [338, 169], [284, 301], [397, 320], [707, 19], [63, 481], [62, 21], [282, 586], [427, 115], [233, 83], [99, 62], [236, 234], [212, 144], [136, 170], [17, 393], [86, 290], [37, 23], [494, 395], [568, 65], [58, 282], [282, 58], [128, 42], [424, 74], [190, 418], [234, 235], [318, 113], [310, 1], [521, 598], [521, 553], [165, 409], [232, 14], [409, 165], [425, 257], [282, 474], [113, 494], [339, 27], [651, 254], [222, 221], [494, 515], [62, 467], [58, 84], [162, 541], [371, 340], [46, 446], [46, 428], [340, 251], [413, 450], [356, 81], [598, 340], [215, 42], [301, 118], [301, 624], [301, 13], [35, 27], [355, 355], [404, 708], [404, 353], [404, 618], [404, 662], [404, 709], [84, 58], [337, 96], [254, 256], [301, 284], [305, 698], [216, 429], [11, 359], [486, 318], [429, 592], [13, 128], [85, 443], [96, 337], [339, 165], [424, 280], [86, 96], [96, 86], [621, 11], [191, 148], [592, 429], [42, 493], [113, 96], [286, 138], [57, 520], [83, 285], [473, 6], [681, 157], [440, 380], [663, 375], [690, 222], [80, 106], [383, 383], [263, 86], [566, 8], [204, 94], [188, 667], [188, 473], [188, 80], [188, 663], [188, 549], [188, 69], [188, 418], [188, 184], [188, 508], [188, 679], [188, 671], [188, 710], [130, 130], [520, 57], [133, 493], [11, 621], [4, 412], [711, 711], [283, 83], [157, 681], [320, 389], [320, 393], [320, 320], [12, 267], [255, 712], [474, 111], [218, 482], [218, 340], [320, 397], [404, 233], [96, 455], [337, 135], [299, 171], [491, 163], [476, 112], [493, 133], [233, 212], [233, 82], [8, 566], [181, 14], [212, 233], [62, 113], [21, 121], [38, 245], [38, 417], [38, 547], [38, 48], [38, 171], [62, 571], [285, 132], [331, 459], [136, 455], [102, 412], [127, 189], [60, 181], [60, 219], [47, 86], [184, 173], [175, 137], [262, 180], [25, 36], [37, 34], [411, 271], [58, 107], [593, 377], [433, 49], [86, 184], [340, 218], [59, 59], [464, 455], [460, 462], [483, 47], [86, 310], [367, 256], [107, 58], [87, 513], [419, 143], [121, 283], [69, 325], [69, 713], [69, 10], [69, 508], [86, 172], [86, 714], [84, 282], [84, 31], [84, 366], [84, 110], [84, 250], [84, 111], [84, 142], [84, 715], [235, 238], [47, 483], [282, 84], [128, 64], [69, 667], [434, 401], [325, 69], [142, 248], [340, 62], [58, 154], [171, 38], [484, 83], [716, 716], [158, 158], [128, 143], [2, 481], [143, 478], [520, 155], [160, 430], [491, 491], [485, 113], [401, 434], [128, 167], [485, 485], [129, 62], [131, 717], [249, 147], [209, 319], [481, 6], [137, 121], [129, 280], [137, 63], [129, 526], [129, 426], [129, 53], [129, 133], [129, 232], [129, 440], [129, 14], [129, 403], [129, 292], [403, 129], [526, 129], [373, 372], [372, 107], [372, 366], [138, 211], [424, 174], [115, 494], [408, 130], [14, 129], [53, 129], [395, 389], [37, 35], [395, 379], [210, 209], [6, 481], [124, 124], [211, 138], [320, 181], [278, 183], [174, 424], [527, 527], [379, 395], [516, 411], [430, 160], [2, 665], [4, 586], [284, 5], [55, 718], [55, 208], [4, 107], [172, 130], [717, 717], [362, 141], [64, 306], [482, 218], [27, 24], [513, 87], [42, 667], [42, 20], [42, 245], [90, 108], [331, 166], [244, 234], [417, 438], [495, 256], [311, 16], [155, 520], [106, 256], [62, 133], [271, 366], [268, 221], [401, 493], [79, 162], [420, 568], [214, 483], [550, 81], [440, 533], [397, 719], [229, 37], [81, 550], [343, 343], [474, 282], [0, 221], [221, 268], [474, 494], [292, 62], [290, 86], [494, 474], [105, 163], [105, 83], [249, 141], [464, 493], [46, 448], [225, 17], [48, 229], [543, 168], [361, 116], [107, 532], [160, 337], [302, 96], [160, 336], [542, 450], [526, 576], [401, 172], [64, 128], [355, 128], [147, 189], [404, 125], [275, 275], [662, 404], [58, 96], [515, 64], [3, 236], [64, 515], [317, 85], [317, 312], [14, 232], [141, 62], [229, 48], [63, 57], [5, 284], [482, 419], [62, 141], [393, 308], [393, 380], [393, 384], [393, 386], [393, 387], [393, 389], [393, 391], [340, 107], [23, 417], [107, 340], [336, 27], [83, 105], [610, 235], [417, 23], [417, 29], [96, 92], [122, 376], [129, 35], [323, 101], [499, 61], [499, 182], [183, 301], [262, 402], [408, 194], [141, 44], [61, 499], [327, 325], [412, 683], [461, 140], [461, 446], [461, 428], [461, 447], [461, 448], [461, 429], [61, 172], [244, 235], [216, 140], [216, 139], [216, 428], [216, 272], [216, 274], [216, 448], [216, 46], [216, 45], [287, 189], [113, 486], [20, 62], [608, 720], [92, 96], [117, 189], [95, 377], [277, 284], [493, 413], [493, 515], [493, 168], [493, 172], [493, 450], [493, 440], [493, 275], [493, 93], [493, 458], [493, 464], [458, 493], [413, 493], [275, 493], [301, 183], [34, 54], [95, 205], [554, 482], [27, 25], [27, 26], [27, 27], [27, 28], [27, 29], [27, 30], [27, 721], [27, 31], [27, 32], [27, 722], [27, 33], [27, 34], [27, 35], [27, 36], [27, 37], [27, 38], [27, 39], [27, 40], [27, 588], [27, 545], [34, 361], [482, 554], [361, 136], [361, 34], [35, 129], [467, 86], [215, 223], [13, 165], [434, 280], [129, 291], [160, 135], [75, 135], [665, 175], [378, 393], [138, 286], [175, 665], [333, 455], [251, 123], [455, 464], [123, 251], [450, 493], [377, 95], [243, 80], [86, 47], [103, 368], [551, 723], [267, 12], [129, 46], [333, 333], [447, 440], [46, 129], [333, 443], [440, 447], [553, 553], [62, 151], [62, 367], [136, 361], [160, 576], [85, 314], [723, 551], [450, 160], [160, 361], [303, 630], [174, 520], [160, 446], [160, 136], [305, 5], [370, 333], [114, 212], [20, 92], [62, 158], [80, 243], [68, 663], [274, 15], [520, 174], [6, 376], [520, 281], [281, 520], [376, 6], [2, 59], [8, 672], [8, 510], [104, 61], [327, 10], [90, 329], [400, 86], [35, 33], [394, 385], [394, 250], [10, 327], [321, 321], [86, 400], [36, 165], [108, 375], [234, 269], [533, 121], [115, 113], [186, 254], [486, 114], [486, 245], [47, 168], [22, 35], [91, 329], [4, 59], [337, 169], [27, 361], [88, 88], [13, 329], [14, 14], [511, 420], [538, 326], [302, 88], [13, 23], [248, 297], [338, 724], [338, 437], [338, 336], [338, 136], [338, 439], [338, 135], [114, 444], [114, 114], [114, 423], [404, 612], [74, 317], [212, 283], [165, 29], [165, 725], [165, 33], [165, 34], [165, 35], [165, 338], [165, 38], [87, 474], [45, 216], [21, 489], [79, 133], [140, 15], [523, 522], [378, 103], [329, 363], [145, 546], [65, 426], [474, 108], [254, 492], [32, 113], [474, 328], [58, 175], [451, 566], [282, 318], [248, 696], [285, 58], [339, 339], [588, 588], [25, 10], [159, 159], [329, 13], [23, 13], [100, 117], [114, 486], [526, 526], [279, 279], [113, 32], [191, 180], [114, 547], [114, 339], [140, 644], [10, 25], [117, 100], [556, 464], [271, 64], [408, 5], [104, 181], [104, 250], [218, 1], [147, 160], [464, 556], [121, 533], [494, 377], [207, 95], [424, 109], [424, 429], [271, 717], [231, 122], [510, 8], [49, 49], [351, 350], [380, 120], [380, 101], [380, 65], [350, 352], [290, 108], [5, 644], [133, 79], [2, 208], [394, 379], [128, 283], [128, 365], [377, 390], [6, 408], [88, 96], [506, 19], [76, 48], [60, 376], [60, 172], [60, 167], [60, 231], [60, 122], [60, 95], [19, 506], [210, 363], [167, 60], [438, 338], [165, 547], [254, 651], [95, 60], [108, 357], [612, 121], [180, 70], [96, 88], [20, 11], [93, 95], [165, 13], [188, 42], [474, 87], [518, 16], [59, 586], [357, 589], [685, 54], [685, 57], [685, 520], [685, 58], [685, 63], [685, 59], [184, 68], [448, 15], [390, 377], [533, 58], [282, 371], [58, 254], [59, 685], [59, 4], [190, 420], [371, 282], [371, 100], [569, 44], [231, 60], [105, 154], [160, 380], [169, 212], [153, 282], [533, 266], [101, 380], [108, 329], [108, 290], [236, 3], [440, 515], [242, 210], [587, 3], [172, 450], [42, 188], [285, 4], [265, 525], [210, 242], [143, 340], [726, 342], [113, 115], [393, 212], [236, 587], [566, 666], [333, 361], [333, 417], [333, 444], [333, 318], [333, 442], [333, 423], [333, 245], [333, 47], [333, 76], [333, 48], [333, 485], [518, 282], [184, 509], [4, 285], [4, 58], [411, 717], [160, 474], [160, 258], [65, 380], [589, 283], [589, 83], [587, 236], [265, 266], [667, 6], [6, 667], [164, 269], [357, 568], [160, 557], [569, 451], [727, 464], [63, 420], [148, 191], [241, 236], [212, 393], [249, 222], [268, 311], [557, 160], [12, 569], [379, 394], [58, 408], [295, 215], [589, 357], [283, 288], [83, 199], [288, 283], [154, 105], [154, 533], [518, 154], [690, 189], [155, 154], [316, 459], [107, 280], [281, 56], [115, 420], [283, 106], [113, 280], [113, 107], [408, 6], [525, 265], [11, 20], [609, 609], [408, 4], [2, 5], [258, 105], [258, 434], [258, 365], [408, 412], [535, 134], [50, 643], [451, 569], [9, 452], [547, 339], [280, 107], [469, 375], [251, 339], [21, 728], [393, 533], [338, 252], [728, 21], [172, 401], [90, 143], [366, 74], [369, 630], [545, 36], [458, 568], [525, 729], [306, 723], [525, 407], [525, 505], [525, 421], [491, 453], [491, 117], [31, 36], [407, 44], [407, 502], [407, 503], [407, 406], [407, 504], [407, 505], [407, 358], [407, 506], [419, 78], [339, 251], [450, 568], [533, 87], [179, 156], [533, 393], [329, 568], [420, 13], [66, 329], [168, 47], [167, 491], [238, 158], [168, 491], [249, 569], [238, 412], [22, 258], [371, 101], [420, 63], [183, 356], [183, 80], [183, 375], [183, 184], [183, 357], [116, 245], [212, 82], [149, 180], [82, 249], [491, 127], [80, 183], [31, 155], [338, 256], [570, 570], [546, 144], [546, 23], [62, 99], [121, 249], [113, 485], [417, 361], [361, 417], [153, 142], [366, 372], [100, 371], [258, 22], [366, 317], [317, 366], [730, 62], [18, 221], [397, 379], [713, 81], [314, 160], [569, 249], [389, 64], [478, 543], [478, 424], [105, 256], [5, 379], [5, 157], [5, 191], [184, 357], [82, 161], [121, 371], [82, 46], [121, 362], [121, 127], [82, 329], [121, 468], [82, 495], [155, 87], [82, 236], [82, 214], [82, 179], [82, 28], [121, 531], [82, 81], [520, 4], [82, 367], [82, 203], [82, 568], [121, 642], [121, 114], [121, 128], [121, 130], [121, 169], [121, 296], [121, 129], [121, 187], [121, 36], [121, 18], [121, 63], [179, 214], [114, 121], [121, 210], [148, 148], [165, 36], [82, 303], [560, 84], [520, 208], [568, 357], [137, 62], [568, 458], [338, 365], [731, 731], [129, 63], [490, 490], [389, 379], [732, 732], [321, 61], [63, 129], [281, 5], [281, 64], [281, 408], [128, 207], [85, 85], [211, 661], [198, 41], [5, 281], [306, 733], [13, 214], [13, 340], [17, 62], [181, 219], [84, 560], [385, 377], [377, 734], [377, 495], [377, 219], [377, 167], [377, 214], [377, 450], [377, 148], [377, 402], [377, 129], [377, 468], [377, 228], [421, 525], [357, 329], [128, 526], [155, 31], [62, 17], [169, 36], [86, 480], [17, 121], [593, 128], [507, 507], [526, 128], [133, 114], [143, 357], [480, 166], [170, 36], [170, 367], [109, 108], [62, 554], [62, 134], [114, 133], [592, 334], [173, 538], [401, 526], [218, 18], [133, 531], [133, 256], [133, 445], [326, 420], [329, 91], [176, 515], [215, 1], [215, 74], [215, 309], [215, 248], [215, 313], [215, 297], [215, 227], [215, 73], [215, 17], [215, 341], [515, 176], [143, 62], [98, 404], [129, 296], [310, 17], [110, 108], [110, 111], [322, 735], [328, 494], [337, 420], [4, 520], [22, 22], [25, 38], [25, 40], [183, 329], [484, 572], [303, 369], [241, 234], [406, 332], [329, 183], [81, 161], [11, 421], [147, 1], [147, 329], [147, 85], [147, 106], [147, 316], [160, 397], [665, 254], [74, 309], [251, 26], [18, 218], [26, 251], [367, 16], [367, 36], [367, 170], [108, 420], [108, 328], [166, 44], [328, 108], [18, 167], [58, 137], [82, 187], [82, 18], [82, 468], [178, 275], [283, 303], [424, 188], [424, 81], [283, 372], [393, 157], [393, 396], [35, 29], [394, 103], [264, 61], [325, 10], [114, 160], [406, 44], [406, 502], [406, 503], [406, 504], [406, 505], [406, 358], [406, 506], [12, 681], [355, 249], [135, 116], [736, 736], [7, 452], [61, 264], [60, 283], [681, 12], [21, 82], [116, 135], [737, 271], [232, 280], [194, 55], [6, 397], [6, 305], [321, 393], [21, 42], [62, 404], [82, 21], [256, 82], [132, 282], [404, 62], [173, 325], [173, 10], [173, 326], [142, 74], [293, 293], [105, 21], [495, 283], [569, 12], [112, 375], [112, 357], [76, 485], [493, 399], [481, 738], [543, 543], [286, 126], [485, 76], [278, 121], [82, 227], [493, 270], [493, 290], [493, 568], [7, 421], [156, 191], [473, 667], [283, 60], [57, 57], [473, 473], [82, 326], [82, 44], [82, 739], [82, 462], [568, 493], [82, 10], [305, 6], [82, 280], [82, 129], [82, 567], [82, 63], [82, 740], [82, 550], [161, 161], [82, 296], [82, 395], [165, 340], [82, 77], [282, 132], [147, 612], [232, 219], [741, 179], [58, 520], [191, 156], [166, 373], [144, 546], [179, 345], [142, 254], [82, 228], [166, 742], [733, 420], [81, 105], [82, 555], [280, 493], [743, 516], [743, 517], [738, 305], [159, 11], [61, 64], [121, 21], [473, 108], [492, 152], [64, 61], [152, 492], [214, 377], [108, 473], [744, 744], [41, 107], [160, 58], [117, 121], [369, 303], [133, 308], [172, 219], [308, 133], [63, 16], [281, 3], [283, 495], [415, 697], [285, 137], [432, 217], [211, 82], [395, 494], [516, 743], [136, 169], [48, 96], [235, 234], [126, 286], [494, 506], [29, 113], [29, 417], [29, 21], [282, 509], [434, 419], [409, 117], [21, 29], [419, 434], [96, 48], [455, 417], [417, 455], [455, 263], [329, 367], [108, 81], [44, 161], [466, 506], [411, 285], [411, 211], [44, 106], [70, 180], [354, 100], [117, 409], [249, 44], [100, 354], [87, 533], [65, 94], [377, 385], [434, 356], [36, 23], [232, 380], [254, 58], [249, 183], [434, 154], [312, 62], [367, 329], [44, 249], [423, 114], [745, 189], [358, 43], [407, 566], [107, 100], [643, 48], [515, 458], [183, 249], [169, 366], [62, 312], [176, 486], [107, 128], [107, 41], [243, 507], [258, 108], [234, 159], [234, 233], [234, 237], [234, 319], [234, 238], [234, 637], [234, 158], [234, 240], [234, 241], [234, 243], [234, 639], [234, 587], [234, 244], [128, 215], [647, 420], [167, 377], [132, 16], [370, 547], [249, 371], [249, 404], [424, 367], [506, 494], [180, 681], [24, 27], [164, 15], [154, 434], [57, 481], [218, 307], [218, 308], [218, 177], [218, 309], [218, 215], [218, 248], [218, 120], [218, 220], [218, 310], [218, 85], [218, 311], [218, 221], [218, 312], [218, 222], [218, 313], [218, 223], [218, 0], [218, 224], [218, 314], [218, 225], [218, 315], [218, 226], [218, 73], [218, 316], [218, 317], [218, 228], [249, 493], [14, 493], [325, 327], [424, 474], [16, 63], [66, 108], [137, 571], [493, 434], [493, 41], [207, 128], [493, 180], [275, 458], [493, 425], [493, 403], [145, 249], [197, 201], [198, 229], [113, 301], [481, 57], [232, 440], [440, 232], [16, 132], [100, 107], [100, 102], [94, 200], [102, 100], [16, 174], [283, 601], [14, 289], [14, 277], [14, 203], [14, 284], [141, 11], [114, 82], [114, 434], [11, 141], [22, 137], [320, 377], [463, 462], [746, 746], [69, 80], [215, 128], [301, 113], [180, 493], [304, 211], [87, 153], [44, 406], [132, 424], [253, 282], [68, 184], [200, 204], [68, 20], [345, 256], [434, 493], [434, 114], [33, 438], [373, 714], [106, 298], [106, 582], [399, 493], [547, 113], [0, 18], [366, 169], [0, 734], [29, 29], [116, 96], [434, 41], [434, 368], [665, 121], [419, 493], [734, 0], [438, 33], [371, 249], [376, 64], [93, 172], [329, 290], [371, 434], [376, 203], [83, 747], [504, 293], [121, 107], [34, 23], [298, 106], [38, 23], [40, 23], [28, 39], [183, 655], [18, 0], [493, 419], [743, 102], [515, 593], [515, 94], [22, 173], [255, 16], [282, 253], [5, 42], [42, 5], [174, 665], [259, 92], [34, 27], [557, 133], [123, 169], [281, 174], [645, 231], [107, 665], [330, 73], [156, 342], [7, 510], [16, 255], [424, 16], [360, 359], [81, 21], [92, 259], [179, 149], [63, 236], [231, 645], [183, 286], [183, 478], [183, 81], [263, 419], [193, 194], [506, 2], [29, 229], [473, 81], [311, 420], [434, 168], [419, 263], [511, 511], [165, 437], [63, 89], [160, 417], [21, 81], [62, 90], [233, 88], [233, 586], [31, 438], [438, 31], [438, 308], [361, 370], [361, 318], [361, 547], [361, 171], [466, 213], [75, 437], [179, 284], [0, 178], [87, 434], [14, 47], [297, 248], [103, 546], [453, 160], [48, 318], [133, 155], [707, 700], [661, 19], [2, 506], [308, 438], [373, 373], [437, 75], [176, 381], [371, 99], [251, 135], [373, 706], [663, 68], [502, 499], [502, 406], [66, 146], [58, 105], [54, 305], [748, 107], [748, 62], [146, 66], [738, 211], [4, 571], [494, 328], [20, 68], [434, 214], [434, 35], [434, 170], [434, 367], [135, 75], [214, 434], [390, 385], [92, 678], [132, 256], [35, 434], [144, 283], [177, 5], [177, 64], [738, 55], [178, 0], [421, 362], [293, 504], [170, 336], [0, 380], [327, 473], [473, 327], [226, 17], [6, 411], [11, 270], [124, 404], [305, 54], [11, 233], [371, 106], [231, 203], [6, 54], [6, 234], [172, 214], [526, 399], [411, 5], [531, 78], [531, 445], [256, 132], [284, 749], [401, 401], [321, 160], [408, 137], [93, 129], [93, 143], [567, 567], [165, 464], [632, 397], [397, 632], [337, 338], [30, 28], [385, 390], [385, 395], [435, 647], [435, 127], [395, 385], [395, 296], [491, 390], [487, 451], [750, 88], [54, 6], [158, 639], [434, 420], [235, 610], [45, 140], [638, 355], [261, 30], [282, 546], [171, 299], [212, 152], [486, 292], [309, 17], [89, 304], [89, 89], [89, 252], [337, 123], [397, 6], [397, 64], [698, 58], [184, 627], [380, 232], [107, 133], [409, 418], [370, 361], [409, 326], [69, 480], [42, 105], [339, 361], [339, 417], [339, 547], [15, 448], [480, 69], [6, 751], [82, 422], [234, 6], [619, 613], [350, 350], [376, 393], [350, 593], [350, 204], [350, 94], [133, 107], [420, 434], [270, 280], [155, 128], [300, 419], [482, 450], [89, 63], [226, 212], [116, 337], [506, 247], [171, 361], [273, 273], [3, 665], [174, 281], [337, 116], [171, 114], [152, 212], [212, 226], [528, 6], [421, 466], [283, 380], [283, 181], [283, 215], [283, 389], [283, 390], [283, 61], [283, 392], [283, 394], [283, 296], [283, 395], [283, 14], [283, 377], [283, 368], [283, 104], [283, 321], [283, 295], [45, 272], [283, 693], [283, 494], [283, 752], [283, 86], [283, 160], [283, 594], [13, 21], [753, 151], [213, 466], [264, 161], [25, 34], [237, 234], [19, 293], [570, 264], [173, 22], [738, 481], [665, 3], [429, 429], [44, 358], [249, 153], [627, 420], [129, 714], [177, 229], [161, 121], [51, 128], [397, 397], [397, 157], [389, 296], [44, 374], [266, 266], [458, 168], [114, 443], [114, 442], [114, 47], [114, 76], [114, 485], [123, 337], [367, 424], [114, 171], [338, 170], [370, 33], [530, 161], [211, 304], [21, 13], [21, 137], [85, 312], [304, 420], [358, 406], [24, 23], [720, 720], [24, 494], [464, 165], [183, 223], [217, 162], [217, 612], [217, 643], [217, 654], [31, 256], [137, 21], [217, 50], [217, 282], [217, 431], [217, 160], [217, 142], [107, 170], [624, 13], [96, 318], [217, 121], [590, 28], [183, 142], [277, 296], [461, 533], [159, 89], [420, 304], [21, 283], [434, 166], [433, 364], [337, 170], [86, 601], [277, 232], [277, 231], [720, 608], [720, 555], [720, 324], [720, 266], [720, 754], [177, 380], [482, 482], [178, 157], [106, 1], [285, 683], [170, 337], [478, 329], [755, 211], [377, 526], [377, 312], [377, 548], [377, 491], [377, 292], [474, 90], [8, 358], [480, 92], [142, 152], [245, 116], [340, 165], [13, 443], [292, 377], [62, 211], [336, 400], [504, 7], [35, 39], [714, 129], [237, 210], [304, 89], [69, 69], [147, 424], [62, 427], [172, 493], [172, 464], [172, 197], [172, 342], [172, 128], [172, 351], [172, 483], [390, 491], [121, 180], [582, 189], [430, 365], [254, 74], [74, 254], [163, 459], [520, 303], [520, 89], [158, 107], [566, 421], [566, 570], [46, 106], [256, 107], [106, 46], [28, 29], [28, 30], [378, 128], [281, 698], [93, 183], [64, 397], [171, 171], [377, 379], [377, 380], [377, 381], [377, 382], [377, 383], [377, 384], [377, 283], [377, 386], [377, 387], [377, 388], [377, 389], [377, 391], [377, 392], [377, 393], [377, 395], [377, 396], [377, 397], [377, 398], [128, 378], [294, 203], [5, 437], [506, 699], [114, 106], [513, 518], [513, 340], [513, 226], [513, 184], [157, 178], [645, 697], [280, 232], [266, 267], [400, 336], [266, 608], [266, 265], [266, 264], [530, 365], [208, 285], [15, 140], [21, 420], [22, 520], [137, 22], [282, 183], [215, 756], [424, 147], [549, 69], [178, 200], [99, 124], [99, 100], [69, 418], [526, 377], [437, 5], [336, 260], [148, 262], [399, 183], [434, 550], [434, 44], [434, 184], [434, 190], [160, 318], [222, 560], [531, 106], [124, 708], [86, 74], [237, 162], [434, 42], [260, 336], [434, 243], [74, 86], [138, 56], [264, 661], [31, 367], [243, 434], [409, 51], [160, 401], [140, 45], [98, 98], [267, 266], [107, 254], [17, 654], [751, 6], [264, 533], [249, 107], [282, 269], [96, 100], [363, 531], [12, 674], [210, 256], [210, 83], [56, 138], [65, 581], [286, 56], [158, 234], [158, 240], [140, 282], [58, 212], [474, 66], [474, 476], [474, 477], [474, 514], [212, 58], [213, 407], [424, 311], [100, 96], [420, 278], [131, 83], [489, 21], [301, 301], [674, 12], [70, 62], [128, 196], [282, 173], [58, 249], [145, 462], [380, 379], [380, 396], [247, 506], [5, 125], [282, 288], [175, 58], [466, 406], [440, 264], [572, 484], [124, 424], [181, 103], [89, 520], [496, 602], [160, 173], [380, 376], [380, 397], [86, 458], [409, 244], [458, 86], [314, 107], [376, 380], [107, 314], [115, 82], [115, 121], [318, 114], [57, 63], [107, 480], [183, 93], [284, 180], [62, 480], [261, 438], [278, 493], [57, 89], [438, 261], [738, 54], [738, 738], [738, 281], [738, 552], [271, 271], [190, 105], [82, 115], [367, 434], [340, 339], [57, 286], [367, 757], [244, 409], [506, 105], [69, 509], [3, 175], [0, 0], [6, 528], [418, 69], [470, 590], [146, 187], [538, 530], [139, 45], [392, 86], [106, 129], [106, 81], [86, 392], [489, 528], [106, 303], [151, 29], [288, 282], [151, 753], [256, 425], [478, 469], [151, 39], [756, 215], [478, 143], [478, 356], [478, 66], [478, 108], [478, 110], [478, 91], [478, 476], [478, 111], [478, 112], [478, 328], [478, 477], [478, 258], [478, 478], [478, 90], [89, 57], [151, 30], [469, 478], [662, 282], [678, 92], [282, 662], [151, 417], [100, 98], [86, 627], [489, 644], [453, 87], [98, 100], [87, 453], [553, 134], [582, 106], [420, 511], [366, 758], [420, 21], [397, 393], [122, 191], [258, 143], [258, 356], [258, 66], [258, 110], [258, 375], [258, 91], [258, 476], [258, 111], [258, 112], [258, 328], [258, 477], [258, 478], [258, 90], [474, 469], [166, 114], [151, 361], [526, 515], [292, 284], [326, 173], [430, 506], [480, 494], [283, 21], [114, 166], [141, 566], [152, 256], [345, 346], [345, 681], [345, 352], [420, 174], [115, 455], [214, 172], [346, 345], [469, 474], [173, 282], [515, 232], [485, 423], [90, 328], [345, 342], [690, 106], [362, 602], [174, 420], [58, 193], [7, 504], [681, 345], [681, 180], [172, 403], [172, 585], [172, 486], [172, 292], [172, 65], [357, 81], [184, 329], [180, 352], [183, 410], [645, 156], [352, 180], [193, 58], [349, 5], [458, 623], [81, 357], [81, 183], [6, 349], [345, 343], [666, 267], [74, 690], [549, 667], [747, 509], [674, 267], [467, 189], [329, 184], [135, 115], [332, 406], [161, 267], [164, 107], [164, 62], [161, 19], [340, 212], [546, 272], [759, 459], [343, 345], [212, 340], [233, 612], [424, 552], [592, 579], [592, 140], [592, 461], [592, 139], [592, 15], [592, 446], [592, 760], [592, 335], [592, 273], [592, 428], [592, 447], [592, 617], [592, 272], [592, 274], [592, 164], [592, 448], [592, 735], [592, 216], [592, 322], [592, 46], [661, 267], [127, 37], [322, 533], [700, 267], [30, 32], [288, 432], [36, 545], [180, 231], [552, 132], [231, 180], [590, 590], [334, 139], [404, 152], [21, 367], [21, 214], [168, 399], [168, 403], [685, 685], [661, 247], [214, 21], [247, 267], [183, 172], [183, 280], [183, 526], [183, 203], [183, 291], [183, 568], [726, 282], [125, 5], [183, 714], [183, 450], [393, 382], [393, 283], [393, 761], [662, 166], [720, 699], [107, 164], [612, 233], [160, 250], [434, 509], [206, 546], [517, 411], [162, 393], [69, 434], [62, 296], [478, 105], [434, 440], [565, 324], [184, 69], [173, 535], [173, 62], [173, 462], [44, 324], [81, 663], [686, 21], [559, 559], [411, 517], [361, 107], [128, 166], [440, 434], [608, 406], [321, 697], [5, 76], [5, 74], [266, 440], [211, 137], [211, 363], [211, 66], [211, 252], [211, 121], [211, 48], [211, 480], [21, 686], [379, 376], [379, 295], [440, 266], [324, 19], [258, 559], [99, 404], [263, 547], [13, 576], [88, 302], [338, 211], [19, 44], [497, 440], [166, 128], [223, 105], [117, 211], [14, 270], [14, 196], [14, 168], [14, 167], [14, 291], [14, 231], [14, 130], [14, 292], [137, 56], [440, 497], [394, 389], [138, 481], [361, 62], [282, 373], [123, 681], [551, 733], [397, 380], [335, 760], [498, 569], [187, 183], [169, 41], [62, 142], [493, 183], [169, 337], [169, 336], [307, 376], [611, 292], [197, 51], [270, 611], [434, 87], [546, 187], [283, 249], [611, 211], [357, 143], [51, 205], [570, 661], [277, 289], [284, 14], [244, 233], [107, 329], [520, 2], [733, 551], [329, 107], [681, 123], [552, 552], [200, 440], [82, 226], [65, 65], [107, 405], [82, 420], [82, 489], [20, 728], [82, 544], [82, 490], [506, 430], [82, 576], [516, 762], [516, 102], [142, 667], [352, 345], [570, 161], [588, 600], [763, 763], [4, 281], [430, 246], [324, 44], [230, 82], [230, 121], [226, 82], [205, 128], [166, 355], [387, 380], [0, 459], [166, 431], [401, 160], [82, 230], [247, 661], [113, 48], [160, 242], [160, 150], [28, 363], [107, 361], [68, 671], [520, 22], [92, 287], [68, 474], [210, 489], [278, 168], [278, 129], [728, 20], [68, 509], [245, 443], [168, 278], [489, 210], [143, 419], [48, 105], [300, 405], [674, 430], [20, 259], [375, 282], [21, 715], [492, 64], [338, 62], [21, 329], [21, 28], [21, 114], [21, 169], [21, 642], [21, 44], [170, 254], [249, 405], [169, 21], [21, 278], [21, 314], [21, 1], [21, 129], [21, 128], [174, 199], [506, 238], [238, 506], [195, 208], [314, 21], [210, 129], [160, 145], [461, 624], [450, 482], [375, 89], [215, 400], [282, 375], [169, 136], [169, 135], [86, 238], [238, 86], [340, 419], [57, 285], [642, 21], [254, 170], [265, 608], [272, 272], [520, 685], [286, 571], [134, 535], [116, 133], [380, 385], [380, 387], [493, 256], [566, 247], [566, 707], [566, 700], [351, 363], [454, 62], [287, 92], [600, 588], [385, 393], [62, 454], [301, 155], [346, 206], [458, 280], [232, 483], [726, 152], [726, 612], [498, 360], [450, 82], [360, 498], [212, 170], [393, 719], [170, 212], [681, 352], [65, 199], [474, 513], [132, 107], [351, 329], [351, 495], [351, 161], [351, 371], [351, 296], [351, 203], [495, 351], [370, 113], [506, 441], [593, 214], [317, 310], [351, 28], [351, 303], [351, 210], [351, 81], [166, 434], [329, 351], [483, 764], [20, 459], [285, 57], [410, 183], [194, 63], [405, 300], [352, 546], [260, 508], [535, 173], [212, 269], [286, 183], [400, 215], [720, 11], [13, 171], [441, 546], [221, 403], [437, 165], [58, 411], [403, 221], [199, 65], [180, 347], [499, 440], [520, 3], [278, 278], [399, 168], [612, 356], [504, 430], [504, 246], [504, 765], [329, 106], [282, 153], [54, 481], [57, 412], [766, 340], [57, 211], [107, 106], [212, 550], [212, 459], [212, 576], [212, 589], [212, 296], [212, 490], [212, 223], [212, 544], [212, 106], [212, 174], [180, 277], [141, 8], [323, 2], [107, 132], [62, 450], [481, 54], [174, 303], [174, 210], [174, 211], [498, 65], [236, 240], [62, 168], [550, 212], [340, 535], [65, 498], [440, 499], [363, 384], [103, 150], [406, 43], [406, 500], [406, 501], [406, 407], [76, 75], [260, 311], [135, 337], [189, 459], [28, 351], [47, 172], [221, 226], [450, 212], [11, 720], [450, 62], [82, 80], [62, 236], [363, 152], [61, 533], [169, 450], [340, 450], [288, 654], [215, 690], [82, 209], [82, 210], [82, 190], [82, 184], [82, 543], [297, 260], [498, 466], [236, 211], [236, 62], [82, 767], [82, 4], [431, 80], [255, 212], [115, 142], [311, 260], [212, 255], [83, 420], [13, 266], [101, 371], [690, 215], [233, 105], [381, 60], [334, 592], [448, 592], [322, 592], [140, 592], [447, 592], [46, 592], [495, 460], [579, 592], [105, 233], [105, 48], [211, 236], [106, 212], [106, 329], [164, 592], [80, 431], [80, 508], [466, 362], [466, 602], [346, 291], [124, 45], [460, 419], [460, 495], [340, 179], [356, 612], [529, 441], [192, 4], [516, 516], [76, 455], [760, 15], [760, 335], [213, 707], [60, 381], [60, 295], [6, 206], [614, 106], [513, 92], [340, 166], [251, 136], [337, 115], [92, 513], [441, 529], [166, 601], [569, 430], [226, 221], [466, 265], [560, 222], [376, 122], [11, 666], [495, 367], [272, 592], [351, 283], [351, 256], [351, 364], [351, 106], [351, 129], [351, 365], [351, 249], [306, 326], [311, 17], [50, 50], [168, 113], [168, 35], [322, 272], [707, 267], [707, 265], [424, 115], [360, 371], [139, 592], [124, 371], [426, 401], [726, 106], [303, 363], [738, 59], [172, 280], [172, 655], [155, 495], [155, 106], [40, 361], [51, 399], [495, 155], [333, 107], [426, 426], [426, 621], [426, 568], [426, 130], [426, 257], [172, 47], [690, 282], [145, 106], [160, 323], [367, 495], [87, 155], [87, 615], [87, 518], [87, 363], [87, 546], [471, 671], [84, 431], [38, 438], [166, 107], [222, 187], [323, 160], [106, 155], [367, 212], [107, 333], [332, 699], [115, 434], [434, 115], [141, 86], [440, 493], [46, 434], [438, 38], [753, 470], [278, 130], [434, 46], [115, 424], [246, 430], [80, 82], [359, 466], [340, 310], [63, 411], [12, 466], [68, 667], [68, 473], [68, 550], [68, 549], [68, 508], [491, 548], [89, 91], [161, 363], [461, 118], [461, 13], [181, 378], [181, 384], [181, 388], [181, 295], [101, 768], [310, 340], [549, 68], [679, 375], [549, 221], [221, 549], [13, 461], [502, 506], [105, 329], [105, 362], [329, 105], [31, 142], [122, 180], [122, 60], [172, 60], [15, 592], [62, 255], [495, 169], [142, 31], [464, 727], [337, 136], [140, 461], [6, 375], [209, 96], [326, 306], [6, 515], [282, 401], [44, 166], [309, 5], [62, 769], [64, 280], [64, 94], [236, 236], [6, 139], [254, 144], [689, 689], [92, 498], [310, 445], [283, 388], [300, 102], [375, 6], [180, 178], [462, 106], [435, 533], [20, 72], [106, 87], [106, 145], [566, 451], [180, 350], [363, 661], [434, 183], [37, 261], [5, 309], [430, 360], [353, 708], [353, 124], [353, 98], [353, 97], [353, 687], [353, 323], [353, 618], [353, 770], [353, 662], [353, 101], [353, 709], [434, 198], [187, 222], [371, 365], [450, 280], [59, 738], [515, 6], [108, 91], [108, 474], [183, 434], [87, 642], [87, 495], [87, 255], [87, 490], [87, 106], [137, 54], [105, 183], [105, 155], [105, 160], [105, 771], [105, 424], [101, 353], [58, 281], [106, 371], [127, 105], [63, 256], [498, 92], [376, 376], [201, 201], [772, 772], [8, 8], [773, 773], [296, 380], [296, 105], [294, 294], [411, 516], [517, 517], [6, 644], [314, 105], [400, 259], [54, 137], [147, 615], [249, 7], [377, 277], [377, 231], [377, 122], [377, 575], [97, 768], [7, 249], [327, 327], [420, 654], [420, 118], [176, 593], [176, 94], [282, 4], [494, 280], [285, 774], [494, 340], [0, 215], [640, 124], [210, 234], [467, 166], [64, 244], [57, 532], [560, 775], [560, 328], [194, 411], [194, 238], [560, 361], [560, 27], [560, 75], [560, 229], [560, 336], [560, 48], [560, 39], [231, 434], [238, 194], [434, 231], [400, 20], [20, 400], [26, 27], [256, 495], [195, 533], [4, 282], [54, 194], [229, 177], [57, 685], [24, 64], [259, 400], [280, 494], [64, 24], [12, 7], [12, 365], [278, 214], [353, 353], [366, 253], [98, 86], [160, 163], [41, 776], [10, 173], [225, 1], [474, 249], [212, 450], [156, 697], [156, 645], [164, 395], [249, 474], [526, 401], [180, 301], [305, 132], [113, 168], [412, 137], [61, 483], [483, 61], [182, 379], [182, 157], [666, 566], [48, 211], [554, 777], [266, 7], [328, 91], [618, 618], [563, 272], [320, 295], [160, 128], [403, 168], [348, 180], [290, 62], [406, 525], [494, 375], [64, 420], [60, 352], [20, 20], [318, 455], [420, 64], [424, 256], [455, 318], [292, 611], [160, 130], [328, 474], [328, 478], [28, 37], [184, 6], [15, 46], [474, 434], [370, 423], [6, 184], [82, 180], [82, 278], [82, 1], [82, 17], [82, 340], [282, 290], [641, 641], [423, 370], [121, 441], [121, 44], [82, 493], [121, 420], [370, 725], [121, 489], [82, 128], [82, 41], [82, 642], [82, 163], [82, 453], [82, 474], [121, 256], [121, 462], [82, 173], [82, 114], [121, 153], [121, 355], [121, 404], [121, 269], [121, 46], [121, 303], [121, 367], [121, 115], [121, 28], [121, 23], [121, 495], [121, 147], [237, 244], [395, 396], [40, 261], [679, 679], [778, 85], [323, 354], [323, 124], [323, 353], [323, 371], [323, 99], [323, 125], [92, 530], [142, 353], [142, 285], [282, 357], [434, 474], [420, 326], [358, 44], [160, 80], [121, 58], [251, 437], [295, 308], [408, 212], [312, 17], [40, 151], [212, 408], [45, 164], [644, 6], [430, 14], [251, 455], [171, 455], [128, 200], [17, 107], [137, 408], [137, 281], [428, 651], [698, 208], [375, 494], [448, 335], [615, 106], [183, 256], [200, 128], [128, 160], [274, 46], [121, 285], [121, 211], [121, 183], [121, 137], [410, 82], [376, 379], [165, 160], [552, 58], [183, 121], [183, 82], [266, 61], [405, 365], [408, 286], [4, 408], [201, 199], [140, 617], [229, 119], [81, 549], [81, 671], [229, 115], [115, 229], [44, 16], [244, 237], [434, 329], [301, 337], [459, 560], [329, 434], [285, 698], [176, 214], [455, 171], [489, 212], [672, 430], [124, 99], [214, 176], [146, 779], [151, 367], [180, 644], [306, 728], [121, 366], [121, 612], [318, 361], [318, 417], [318, 443], [318, 263], [318, 444], [318, 318], [318, 442], [318, 547], [318, 423], [318, 245], [318, 47], [318, 76], [318, 485], [318, 171], [318, 64], [245, 455], [84, 233], [84, 510], [84, 601], [84, 780], [84, 269], [84, 474], [84, 254], [84, 585], [585, 84], [160, 251], [251, 160], [254, 345], [254, 180], [254, 1], [254, 227], [254, 17], [254, 340], [254, 173], [254, 531], [254, 77], [254, 493], [254, 129], [254, 128], [254, 41], [254, 642], [254, 453], [254, 393], [254, 296], [254, 329], [254, 474], [26, 654], [254, 21], [254, 114], [254, 427], [254, 367], [254, 169], [254, 28], [254, 23], [254, 441], [254, 44], [493, 254], [198, 434], [254, 371], [254, 404], [254, 269], [254, 46], [424, 44], [212, 489], [254, 233], [254, 210], [254, 303], [254, 252], [82, 355], [504, 44], [254, 63], [254, 495], [254, 147], [254, 81], [254, 420], [24, 654], [254, 490], [160, 352], [254, 462], [450, 419], [254, 174], [254, 153], [254, 355], [254, 255], [254, 165], [254, 106], [32, 654], [537, 781], [85, 778], [644, 180], [37, 25], [37, 26], [37, 27], [37, 29], [37, 721], [37, 31], [37, 32], [37, 33], [37, 38], [37, 39], [37, 40], [37, 588], [37, 545], [74, 460], [723, 538], [661, 754], [212, 493], [21, 254], [493, 212], [547, 340], [526, 782], [243, 233], [180, 212], [254, 458], [458, 254], [212, 180], [97, 185], [107, 493], [370, 318], [370, 442], [370, 245], [370, 171], [362, 6], [124, 282], [210, 241], [105, 166], [105, 282], [105, 601], [105, 87], [105, 546], [185, 97], [61, 266], [332, 358], [249, 495], [447, 335], [127, 160], [200, 593], [335, 447], [495, 249], [94, 128], [303, 212], [377, 352], [545, 438], [621, 377], [157, 719], [438, 545], [352, 60], [5, 183], [183, 5], [136, 151], [783, 654], [538, 173], [71, 121], [494, 141], [238, 234], [547, 361], [254, 84], [259, 173], [284, 133], [79, 531], [79, 339], [419, 419], [666, 141], [165, 531], [155, 1], [86, 85], [182, 719], [86, 141], [107, 74], [654, 783], [400, 173], [494, 484], [388, 384], [108, 143], [108, 356], [108, 477], [108, 514], [108, 258], [108, 478], [108, 90], [35, 168], [155, 223], [160, 441], [161, 44], [22, 127], [269, 5], [17, 155], [538, 498], [96, 209], [87, 427], [127, 22], [107, 290], [408, 58], [48, 36], [97, 354], [97, 124], [97, 353], [97, 371], [97, 404], [97, 125], [99, 371], [327, 249], [212, 303], [86, 506], [173, 105], [254, 290], [69, 663], [498, 362], [498, 141], [21, 434], [397, 381], [642, 212], [212, 642], [405, 107], [62, 290], [381, 397], [62, 282], [70, 84], [163, 212], [41, 212], [242, 159], [212, 163], [103, 60], [434, 544], [269, 212], [212, 41], [285, 412], [573, 573], [340, 547], [288, 105], [114, 419], [39, 34], [114, 254], [484, 494], [115, 166], [213, 498], [359, 699], [359, 502], [359, 608], [359, 265], [359, 267], [359, 570], [359, 754], [359, 707], [359, 672], [74, 107], [411, 784], [83, 282], [83, 121], [83, 142], [62, 83], [5, 269], [308, 434], [532, 532], [405, 495], [101, 65], [282, 441], [282, 196], [589, 589], [282, 184], [405, 748], [290, 282], [549, 212], [167, 231], [549, 325], [65, 101], [231, 168], [212, 549], [168, 167], [168, 231], [69, 550], [268, 227], [743, 743], [114, 464], [231, 167], [434, 308], [128, 107], [392, 104], [544, 129], [318, 420], [420, 212], [544, 212], [185, 708], [185, 124], [185, 98], [185, 687], [185, 371], [185, 618], [185, 640], [185, 768], [185, 99], [185, 404], [185, 100], [185, 662], [185, 125], [185, 101], [185, 709], [589, 212], [82, 107], [82, 62], [82, 612], [196, 16], [212, 420], [261, 116], [62, 82], [405, 102], [231, 277], [108, 69], [62, 203], [158, 174], [145, 571], [91, 212], [346, 181], [492, 212], [164, 272], [132, 532], [419, 114], [538, 306], [267, 61], [355, 166], [174, 212], [23, 785], [754, 44], [268, 212], [181, 346], [242, 209], [28, 212], [212, 91], [212, 492], [173, 212], [173, 400], [262, 191], [212, 268], [212, 173], [623, 129], [69, 671], [79, 497], [424, 160], [405, 249], [166, 559], [190, 162], [786, 64], [536, 184], [184, 540], [160, 212], [184, 536], [142, 172], [174, 208], [21, 787], [11, 265], [63, 518], [63, 365], [11, 525], [129, 212], [21, 5], [11, 555], [11, 360], [265, 11], [11, 213], [116, 261], [11, 529], [420, 531], [11, 573], [60, 320], [5, 21], [401, 426], [401, 183], [172, 142], [525, 11], [63, 212], [139, 273], [6, 362], [452, 452], [788, 717], [411, 6], [371, 212], [189, 667], [189, 550], [189, 80], [189, 663], [189, 215], [189, 549], [189, 69], [189, 82], [189, 418], [189, 121], [189, 86], [189, 311], [189, 225], [189, 184], [189, 508], [189, 679], [189, 671], [189, 710], [189, 62], [168, 28], [168, 114], [168, 486], [666, 11], [67, 189], [168, 284], [168, 789], [257, 544], [151, 136], [213, 11], [210, 245], [210, 169], [251, 115], [21, 11], [48, 212], [427, 438], [169, 210], [428, 301], [209, 490], [209, 63], [209, 174], [212, 129], [176, 576], [50, 217], [294, 493], [282, 163], [357, 375], [168, 458], [39, 35], [301, 428], [450, 176], [165, 151], [165, 32], [165, 245], [165, 171], [165, 251], [165, 40], [212, 63], [88, 304], [212, 48], [320, 60], [569, 674], [569, 754], [87, 58], [63, 552], [63, 82], [63, 121], [63, 209], [288, 152], [356, 375], [87, 269], [286, 305], [256, 106], [35, 151], [552, 285], [552, 571], [552, 63], [552, 208], [355, 62], [355, 212], [409, 278], [531, 212], [665, 411], [69, 679], [490, 209], [662, 107], [322, 322], [212, 531], [98, 124], [339, 169], [497, 79], [160, 394], [497, 482], [352, 351], [563, 572], [255, 62], [162, 190], [162, 433], [602, 362], [358, 566], [362, 19], [267, 264], [790, 544], [164, 695], [155, 211], [249, 114], [211, 155], [131, 163], [450, 420], [161, 666], [180, 82], [180, 121], [180, 160], [180, 41], [180, 249], [114, 249], [791, 493], [482, 79], [212, 365], [510, 754], [249, 83], [318, 326], [83, 249], [666, 161], [174, 209], [356, 183], [114, 329], [107, 662], [74, 316], [329, 114], [13, 137], [661, 661], [506, 498], [356, 106], [324, 666], [339, 79], [445, 581], [695, 164], [481, 481], [673, 673], [673, 495], [143, 328], [747, 83], [489, 405], [168, 166], [441, 44], [748, 708], [748, 748], [409, 280], [409, 138], [138, 409], [428, 45], [366, 233], [547, 417], [233, 366], [256, 114], [405, 489], [547, 47], [16, 282], [547, 48], [50, 433], [44, 212], [403, 403], [499, 608], [499, 602], [229, 28], [541, 420], [212, 44], [121, 189], [170, 256], [375, 107], [121, 792], [121, 453], [147, 166], [147, 82], [147, 121], [16, 44], [147, 533], [474, 142], [250, 395], [41, 166], [41, 121], [41, 612], [41, 160], [41, 546], [474, 366], [506, 674], [474, 160], [41, 601], [474, 107], [121, 493], [152, 41], [474, 186], [173, 41], [173, 147], [147, 173], [474, 615], [474, 254], [377, 741], [163, 106], [282, 80], [377, 659], [377, 106], [417, 725], [417, 245], [417, 47], [417, 48], [142, 474], [674, 506], [166, 168], [245, 40], [280, 409], [441, 362], [147, 269], [256, 170], [152, 269], [420, 541], [157, 296], [157, 489], [169, 339], [404, 269], [147, 233], [678, 311], [152, 365], [83, 269], [506, 510], [160, 748], [493, 121], [338, 229], [338, 165], [338, 339], [489, 157], [506, 672], [163, 82], [163, 121], [163, 105], [163, 249], [163, 160], [83, 214], [163, 166], [163, 601], [163, 282], [163, 366], [163, 142], [506, 9], [83, 168], [83, 280], [83, 41], [83, 458], [83, 292], [56, 56], [493, 105], [493, 249], [142, 163], [141, 161], [173, 233], [173, 269], [157, 388], [441, 506], [441, 233], [161, 141], [292, 83], [173, 260], [506, 406], [7, 466], [213, 9], [7, 359], [7, 499], [280, 83], [7, 707], [7, 700], [7, 332], [7, 406], [474, 269], [474, 233], [167, 468], [221, 0], [305, 286], [512, 512], [94, 494], [167, 749], [233, 166], [233, 282], [233, 494], [233, 601], [233, 433], [233, 86], [233, 84], [233, 142], [233, 70], [233, 62], [233, 654], [168, 83], [55, 160], [137, 20], [608, 499], [655, 183], [655, 280], [87, 212], [87, 163], [87, 404], [87, 105], [87, 424], [87, 643], [87, 173], [87, 654], [87, 249], [285, 54], [274, 45], [334, 334], [793, 206], [259, 259], [72, 106], [212, 87], [173, 87], [54, 285], [63, 210], [369, 96], [369, 89], [369, 88], [369, 304], [748, 793], [304, 369], [231, 292], [409, 306], [153, 87], [153, 212], [288, 212], [242, 242], [153, 612], [212, 612], [83, 612], [83, 212], [292, 231], [498, 266], [447, 690], [169, 495], [447, 473], [266, 498], [335, 794], [201, 128], [322, 794], [242, 106], [75, 75], [493, 87], [493, 615], [105, 612], [48, 654], [493, 424], [394, 160], [163, 162], [163, 87], [113, 725], [3, 412], [20, 137], [20, 520], [128, 94], [115, 612], [404, 87], [147, 115], [56, 520], [464, 444], [610, 694], [610, 420], [610, 296], [610, 250], [610, 472], [610, 255], [334, 140], [212, 405], [9, 506], [612, 50], [160, 55], [161, 160], [285, 426], [426, 285], [409, 184], [671, 356], [88, 369], [195, 305], [409, 292], [92, 72], [92, 260], [92, 326], [92, 173], [444, 464], [549, 162], [549, 288], [549, 276], [290, 16], [409, 25], [21, 64], [417, 795], [90, 409], [434, 269], [81, 667], [81, 508], [81, 679], [81, 710], [695, 597], [417, 30], [404, 115], [405, 642], [405, 44], [405, 329], [405, 28], [405, 128], [405, 303], [405, 210], [405, 21], [405, 371], [405, 114], [405, 296], [405, 490], [405, 81], [405, 340], [405, 226], [405, 227], [405, 278], [405, 129], [405, 169], [405, 796], [405, 174], [405, 355], [405, 367], [121, 117], [495, 105], [20, 409], [404, 212], [13, 130], [305, 195], [121, 434], [671, 81], [116, 531], [116, 79], [116, 165], [173, 92], [173, 434], [173, 115], [496, 362], [113, 438], [184, 409], [498, 440], [20, 127], [35, 30], [290, 114], [290, 272], [215, 434], [158, 233], [290, 6], [290, 64], [28, 21], [397, 458], [114, 290], [114, 168], [531, 116], [290, 107], [589, 215], [499, 9], [107, 506], [162, 549], [162, 163], [222, 227], [440, 498], [290, 160], [163, 612], [290, 494], [426, 457], [63, 183], [305, 738], [21, 405], [214, 83], [783, 669], [530, 538], [530, 92], [788, 788], [797, 605], [429, 446], [429, 216], [349, 349], [644, 644], [58, 58], [58, 121], [211, 212], [211, 738], [36, 29], [414, 479], [256, 493], [798, 798], [8, 573], [285, 55], [285, 738], [285, 481], [128, 201], [210, 212], [39, 39], [201, 342], [462, 308], [462, 21], [462, 20], [462, 272], [462, 249], [447, 799], [223, 183], [223, 117], [21, 46], [21, 303], [223, 309], [223, 560], [83, 533], [83, 186], [423, 485], [83, 115], [799, 447], [128, 21], [800, 287], [800, 185], [223, 212], [342, 352], [516, 2], [2, 516], [2, 517], [46, 21], [185, 800], [211, 131], [257, 426], [352, 342], [76, 263], [338, 367], [491, 490], [473, 447], [547, 114], [212, 211], [117, 223], [212, 210], [361, 339], [24, 261], [35, 5], [206, 206], [249, 462], [233, 158], [417, 339], [82, 189], [147, 107], [21, 462], [146, 1], [86, 20], [288, 549], [321, 295], [212, 160], [266, 565], [541, 107], [41, 23], [41, 493], [41, 474], [41, 180], [41, 115], [41, 801], [201, 95], [168, 172], [122, 231], [107, 769], [474, 612], [41, 63], [206, 294], [450, 183], [376, 654], [357, 671], [115, 513], [433, 50], [259, 106], [235, 96], [11, 21], [367, 338], [466, 11], [184, 107], [225, 189], [201, 197], [129, 623], [641, 420], [573, 11], [513, 115], [160, 179], [160, 343], [201, 352], [12, 44], [63, 128], [63, 41], [552, 518], [420, 641], [11, 466], [5, 35], [520, 20], [404, 162], [525, 358], [337, 301], [627, 627], [243, 243], [309, 183], [309, 133], [309, 95], [44, 12], [160, 641], [86, 98], [641, 160], [160, 90], [160, 181], [366, 662], [183, 309], [233, 233], [520, 285], [520, 305], [520, 286], [194, 685], [802, 172], [802, 256], [802, 129], [802, 365], [162, 404], [215, 589], [462, 121], [520, 56], [314, 189], [690, 74], [155, 363], [464, 464], [95, 309], [494, 190], [35, 35], [344, 349], [363, 155], [13, 337], [390, 526], [390, 226], [37, 96], [133, 165], [492, 510], [577, 249], [160, 685], [160, 298], [249, 577], [568, 568], [81, 212], [418, 473], [40, 442], [81, 137], [430, 5], [137, 81], [133, 28], [133, 340], [133, 129], [133, 169], [133, 367], [133, 365], [427, 121], [81, 685], [360, 11], [142, 62], [430, 166], [237, 62], [125, 283], [80, 286], [80, 174], [62, 237], [13, 278], [122, 130], [549, 81], [502, 44], [502, 500], [502, 503], [502, 7], [502, 407], [502, 504], [502, 505], [502, 43], [502, 358], [64, 165], [89, 165], [405, 405], [577, 518], [225, 225], [80, 137], [142, 571], [393, 434], [665, 137], [7, 365], [139, 282], [58, 82], [58, 142], [282, 665], [160, 342], [89, 375], [95, 214], [357, 112], [526, 199], [7, 546], [288, 756], [121, 186], [5, 430], [293, 506], [64, 644], [64, 528], [160, 249], [269, 301], [186, 82], [172, 523], [223, 106], [199, 526], [2, 160], [223, 366], [28, 27], [85, 1], [640, 98], [452, 360], [452, 161], [452, 7], [452, 570], [60, 388], [60, 394], [182, 602], [2, 286], [301, 269], [249, 162], [62, 342], [417, 485], [380, 14], [162, 249], [409, 128], [409, 450], [265, 265], [83, 288], [283, 125], [160, 89], [189, 533], [282, 139], [434, 441], [434, 28], [434, 362], [434, 165], [434, 169], [44, 434], [214, 157], [10, 728], [201, 62], [523, 172], [485, 417], [199, 776], [803, 54], [83, 152], [83, 256], [83, 518], [54, 803], [535, 482], [535, 340], [105, 41], [41, 105], [160, 68], [212, 83], [588, 29], [218, 199], [381, 377], [15, 216], [482, 78], [199, 218], [54, 63], [521, 217], [681, 343], [482, 535], [129, 275], [343, 681], [602, 182], [231, 624], [41, 215], [41, 434], [160, 63], [308, 396], [288, 431], [212, 288], [62, 147], [275, 129], [275, 178], [15, 162], [730, 107], [81, 365], [541, 215], [258, 142], [562, 426], [62, 80], [58, 612], [409, 35], [215, 541], [681, 681], [28, 133], [28, 340], [28, 129], [114, 128], [187, 667], [187, 473], [187, 550], [187, 80], [187, 663], [187, 549], [187, 69], [187, 418], [187, 184], [187, 679], [187, 710], [183, 152], [183, 518], [128, 133], [128, 340], [128, 169], [128, 367], [223, 166], [129, 346], [44, 405], [63, 54], [128, 63], [550, 187], [339, 116], [152, 183], [105, 115], [494, 466], [494, 197], [597, 695], [597, 597], [367, 128], [367, 133], [367, 340], [367, 129], [147, 254], [86, 125], [47, 129], [0, 250], [0, 148], [550, 19], [62, 478], [113, 478], [444, 47], [307, 307], [307, 347], [58, 533], [132, 160], [748, 160], [21, 21], [282, 77], [426, 280], [129, 47], [478, 62], [478, 113], [549, 549], [529, 11], [160, 481], [212, 363], [312, 225], [231, 284], [209, 155], [466, 359], [184, 549], [356, 108], [249, 530], [363, 518], [272, 269], [155, 209], [250, 0], [30, 29], [45, 107], [459, 268], [19, 550], [87, 13], [113, 338], [187, 166], [549, 106], [151, 151], [681, 350], [294, 342], [294, 214], [434, 63], [286, 2], [405, 108], [405, 87], [160, 356], [31, 37], [486, 278], [356, 160], [62, 377], [550, 106], [106, 549], [58, 481], [458, 397], [356, 474], [562, 457], [160, 132], [58, 518], [405, 16], [549, 473], [58, 412], [481, 4], [481, 2], [166, 187], [498, 608], [412, 58], [226, 340], [5, 89], [280, 172], [281, 194], [281, 195], [5, 726], [93, 64], [74, 282], [80, 187], [551, 509], [69, 551], [473, 418], [129, 405], [295, 107], [170, 151], [108, 64], [730, 5], [528, 644], [588, 23], [357, 478], [284, 734], [284, 1], [284, 296], [665, 174], [47, 547], [329, 495], [329, 371], [329, 211], [329, 63], [329, 169], [329, 46], [169, 329], [169, 371], [169, 211], [169, 63], [169, 46], [223, 215], [114, 211], [38, 339], [106, 550], [8, 44], [262, 122], [11, 64], [160, 482], [754, 720], [754, 608], [754, 555], [754, 565], [754, 324], [754, 266], [754, 11], [754, 804], [455, 115], [314, 225], [187, 365], [160, 78], [280, 41], [333, 152], [249, 518], [160, 345], [35, 301], [554, 340], [41, 14], [64, 11], [62, 295], [152, 333], [293, 530], [58, 160], [246, 266], [16, 518], [11, 754], [54, 520], [215, 316], [226, 371], [226, 114], [226, 128], [272, 462], [46, 329], [46, 495], [46, 114], [46, 169], [283, 518], [44, 499], [44, 501], [44, 805], [44, 502], [44, 503], [44, 7], [44, 729], [44, 504], [44, 332], [283, 162], [226, 256], [226, 365], [177, 60], [11, 7], [5, 495], [5, 730], [516, 192], [165, 170], [773, 405], [143, 90], [192, 58], [143, 93], [2, 57], [266, 804], [339, 38], [89, 552], [169, 734], [17, 82], [86, 264], [66, 64], [45, 428], [427, 166], [424, 269], [424, 233], [427, 655], [424, 87], [115, 366], [97, 97], [282, 10], [549, 64], [377, 62], [223, 282], [99, 101], [549, 215], [15, 164], [129, 543], [284, 6], [141, 729], [361, 361], [281, 286], [358, 573], [210, 174], [162, 58], [495, 526], [495, 296], [495, 250], [495, 60], [409, 225], [409, 29], [83, 492], [58, 145], [375, 679], [389, 157], [61, 179], [6, 284], [160, 184], [543, 576], [160, 189], [409, 305], [31, 424], [424, 196], [424, 612], [245, 326], [305, 411], [424, 493], [229, 31], [434, 83], [424, 31], [108, 300], [272, 164], [212, 404], [46, 16], [404, 615], [187, 405], [450, 543], [57, 2], [448, 428], [265, 213], [377, 172], [132, 481], [63, 160], [132, 54], [377, 764], [339, 337], [339, 151], [339, 443], [339, 30], [339, 32], [339, 725], [339, 261], [339, 245], [339, 34], [339, 35], [339, 336], [339, 136], [339, 338], [339, 39], [339, 171], [339, 40], [339, 135], [24, 29], [497, 340], [304, 88], [249, 63], [189, 5], [358, 499], [358, 500], [358, 805], [358, 502], [358, 503], [358, 7], [358, 407], [358, 729], [358, 504], [358, 505], [358, 332], [358, 358], [142, 19], [340, 497], [342, 377], [40, 135], [54, 208], [135, 40], [481, 132], [470, 119], [2, 132], [531, 531], [45, 445], [291, 346], [426, 133], [79, 78], [131, 282], [342, 191], [141, 452], [282, 131], [142, 226], [64, 305], [265, 407], [282, 531], [329, 329], [24, 30], [64, 290], [427, 82], [344, 176], [640, 114], [543, 450], [82, 151], [82, 427], [89, 806], [523, 464], [236, 132], [63, 164], [464, 523], [318, 333], [158, 132], [47, 263], [114, 640], [404, 254], [132, 158], [409, 135], [609, 24], [531, 420], [74, 745], [62, 233], [160, 468], [285, 411], [540, 184], [84, 166], [226, 142], [226, 62], [493, 526], [493, 292], [7, 451], [331, 358], [140, 216], [303, 88], [331, 19], [745, 74], [745, 221], [160, 224], [331, 362], [19, 331], [526, 493], [331, 222], [154, 647], [3, 195], [352, 347], [62, 730], [21, 41], [338, 318], [200, 498], [200, 65], [232, 320], [107, 80], [367, 160], [189, 21], [189, 20], [373, 282], [189, 1], [189, 377], [62, 210], [80, 107], [80, 189], [401, 714], [170, 5], [5, 807], [5, 189], [135, 409], [128, 95], [258, 421], [339, 115], [615, 404], [69, 189], [145, 615], [199, 377], [320, 232], [138, 2], [372, 32], [68, 160], [170, 62], [518, 283], [518, 152], [518, 256], [518, 492], [377, 199], [76, 444], [76, 423], [360, 360], [285, 89], [285, 88], [58, 194], [413, 143], [190, 86], [63, 324], [283, 174], [162, 2], [388, 104], [16, 80], [474, 112], [56, 718], [143, 290], [331, 764], [434, 62], [143, 413], [46, 461], [331, 225], [461, 46], [166, 84], [546, 513], [265, 360], [331, 223], [360, 265], [160, 278], [160, 129], [32, 27], [498, 200], [450, 64], [331, 464], [269, 461], [331, 295], [215, 60], [461, 269], [464, 331], [147, 546], [340, 160], [87, 189], [331, 328], [211, 56], [89, 285], [282, 223], [184, 115], [331, 260], [107, 19], [115, 184], [331, 29], [223, 331], [56, 211], [345, 130], [533, 515], [147, 366], [562, 401], [360, 569], [3, 520], [410, 62], [44, 141], [481, 138], [238, 210], [104, 388], [169, 133], [44, 8], [191, 528], [563, 14], [29, 331], [172, 181], [290, 143], [57, 56], [57, 59], [172, 526], [515, 413], [528, 191], [260, 331], [64, 282], [786, 786], [222, 17], [96, 325], [477, 90], [131, 211], [452, 9], [325, 96], [209, 494], [533, 457], [177, 381], [493, 426], [533, 498], [389, 385], [389, 390], [338, 32], [107, 180], [366, 147], [397, 181], [590, 30], [17, 615], [65, 493], [114, 107], [546, 147], [340, 83], [526, 172], [489, 256], [30, 151], [229, 114], [172, 714], [141, 12], [122, 656], [114, 229], [290, 280], [225, 409], [520, 54], [225, 331], [563, 484], [363, 208], [172, 468], [151, 261], [318, 338], [520, 571], [590, 35], [83, 340], [116, 123], [250, 1], [250, 495], [250, 526], [250, 296], [250, 351], [250, 60], [62, 44], [409, 272], [9, 44], [44, 62], [5, 170], [381, 178], [370, 427], [370, 115], [370, 39], [160, 340], [350, 342], [123, 116], [86, 166], [294, 526], [385, 389], [249, 327], [526, 294], [102, 102], [401, 562], [272, 409], [190, 459], [199, 296], [324, 63], [6, 170], [377, 189], [19, 510], [19, 555], [19, 504], [19, 754], [342, 199], [342, 167], [482, 48], [199, 342], [229, 39], [674, 510], [338, 485], [305, 56], [493, 65], [639, 639], [56, 305], [808, 808], [278, 611], [17, 160], [409, 448], [44, 569], [17, 154], [282, 20], [284, 257], [299, 473], [254, 445], [178, 350], [160, 520], [776, 199], [288, 613], [485, 263], [485, 444], [485, 245], [550, 549], [84, 549], [84, 624], [84, 422], [84, 160], [84, 48], [84, 485], [371, 518], [149, 157], [141, 421], [5, 408], [5, 286], [726, 1], [726, 189], [726, 316], [406, 699], [21, 183], [63, 249], [137, 211], [24, 609], [133, 168], [401, 44], [401, 362], [401, 256], [401, 129], [401, 365], [183, 21], [281, 571], [296, 107], [329, 80], [329, 286], [81, 225], [489, 771], [352, 214], [184, 301], [557, 581], [494, 106], [494, 81], [494, 480], [155, 351], [155, 46], [107, 184], [428, 164], [481, 160], [425, 513], [351, 155], [474, 301], [273, 429], [301, 474], [160, 294], [164, 428], [493, 62], [282, 41], [405, 187], [444, 423], [751, 51], [215, 221], [158, 319], [158, 235], [158, 236], [158, 243], [158, 244], [173, 723], [62, 749], [86, 222], [243, 158], [430, 8], [0, 73], [613, 288], [268, 295], [373, 420], [577, 283], [441, 87], [82, 186], [685, 305], [160, 368], [409, 2], [65, 325], [295, 331], [295, 268], [282, 160], [250, 160], [494, 494], [114, 338], [285, 809], [809, 285], [80, 329], [371, 62], [314, 184], [59, 132], [533, 25], [533, 32], [300, 444], [569, 707], [776, 41], [123, 96], [441, 105], [612, 612], [321, 810], [105, 441], [169, 64], [102, 101], [407, 7], [107, 371], [128, 155], [5, 283], [535, 10], [535, 728], [301, 321], [375, 424], [12, 8], [447, 579], [38, 722], [366, 474], [555, 754], [265, 498], [46, 155], [86, 280], [86, 95], [413, 515], [77, 581], [77, 557], [77, 445], [77, 497], [77, 531], [77, 811], [77, 539], [123, 455], [310, 317], [411, 282], [455, 123], [183, 107], [373, 180], [7, 11], [215, 549], [7, 360], [7, 213], [7, 525], [685, 298], [491, 378], [160, 142], [314, 418], [328, 331], [666, 7], [283, 152], [283, 492], [362, 331], [776, 94], [74, 459], [183, 108], [466, 374], [160, 44], [429, 6], [424, 375], [597, 301], [269, 429], [261, 28], [48, 37], [409, 443], [81, 494], [734, 177], [608, 566], [73, 358], [358, 73], [131, 58], [29, 409], [57, 138], [138, 57], [358, 331], [160, 270], [160, 611], [160, 486], [91, 143], [91, 356], [91, 108], [91, 328], [91, 357], [570, 265], [237, 319], [498, 265], [145, 160], [58, 131], [9, 529], [698, 809], [698, 552], [5, 132], [429, 15], [108, 183], [181, 379], [181, 380], [181, 376], [181, 385], [181, 386], [181, 389], [181, 395], [181, 397], [181, 368], [620, 290], [22, 686], [461, 461], [164, 535], [316, 17], [164, 446], [360, 7], [809, 698], [495, 46], [156, 377], [83, 296], [83, 393], [177, 331], [411, 194], [231, 621], [13, 590], [169, 81], [7, 5], [214, 191], [35, 25], [35, 26], [35, 31], [35, 32], [35, 590], [35, 36], [35, 37], [35, 38], [35, 40], [35, 588], [445, 557], [167, 196], [83, 13], [256, 105], [160, 375], [809, 412], [106, 74], [106, 221], [441, 569], [64, 169], [572, 350], [180, 157], [86, 190], [83, 96], [434, 296], [134, 133], [569, 569], [118, 13], [141, 51], [211, 636], [590, 13], [160, 296], [290, 99], [160, 183], [160, 681], [160, 509], [486, 611], [69, 160], [160, 69], [198, 165], [504, 8], [184, 314], [290, 694], [569, 441], [621, 278], [803, 412], [160, 388], [131, 96], [225, 283], [15, 760], [81, 299], [213, 7], [409, 38], [409, 428], [132, 5], [531, 114], [283, 420], [566, 11], [62, 748], [17, 282], [86, 18], [30, 27], [325, 82], [82, 325], [9, 573], [286, 532], [12, 160], [299, 146], [170, 28], [238, 64], [459, 190], [64, 238], [143, 108], [434, 16], [12, 441], [295, 276], [295, 162], [146, 299], [466, 441], [409, 590], [206, 196], [28, 170], [16, 434], [147, 301], [726, 5], [142, 115], [301, 147], [809, 738], [419, 340], [9, 9], [58, 738], [738, 58], [206, 203], [162, 295], [411, 809], [387, 229], [102, 405], [38, 86], [168, 434], [562, 200], [229, 387], [84, 432], [226, 313], [145, 434], [257, 284], [715, 21], [346, 346], [307, 588], [44, 573], [170, 35], [183, 493], [405, 256], [211, 106], [62, 129], [128, 405], [482, 47], [35, 170], [229, 30], [47, 482], [170, 261], [36, 438], [248, 366], [438, 36], [13, 481], [254, 285], [172, 168], [118, 20], [615, 546], [333, 527], [333, 547], [333, 171], [621, 401], [685, 81], [191, 64], [107, 282], [107, 704], [180, 434], [86, 720], [481, 13], [48, 115], [48, 427], [48, 151], [48, 367], [107, 375], [655, 301], [338, 434], [301, 655], [106, 211], [21, 400], [160, 541], [405, 288], [541, 160], [129, 176], [415, 86], [160, 201], [434, 338], [493, 460], [272, 448], [74, 85], [115, 548], [211, 809], [74, 307], [455, 444], [13, 135], [283, 577], [167, 206], [373, 253], [457, 562], [174, 283], [307, 74], [305, 685], [83, 81], [253, 373], [103, 179], [366, 184], [86, 415], [91, 258], [129, 198], [13, 113], [568, 256], [197, 86], [499, 264], [264, 499], [300, 126], [405, 64], [370, 226], [314, 221], [152, 518], [264, 804], [283, 221], [685, 665], [200, 562], [96, 131], [373, 571], [405, 283], [453, 62], [411, 283], [681, 342], [499, 141], [283, 405], [308, 129], [83, 318], [83, 114], [412, 809], [412, 803], [6, 429], [6, 430], [725, 370], [725, 245], [2, 409], [377, 149], [18, 86], [632, 719], [143, 91], [290, 424], [4, 283], [427, 48], [427, 427], [720, 86], [551, 299], [460, 615], [473, 509], [16, 290], [299, 551], [101, 404], [461, 735], [233, 63], [233, 474], [13, 812], [360, 19], [283, 4], [460, 518], [240, 237], [283, 411], [174, 59], [233, 124], [233, 58], [233, 101], [665, 685], [41, 256], [41, 249], [738, 208], [169, 434], [400, 21], [355, 16], [355, 142], [518, 559], [518, 355], [126, 58], [434, 518], [282, 233], [282, 393], [282, 105], [272, 45], [150, 397], [12, 739], [225, 221], [98, 125], [112, 112], [105, 17], [357, 91], [572, 572], [373, 115], [115, 373], [518, 434], [129, 308], [243, 411], [116, 464], [116, 151], [116, 113], [116, 329], [116, 443], [116, 29], [116, 30], [116, 128], [116, 280], [116, 32], [116, 725], [116, 34], [116, 35], [116, 437], [116, 340], [116, 39], [116, 171], [116, 40], [116, 207], [809, 411], [64, 170], [64, 168], [434, 288], [686, 22], [201, 200], [305, 809], [288, 434], [809, 305], [160, 232], [419, 74], [423, 438], [137, 665], [498, 421], [498, 529], [305, 64], [4, 301], [329, 652], [96, 123], [4, 192], [641, 669], [494, 504], [12, 264], [419, 211], [19, 707], [125, 98], [419, 495], [285, 83], [200, 201], [246, 608], [537, 368], [537, 52], [423, 303], [661, 459], [641, 748], [141, 499], [83, 453], [264, 12], [16, 355], [314, 301], [58, 303], [459, 661], [132, 236], [38, 409], [661, 44], [652, 329], [142, 367], [418, 183], [418, 129], [301, 4], [16, 105], [300, 128], [428, 274], [44, 661], [813, 450], [168, 426], [450, 813], [74, 419], [142, 338], [224, 468], [213, 141], [814, 52], [191, 5], [313, 17], [210, 16], [515, 292], [141, 213], [216, 64], [24, 28], [366, 226], [695, 734], [418, 314], [20, 74], [141, 14], [106, 183], [695, 365], [64, 216], [115, 64], [168, 276], [16, 210], [345, 157], [211, 419], [211, 586], [211, 546], [211, 434], [15, 15], [210, 233], [48, 492], [19, 142], [13, 290], [76, 245], [229, 489], [93, 168], [221, 215], [411, 698], [411, 481], [373, 166], [489, 229], [481, 698], [481, 411], [481, 809], [74, 764], [74, 308], [74, 310], [74, 312], [74, 313], [74, 0], [74, 468], [226, 434], [160, 562], [85, 74], [478, 434], [379, 308], [379, 380], [379, 381], [379, 61], [379, 392], [379, 393], [379, 320], [379, 378], [379, 103], [379, 382], [379, 181], [379, 383], [379, 283], [379, 385], [379, 386], [379, 387], [379, 388], [379, 390], [379, 391], [379, 250], [379, 398], [379, 377], [379, 368], [379, 104], [379, 321], [379, 60], [379, 150], [748, 46], [473, 213], [434, 478], [498, 246], [434, 64], [434, 226], [411, 243], [14, 141], [133, 160], [58, 809], [48, 261], [48, 48], [261, 48], [542, 526], [309, 42], [309, 612], [520, 58], [64, 434], [201, 51], [329, 477], [90, 66], [221, 283], [160, 667], [371, 98], [23, 438], [347, 347], [455, 113], [155, 145], [84, 612], [356, 91], [387, 378], [245, 76], [404, 249], [444, 245], [615, 460], [141, 141], [261, 151], [74, 106], [303, 303], [107, 494], [237, 158], [697, 697], [568, 329], [21, 518], [67, 108], [492, 48], [108, 67], [5, 312], [62, 518], [612, 84], [58, 3], [570, 700], [58, 615], [129, 515], [4, 211], [4, 481], [4, 305], [438, 23], [515, 129], [405, 356], [18, 797], [797, 18], [10, 13], [392, 392], [379, 64], [271, 737], [498, 267], [809, 481], [214, 681], [498, 738], [570, 267], [200, 51], [259, 21], [86, 368], [250, 113], [19, 674], [748, 283], [236, 233], [229, 721], [502, 661], [356, 405], [305, 4], [86, 113], [86, 197], [809, 58], [455, 245], [113, 86], [615, 615], [205, 593], [533, 94], [450, 464], [450, 611], [450, 128], [450, 526], [450, 534], [450, 544], [450, 714], [685, 815], [94, 533], [541, 62], [714, 450], [62, 159], [529, 498], [10, 324], [159, 62], [116, 434], [64, 184], [6, 102], [405, 362], [321, 483], [434, 116], [102, 6], [211, 698], [179, 103], [106, 462], [358, 8], [107, 450], [314, 312], [314, 255], [324, 10], [314, 314], [745, 745], [93, 27], [300, 312], [300, 314], [329, 476], [266, 141], [754, 360], [429, 124], [444, 114], [419, 154], [237, 587], [134, 74], [182, 182], [141, 266], [312, 221], [431, 217], [412, 3], [281, 301], [301, 281], [107, 152], [352, 681], [28, 434], [310, 221], [105, 360], [124, 429], [82, 165], [112, 356], [813, 623], [112, 91], [13, 305], [13, 336], [13, 38], [58, 685], [360, 105], [226, 366], [499, 498], [263, 151], [263, 367], [554, 29], [515, 493], [569, 739], [695, 405], [401, 568], [12, 570], [242, 241], [473, 545], [405, 5], [444, 444], [5, 405], [223, 221], [570, 12], [105, 28], [545, 473], [405, 456], [190, 189], [590, 27], [107, 158], [815, 685], [815, 815], [6, 137], [489, 365], [352, 789], [352, 206], [699, 332], [529, 141], [529, 466], [665, 272], [419, 497], [419, 79], [419, 445], [810, 210], [498, 499], [420, 83], [430, 83], [223, 64], [526, 542], [237, 159], [237, 238], [237, 241], [237, 242], [452, 499], [452, 502], [10, 434], [128, 346], [64, 223], [428, 46], [368, 321], [401, 65], [438, 423], [361, 455], [756, 459], [58, 654], [169, 455], [153, 434], [337, 160], [357, 80], [231, 289], [231, 257], [455, 169], [495, 419], [80, 357], [504, 529], [455, 361], [85, 221], [548, 1], [548, 78], [548, 531], [548, 340], [548, 459], [157, 104], [548, 21], [548, 405], [58, 138], [548, 106], [548, 256], [548, 278], [548, 203], [170, 816], [548, 169], [27, 93], [269, 592], [810, 393], [164, 748], [529, 504], [216, 254], [77, 212], [237, 209], [748, 164], [493, 817], [303, 434], [306, 173], [284, 168], [79, 419], [221, 314], [698, 211], [249, 58], [325, 173], [338, 113], [10, 21], [152, 433], [460, 249], [124, 592], [569, 8], [570, 8], [498, 8], [28, 31], [499, 8], [58, 174], [172, 86], [128, 434], [168, 183], [741, 741], [157, 381], [157, 389], [157, 392], [157, 393], [157, 320], [157, 378], [157, 103], [157, 382], [157, 181], [157, 383], [157, 283], [157, 385], [157, 386], [157, 387], [157, 390], [157, 394], [157, 250], [157, 398], [157, 368], [157, 60], [157, 150], [157, 295], [157, 308], [157, 391], [157, 321], [181, 157], [98, 371], [79, 482], [79, 340], [340, 79], [307, 17], [548, 377], [810, 597], [187, 62], [215, 314], [818, 440], [220, 17], [340, 434], [62, 187], [19, 430], [163, 434], [254, 216], [133, 44], [241, 158], [8, 569], [502, 374], [301, 173], [8, 12], [8, 570], [8, 498], [8, 499], [8, 504], [27, 590], [366, 531], [366, 78], [366, 445], [434, 21], [498, 197], [13, 281], [498, 293], [495, 342], [495, 214], [520, 5], [210, 434], [411, 412], [223, 17], [434, 340], [269, 428], [409, 336], [569, 9], [39, 480], [25, 26], [452, 8], [585, 493], [328, 328], [531, 79], [9, 569], [531, 366], [9, 754], [430, 19], [342, 495], [342, 103], [342, 342], [342, 277], [342, 376], [342, 181], [342, 219], [342, 280], [342, 214], [342, 450], [342, 296], [342, 203], [342, 351], [342, 231], [342, 122], [342, 468], [342, 179], [342, 95], [342, 60], [342, 575], [412, 411], [8, 441], [167, 342], [531, 434], [104, 104], [249, 473], [473, 249], [437, 115], [368, 103], [308, 17], [405, 314], [183, 418], [211, 532], [394, 397], [314, 405], [181, 342], [374, 529], [647, 685], [149, 191], [206, 352], [397, 394], [261, 27], [493, 585], [685, 647], [538, 733], [135, 165], [441, 434], [409, 581], [57, 303], [57, 610], [57, 619], [450, 342], [424, 28], [441, 8], [499, 529], [358, 707], [303, 59], [368, 377], [28, 424], [450, 515], [409, 624], [404, 105], [610, 56], [610, 57], [610, 303], [610, 89], [610, 59], [280, 434], [368, 104], [11, 566], [167, 14], [105, 404], [179, 278], [278, 179], [149, 344], [221, 310], [201, 420], [59, 57], [59, 303], [59, 89], [59, 610], [59, 619], [434, 531], [293, 8], [79, 165], [598, 521], [298, 685], [590, 23], [149, 420], [155, 655], [105, 105], [160, 236], [430, 765], [81, 434], [249, 16], [434, 211], [526, 457], [17, 434], [186, 129], [356, 258], [345, 179], [79, 47], [404, 160], [160, 404], [155, 337], [430, 504], [155, 420], [440, 818], [489, 82], [272, 186], [91, 11], [129, 186], [129, 28], [81, 20], [434, 148], [20, 81], [133, 62], [211, 195], [621, 231], [359, 499], [224, 1], [224, 256], [224, 221], [224, 365], [257, 231], [21, 548], [189, 420], [733, 538], [146, 615], [502, 529], [221, 224], [221, 468], [409, 447], [526, 296], [305, 137], [21, 467], [422, 82], [467, 21], [229, 434], [390, 62], [459, 756], [19, 366], [19, 107], [420, 18], [809, 56], [394, 60], [434, 229], [56, 809], [172, 458], [12, 86], [366, 19], [278, 351], [73, 259], [259, 73], [169, 62], [325, 65], [548, 371], [593, 776], [548, 46], [548, 129], [381, 381], [366, 18], [153, 283], [153, 256], [453, 212], [284, 191], [400, 400], [142, 83], [18, 366], [346, 214], [83, 106], [11, 91], [515, 484], [165, 23], [132, 371], [18, 420], [429, 273], [460, 170], [460, 214], [517, 408], [170, 460], [26, 35], [248, 260], [248, 259], [248, 73], [126, 126], [426, 92], [809, 211], [20, 287], [376, 283], [371, 132], [81, 155], [287, 20], [69, 299], [222, 218], [222, 219], [222, 310], [222, 85], [222, 312], [222, 223], [222, 18], [222, 314], [222, 225], [222, 226], [314, 222], [92, 426], [314, 215], [137, 305], [376, 157], [424, 783], [261, 367], [145, 474], [282, 31], [148, 434], [423, 444], [223, 314], [302, 438], [494, 12], [420, 152], [438, 302], [707, 73], [707, 331], [229, 513], [5, 82], [806, 88], [82, 5], [13, 581], [560, 282], [597, 62], [28, 25], [28, 26], [28, 721], [28, 32], [28, 722], [28, 33], [28, 34], [28, 590], [28, 38], [28, 40], [28, 588], [28, 545], [235, 209], [806, 285], [806, 89], [806, 304], [738, 195], [481, 286], [481, 63], [481, 137], [92, 11], [38, 35], [155, 153], [173, 301], [237, 6], [283, 376], [271, 211], [271, 58], [283, 153], [6, 237], [81, 533], [62, 390], [145, 58], [163, 62], [191, 365], [191, 256], [400, 309], [195, 738], [64, 103], [285, 96], [138, 160], [16, 405], [337, 437], [463, 463], [376, 295], [204, 51], [132, 106], [11, 92], [21, 187], [21, 249], [314, 218], [314, 219], [314, 223], [2, 411], [411, 2], [211, 271], [120, 120], [73, 707], [187, 21], [371, 51], [160, 138], [51, 371], [218, 82], [309, 400], [280, 450], [23, 165], [815, 137], [106, 106], [101, 124], [747, 86], [533, 434], [533, 106], [685, 174], [285, 301], [248, 0], [59, 63], [681, 191], [493, 611], [493, 232], [493, 14], [587, 194], [587, 2], [221, 74], [221, 223], [371, 323], [311, 74], [461, 819], [58, 271], [667, 184], [273, 461], [363, 128], [256, 191], [2, 587], [128, 363], [481, 271], [145, 300], [813, 280], [300, 145], [13, 476], [232, 515], [107, 541], [678, 747], [678, 678], [528, 305], [441, 86], [424, 4], [65, 568], [29, 361], [7, 8], [361, 29], [290, 256], [164, 322], [94, 776], [340, 290], [301, 285], [355, 283], [410, 356], [214, 460], [499, 566], [411, 3], [411, 192], [412, 408], [96, 113], [3, 411], [198, 129], [365, 451], [362, 529], [34, 34], [423, 113], [370, 116], [32, 361], [361, 32], [497, 419], [20, 82], [608, 529], [756, 73], [447, 498], [395, 104], [8, 7], [412, 698], [129, 438], [129, 340], [87, 87], [160, 216], [160, 349], [100, 494], [13, 409], [494, 100], [280, 342], [134, 373], [174, 408], [192, 411], [255, 152], [681, 214], [450, 377], [284, 157], [371, 363], [405, 161], [116, 370], [494, 464], [245, 96], [96, 245], [340, 82], [464, 494], [161, 405], [547, 455], [493, 486], [152, 366], [223, 256], [5, 195], [128, 206], [60, 390], [312, 311], [153, 16], [206, 167], [308, 256], [115, 261], [493, 694], [167, 199], [283, 355], [412, 63], [16, 283], [167, 128], [128, 280], [290, 340], [405, 15], [137, 4], [2, 140], [2, 96], [2, 64], [733, 728], [518, 351], [498, 447], [498, 9], [502, 8], [368, 320], [21, 550], [559, 283], [94, 207], [96, 369], [442, 113], [814, 347], [96, 285], [273, 274], [455, 47], [400, 728], [128, 82], [46, 256], [206, 280], [206, 41], [165, 119], [58, 132], [124, 354], [124, 98], [124, 97], [124, 353], [124, 323], [124, 618], [124, 640], [124, 768], [124, 100], [124, 662], [124, 101], [124, 185], [57, 174], [424, 355], [496, 459], [820, 41], [820, 820], [87, 82], [191, 283], [388, 379], [86, 30], [82, 540], [165, 438], [388, 376], [540, 82], [820, 128], [434, 515], [434, 768], [820, 203], [738, 520], [261, 115], [820, 593], [738, 57], [400, 106], [363, 16], [265, 570], [18, 222], [261, 753], [438, 165], [280, 206], [221, 18], [57, 738], [424, 78], [163, 83], [424, 445], [455, 5], [115, 233], [5, 455], [5, 169], [145, 256], [169, 5], [569, 362], [146, 18], [181, 156], [250, 320], [314, 363], [320, 250], [105, 422], [820, 204], [820, 94], [820, 200], [395, 181], [269, 154], [62, 254], [115, 58], [187, 363], [83, 163], [41, 820], [188, 495], [188, 363], [261, 96], [363, 314], [591, 62], [438, 340], [114, 405], [160, 376], [355, 152], [31, 28], [305, 481], [820, 85], [37, 48], [332, 499], [820, 121], [445, 424], [332, 213], [142, 82], [333, 288], [249, 21], [29, 590], [13, 30], [473, 25], [288, 333], [338, 245], [300, 226], [602, 700], [4, 434], [5, 411], [457, 440], [409, 325], [440, 457], [128, 172], [96, 261], [820, 206], [184, 667], [420, 363], [36, 36], [379, 719], [155, 18], [113, 76], [133, 183], [721, 721], [721, 229], [302, 304], [221, 17], [114, 455], [820, 801], [820, 196], [820, 51], [820, 197], [820, 198], [820, 199], [820, 167], [820, 201], [820, 202], [820, 776], [820, 205], [820, 95], [820, 207], [340, 256], [31, 338], [304, 302], [0, 498], [498, 0], [207, 820], [338, 31], [201, 820], [206, 820], [155, 326], [211, 408], [498, 407], [498, 213], [498, 525], [498, 358], [387, 368], [87, 190], [183, 133], [238, 440], [4, 424], [63, 586], [4, 121], [408, 211], [408, 552], [325, 143], [466, 754], [466, 358], [368, 387], [141, 504], [720, 707], [821, 163], [154, 269], [181, 526], [358, 498], [424, 46], [32, 261], [695, 147], [560, 496], [30, 31], [278, 191], [440, 238], [7, 672], [101, 211], [424, 210], [424, 274], [424, 748], [748, 424], [172, 207], [207, 172], [192, 323], [485, 114], [412, 625], [529, 9], [245, 338], [598, 598], [329, 21], [725, 113], [326, 155], [498, 7], [290, 493], [105, 495], [87, 665], [280, 424], [496, 560], [231, 377], [249, 28], [249, 280], [493, 572], [62, 546], [28, 249], [215, 459], [424, 527], [520, 138], [93, 399], [400, 64], [260, 89], [62, 591], [417, 165], [159, 440], [84, 270], [84, 118], [84, 372], [84, 443], [84, 664], [84, 318], [84, 105], [84, 544], [84, 533], [84, 336], [84, 112], [84, 453], [336, 84], [399, 93], [822, 572], [405, 62], [64, 172], [172, 64], [57, 408], [155, 81], [131, 101], [335, 592], [2, 809], [281, 54], [572, 822], [160, 730], [160, 20], [565, 608], [565, 804], [565, 754], [121, 4], [408, 57], [210, 45], [265, 359], [321, 250], [6, 191], [160, 400], [231, 342], [231, 74], [231, 262], [231, 575], [74, 231], [521, 823], [238, 758], [118, 84], [262, 231], [400, 160], [96, 251], [157, 182], [388, 157], [59, 2], [655, 172], [191, 824], [440, 159], [300, 300], [155, 130], [164, 448], [811, 340], [251, 96], [326, 543], [326, 245], [495, 74], [495, 309], [495, 384], [495, 218], [495, 215], [495, 222], [495, 223], [495, 405], [495, 315], [495, 227], [495, 170], [495, 468], [495, 228], [495, 638], [495, 316], [486, 725], [414, 645], [142, 85], [62, 820], [4, 142], [176, 611], [720, 332], [331, 707], [249, 672], [142, 4], [424, 113], [424, 543], [424, 114], [424, 245], [424, 338], [424, 326], [62, 262], [331, 482], [80, 460], [331, 340], [543, 424], [160, 21], [460, 80], [602, 61], [672, 365], [168, 292], [317, 226], [122, 103], [380, 182], [323, 447], [138, 305], [60, 342], [80, 480], [480, 80], [424, 240], [223, 624], [58, 88], [58, 210], [58, 89], [58, 371], [58, 462], [58, 126], [116, 160], [447, 323], [171, 116], [102, 743], [20, 160], [93, 128], [93, 78], [93, 51], [65, 51], [190, 87], [548, 143], [166, 160], [262, 62], [314, 283], [160, 116], [206, 168], [482, 438], [454, 107], [498, 562], [498, 602], [498, 707], [498, 700], [498, 61], [305, 84], [438, 482], [79, 160], [57, 305], [323, 192], [820, 142], [568, 426], [143, 548], [168, 206], [337, 438], [142, 820], [160, 79], [115, 301], [438, 337], [81, 121], [278, 420], [278, 13], [96, 59], [21, 160], [255, 107], [94, 820], [283, 314], [327, 20], [38, 27], [0, 226], [89, 438], [305, 138], [160, 428], [809, 55], [809, 4], [809, 2], [141, 265], [368, 393], [171, 5], [627, 473], [473, 627], [607, 255], [5, 171], [5, 306], [195, 3], [64, 375], [170, 543], [38, 116], [255, 607], [3, 137], [215, 187], [215, 560], [85, 820], [160, 2], [215, 188], [51, 445], [116, 38], [351, 278], [520, 412], [182, 53], [825, 306], [306, 825], [183, 278], [368, 86], [86, 177], [433, 405], [563, 522], [543, 170], [160, 87], [87, 160], [201, 143], [160, 426], [754, 466], [374, 502], [397, 389], [482, 331], [160, 329], [241, 159], [20, 327], [400, 222], [81, 420], [222, 365], [562, 498], [211, 210], [62, 495], [2, 826], [826, 826], [53, 182], [438, 89], [320, 156], [151, 748], [7, 358], [7, 407], [7, 498], [177, 86], [160, 171], [160, 127], [288, 288], [269, 105], [160, 672], [482, 553], [320, 61], [358, 161], [241, 238], [506, 827], [64, 87], [135, 62], [160, 210], [85, 142], [161, 358], [107, 418], [81, 283], [321, 351], [345, 191], [89, 62], [62, 89], [351, 321], [332, 44], [332, 500], [332, 502], [332, 407], [332, 504], [332, 505], [332, 506], [0, 101], [482, 497], [428, 272], [6, 183], [215, 283], [826, 6], [62, 405], [160, 115], [160, 169], [6, 826], [16, 489], [169, 160], [82, 401], [529, 720], [82, 78], [82, 445], [82, 357], [82, 783], [82, 245], [82, 371], [82, 132], [272, 140], [405, 828], [15, 128], [452, 529], [74, 560], [74, 268], [128, 93], [128, 820], [389, 391], [389, 395], [389, 182], [46, 424], [168, 93], [291, 206], [482, 318], [482, 228], [210, 211], [210, 63], [84, 305], [420, 81], [748, 151], [118, 420], [7, 112], [720, 529], [447, 428], [87, 236], [366, 160], [160, 166], [81, 16], [81, 424], [128, 218], [197, 65], [45, 62], [459, 331], [86, 690], [167, 218], [310, 313], [128, 249], [268, 74], [316, 223], [160, 786], [738, 698], [738, 412], [128, 15], [128, 362], [145, 303], [259, 297], [368, 83], [811, 531], [47, 79], [201, 218], [106, 222], [487, 529], [487, 421], [35, 128], [829, 203], [107, 63], [492, 333], [520, 738], [455, 76], [249, 438], [16, 81], [308, 424], [245, 82], [430, 362], [141, 249], [96, 76], [438, 365], [438, 249], [69, 678], [142, 58], [173, 728], [94, 218], [690, 690], [367, 427], [358, 213], [358, 525], [143, 201], [64, 74], [213, 358], [74, 64], [389, 60], [377, 0], [442, 35], [685, 56], [0, 218], [60, 389], [160, 292], [283, 81], [362, 128], [344, 231], [0, 377], [249, 152], [293, 374], [262, 179], [226, 218], [667, 105], [441, 282], [30, 165], [94, 95], [100, 404], [484, 515], [649, 729], [95, 94], [249, 145], [25, 473], [424, 462], [129, 611], [481, 305], [0, 17], [0, 74], [129, 789], [74, 187], [63, 233], [627, 86], [114, 686], [3, 158], [408, 138], [515, 450], [96, 816], [300, 828], [158, 3], [427, 651], [167, 820], [31, 427], [63, 158], [233, 828], [87, 223], [373, 411], [114, 152], [404, 82], [337, 5], [301, 209], [360, 570], [242, 237], [422, 601], [177, 0], [316, 316], [0, 177], [569, 19], [16, 367], [129, 694], [816, 170], [223, 330], [822, 290], [745, 282], [301, 597], [277, 280], [209, 301], [466, 555], [553, 482], [426, 562], [120, 218], [582, 418], [129, 615], [742, 742], [290, 822], [4, 809], [2, 158], [783, 82], [783, 424], [286, 80], [21, 80], [21, 671], [5, 337], [508, 80], [651, 118], [206, 51], [206, 197], [206, 198], [206, 199], [206, 200], [206, 128], [206, 201], [206, 202], [206, 593], [206, 204], [206, 776], [206, 205], [206, 94], [206, 95], [206, 207], [651, 511], [651, 420], [686, 114], [98, 62], [400, 96], [96, 400], [152, 154], [357, 108], [58, 283], [368, 394], [283, 58], [62, 98], [62, 62], [3, 194], [523, 280], [453, 83], [523, 829], [214, 342], [214, 343], [214, 346], [214, 278], [214, 352], [152, 114], [132, 82], [394, 368], [86, 81], [492, 5], [338, 455], [768, 98], [58, 288], [522, 563], [441, 649], [441, 729], [441, 754], [441, 249], [457, 523], [417, 160], [288, 58], [349, 149], [349, 262], [349, 344], [349, 348], [349, 148], [349, 122], [349, 179], [474, 256], [262, 349], [184, 80], [184, 187], [249, 166], [249, 546], [546, 249], [142, 84], [816, 116], [376, 181], [129, 464], [59, 408], [137, 3], [424, 395], [480, 329], [329, 480], [453, 472], [453, 255], [361, 165], [527, 547], [201, 395], [201, 93], [464, 129], [263, 438], [438, 263], [2, 738], [692, 231], [201, 160], [93, 201], [828, 405], [73, 268], [145, 828], [134, 134], [357, 282], [5, 492], [820, 546], [87, 77], [520, 408], [192, 516], [192, 517], [370, 25], [370, 92], [370, 26], [370, 443], [370, 37], [370, 135], [615, 168], [182, 389], [37, 151], [82, 424], [21, 371], [371, 21], [413, 176], [661, 570], [82, 20], [69, 329], [685, 160], [168, 615], [329, 69], [132, 121], [158, 63], [158, 4], [158, 2], [158, 137], [308, 295], [223, 225], [828, 233], [201, 166], [68, 329], [424, 509], [4, 158], [5, 820], [803, 803], [303, 423], [412, 520], [412, 59], [69, 424], [424, 464], [82, 385], [366, 518], [809, 63], [452, 666], [464, 424], [452, 830], [809, 208], [283, 424], [452, 823], [517, 192], [245, 165], [258, 831], [329, 68], [18, 85], [18, 317], [18, 696], [63, 809], [201, 196], [201, 167], [201, 203], [201, 206], [692, 130], [314, 166], [105, 667], [700, 699], [121, 132], [820, 5], [26, 370], [13, 280], [105, 474], [105, 153], [160, 269], [393, 166], [393, 433], [393, 145], [393, 71], [393, 84], [395, 201], [390, 391], [13, 326], [404, 412], [493, 522], [493, 563], [585, 544], [151, 165], [366, 183], [282, 255], [160, 137], [338, 263], [295, 62], [160, 379], [64, 222], [568, 1], [183, 366], [427, 31], [222, 222], [183, 695], [160, 548], [226, 696], [526, 450], [94, 199], [363, 434], [424, 295], [522, 493], [601, 166], [255, 282], [17, 142], [4, 532], [283, 434], [183, 28], [183, 128], [320, 593], [320, 350], [320, 483], [160, 164], [828, 300], [434, 363], [164, 160], [815, 305], [316, 160], [483, 320], [5, 41], [35, 165], [35, 367], [404, 142], [424, 124], [424, 99], [542, 172], [542, 401], [385, 376], [160, 316], [357, 16], [93, 280], [152, 283], [305, 243], [266, 466], [579, 46], [198, 820], [266, 720], [208, 195], [81, 363], [53, 231], [401, 542], [82, 154], [82, 166], [82, 145], [194, 3], [490, 377], [231, 53], [377, 490], [29, 5], [96, 58], [121, 10], [160, 326], [30, 434], [62, 164], [297, 73], [190, 69], [359, 9], [9, 359], [288, 19], [482, 593], [221, 222], [155, 189], [420, 256], [434, 61], [310, 82], [195, 826], [714, 425], [255, 106], [434, 30], [434, 647], [533, 97], [533, 323], [533, 265], [424, 357], [351, 352], [59, 305], [442, 545], [612, 340], [333, 460], [607, 420], [695, 183], [305, 59], [751, 128], [343, 180], [434, 820], [82, 310], [393, 424], [97, 533], [647, 21], [67, 74], [357, 424], [385, 378], [385, 103], [82, 290], [256, 283], [167, 95], [83, 368], [593, 320], [28, 183], [593, 482], [412, 404], [370, 339], [370, 151], [694, 129], [146, 81], [61, 434], [21, 647], [339, 370], [333, 434], [518, 87], [249, 121], [105, 106], [424, 222], [249, 5], [498, 160], [103, 385], [455, 338], [455, 96], [533, 280], [671, 80], [666, 19], [497, 424], [74, 67], [170, 494], [494, 68], [494, 170], [424, 93], [489, 87], [333, 87], [87, 333], [504, 406], [5, 249], [142, 233], [5, 29], [424, 497], [54, 738], [229, 170], [134, 5], [278, 486], [280, 363], [822, 350], [447, 676], [98, 64], [389, 377], [389, 104], [301, 276], [137, 815], [69, 282], [160, 448], [211, 365], [128, 183], [253, 459], [253, 80], [253, 21], [253, 20], [253, 222], [253, 405], [253, 434], [253, 106], [253, 259], [253, 315], [253, 189], [253, 227], [253, 671], [253, 316], [253, 258], [253, 607], [253, 228], [54, 412], [661, 700], [366, 115], [81, 82], [164, 45], [273, 140], [273, 447], [273, 448], [273, 45], [0, 248], [223, 152], [160, 281], [350, 681], [440, 368], [209, 631], [103, 61], [103, 0], [211, 3], [21, 260], [21, 259], [21, 253], [533, 441], [333, 282], [270, 28], [249, 211], [216, 107], [165, 329], [282, 333], [338, 107], [424, 132], [260, 728], [666, 441], [82, 353], [82, 404], [374, 441], [177, 515], [113, 116], [699, 441], [417, 333], [0, 103], [257, 183], [61, 103], [303, 170], [515, 177], [281, 160], [661, 441], [593, 822], [616, 533], [105, 431], [540, 549], [285, 254], [66, 469], [424, 290], [282, 87], [469, 66], [87, 282], [137, 129], [137, 46], [282, 572], [786, 206], [786, 407], [241, 440], [426, 526], [168, 523], [170, 303], [368, 440], [440, 241], [813, 434], [546, 87], [160, 158], [104, 389], [169, 229], [222, 467], [467, 222], [128, 199], [182, 376], [826, 2], [306, 141], [306, 20], [314, 256], [51, 820], [323, 768], [180, 62], [525, 332], [155, 19], [768, 124], [543, 16], [453, 615], [40, 47], [483, 351], [455, 333], [265, 533], [63, 138], [63, 412], [366, 188], [602, 441], [412, 586], [269, 420], [412, 54], [674, 19], [140, 819], [665, 2], [279, 160], [62, 180], [58, 431], [47, 40], [47, 47], [31, 261], [393, 142], [420, 269], [85, 51], [51, 85], [115, 171], [115, 38], [332, 525], [332, 707], [115, 443], [562, 438], [142, 393], [434, 132], [142, 508], [115, 417], [25, 30], [282, 280], [63, 239], [4, 57], [4, 137], [2, 832], [438, 562], [132, 434], [481, 586], [296, 62], [500, 44], [377, 464], [368, 232], [368, 397], [198, 258], [664, 93], [664, 515], [464, 377], [13, 478], [0, 560], [178, 178], [431, 71], [152, 107], [99, 424], [810, 420], [223, 87], [74, 331], [560, 0], [444, 333], [194, 826], [557, 445], [221, 1], [199, 399], [533, 616], [397, 368], [373, 83], [820, 160], [87, 506], [5, 63], [368, 379], [448, 334], [160, 285], [13, 199], [13, 78], [13, 94], [314, 161], [381, 160], [546, 615], [756, 597], [264, 247], [264, 570], [264, 700], [667, 81], [160, 381], [437, 361], [437, 116], [79, 557], [200, 199], [199, 434], [434, 199], [161, 314], [121, 81], [220, 47], [6, 290], [160, 820], [334, 448], [564, 208], [564, 126], [592, 592], [437, 531], [236, 241], [58, 424], [833, 44], [68, 16], [560, 74], [560, 215], [560, 316], [520, 815], [251, 417], [69, 259], [57, 4], [460, 679], [460, 663], [333, 115], [259, 69], [209, 365], [115, 333], [143, 469], [424, 69], [536, 83], [424, 68], [13, 327], [259, 728], [810, 511], [404, 768], [663, 460], [93, 413], [329, 28], [286, 408], [68, 357], [92, 728], [209, 71], [209, 84], [665, 6], [231, 249], [351, 575], [280, 655], [6, 665], [68, 424], [417, 251], [487, 332], [80, 184], [68, 418], [448, 461], [184, 434], [389, 393], [434, 200], [434, 167], [434, 99], [685, 281], [418, 68], [281, 685], [273, 4], [536, 229], [525, 44], [526, 440], [245, 361], [245, 417], [245, 444], [245, 442], [245, 547], [245, 423], [245, 47], [245, 485], [229, 536], [191, 166], [388, 60], [116, 816], [440, 149], [149, 440], [368, 366], [778, 569], [494, 601], [569, 778], [50, 431], [160, 170], [146, 189], [199, 820], [430, 280], [531, 437], [399, 199], [87, 547], [547, 87], [170, 160], [166, 282], [427, 460], [366, 368], [64, 523], [318, 107], [478, 183], [107, 834], [290, 563], [339, 170], [61, 421], [3, 239], [272, 63], [250, 741], [63, 272], [23, 23], [132, 552], [816, 119], [816, 470], [333, 128], [333, 133], [333, 23], [333, 393], [333, 609], [333, 427], [333, 474], [333, 180], [333, 41], [333, 340], [333, 77], [333, 17], [333, 173], [333, 531], [137, 552], [282, 174], [493, 835], [493, 483], [95, 820], [776, 342], [523, 836], [59, 96], [405, 282], [183, 16], [282, 405], [314, 295], [295, 314], [8, 525], [350, 157], [837, 107], [273, 2], [210, 208], [192, 807], [2, 273], [375, 160], [269, 145], [494, 210], [179, 181], [286, 329], [286, 815], [357, 21], [285, 302], [13, 679], [180, 393], [427, 105], [297, 17], [107, 518], [4, 826], [4, 832], [665, 212], [145, 771], [405, 145], [329, 210], [598, 134], [331, 74], [160, 214], [498, 441], [86, 283], [756, 311], [342, 776], [21, 357], [531, 256], [105, 243], [486, 94], [17, 249], [17, 105], [54, 665], [94, 486], [499, 213], [7, 573], [249, 17], [573, 7], [107, 837], [826, 195], [826, 194], [826, 192], [4, 239], [381, 181], [133, 11], [389, 376], [389, 397], [126, 586], [126, 552], [126, 208], [158, 239], [17, 297], [322, 461], [45, 838], [679, 13], [679, 81], [62, 366], [181, 381], [318, 494], [394, 376], [381, 150], [300, 124], [547, 527], [86, 326], [58, 87], [28, 329], [166, 64], [87, 23], [362, 434], [23, 87], [362, 256], [251, 170], [376, 389], [376, 394], [334, 274], [318, 424], [826, 4], [826, 586], [434, 421], [93, 515], [215, 296], [489, 300], [420, 30], [357, 183], [375, 183], [832, 193], [832, 826], [832, 4], [832, 194], [832, 195], [832, 2], [832, 192], [424, 183], [86, 256], [16, 68], [194, 832], [555, 44], [107, 216], [546, 490], [195, 832], [367, 44], [367, 81], [81, 114], [367, 21], [114, 81], [815, 520], [815, 286], [839, 191], [826, 832], [128, 35], [287, 81], [291, 280], [291, 203], [123, 180], [720, 765], [485, 455], [455, 485], [261, 170], [685, 4], [83, 579], [83, 273], [183, 292], [148, 377], [59, 412], [437, 38], [679, 482], [333, 176], [820, 215], [5, 134], [27, 437], [756, 756], [195, 5], [451, 487], [370, 414], [730, 160], [414, 370], [295, 182], [473, 30], [133, 10], [822, 484], [68, 494], [283, 114], [233, 174], [121, 219], [80, 815], [69, 477], [58, 803], [2, 803], [187, 215], [165, 434], [565, 9], [167, 165], [14, 79], [165, 167], [776, 200], [141, 365], [258, 454], [284, 278], [20, 80], [9, 565], [20, 715], [80, 20], [84, 75], [84, 442], [84, 252], [84, 115], [84, 654], [94, 593], [593, 820], [824, 191], [320, 182], [115, 84], [114, 767], [441, 161], [278, 284], [776, 820], [820, 434], [323, 162], [62, 726], [215, 511], [4, 685], [482, 679], [305, 281], [504, 358], [86, 44], [44, 86], [47, 333], [593, 205], [290, 121], [58, 826], [162, 323], [510, 9], [14, 339], [342, 294], [322, 434], [103, 320], [518, 105], [453, 189], [121, 290], [255, 434], [434, 459], [11, 133], [440, 440], [685, 193], [685, 826], [87, 509], [459, 434], [13, 33], [13, 497], [13, 197], [13, 318], [281, 13], [7, 570], [222, 106], [832, 586], [440, 526], [748, 222], [182, 320], [694, 493], [5, 458], [339, 14], [423, 121], [160, 828], [427, 434], [121, 423], [58, 586], [58, 832], [170, 753], [828, 160], [235, 236], [129, 840], [129, 457], [577, 282], [570, 7], [13, 771], [288, 758], [249, 221], [690, 447], [832, 58], [115, 533], [601, 523], [593, 200], [314, 340], [169, 437], [225, 459], [340, 314], [215, 159], [215, 53], [107, 428], [103, 392], [159, 215], [478, 514], [107, 8], [24, 24], [346, 51], [346, 128], [425, 90], [443, 443], [90, 425], [526, 568], [249, 661], [137, 329], [133, 172], [133, 93], [661, 249], [434, 412], [80, 92], [172, 183], [172, 133], [193, 832], [412, 434], [757, 757], [115, 753], [427, 47], [443, 47], [443, 820], [165, 93], [69, 87], [15, 45], [820, 53], [329, 137], [820, 159], [305, 718], [132, 58], [748, 105], [491, 377], [222, 86], [430, 543], [181, 393], [160, 47], [523, 601], [105, 748], [320, 434], [129, 81], [129, 44], [129, 362], [129, 303], [129, 210], [129, 19], [129, 21], [129, 106], [303, 129], [434, 320], [320, 391], [62, 493], [588, 28], [644, 5], [443, 96], [329, 113], [391, 776], [96, 370], [508, 68], [64, 113], [64, 199], [199, 64], [121, 550], [121, 544], [160, 65], [121, 226], [121, 163], [121, 490], [211, 152], [211, 389], [211, 364], [211, 340], [211, 582], [278, 301], [68, 301], [160, 262], [700, 661], [214, 301], [303, 4], [303, 520], [303, 3], [303, 281], [303, 174], [776, 391], [80, 21], [140, 274], [165, 123], [63, 301], [290, 129], [183, 3], [128, 157], [4, 803], [412, 57], [357, 68], [113, 329], [434, 208], [170, 117], [142, 441], [274, 140], [160, 333], [809, 552], [272, 3], [301, 157], [301, 63], [543, 430], [301, 214], [138, 815], [350, 377], [93, 493], [92, 815], [17, 17], [474, 183], [502, 301], [662, 371], [223, 83], [116, 753], [88, 149], [201, 5], [201, 64], [149, 88], [125, 62], [434, 173], [453, 301], [434, 53], [159, 105], [434, 159], [810, 560], [46, 300], [301, 502], [159, 434], [421, 434], [494, 187], [459, 215], [86, 438], [332, 487], [64, 201], [434, 612], [810, 471], [815, 138], [242, 105], [145, 269], [145, 518], [145, 46], [815, 92], [841, 841], [184, 249], [481, 421], [357, 106], [438, 86], [117, 170], [105, 242], [558, 487], [95, 143], [685, 286], [5, 201], [284, 292], [195, 803], [327, 105], [434, 2], [211, 842], [222, 311], [211, 518], [92, 80], [98, 708], [816, 165], [184, 365], [195, 193], [440, 64], [486, 168], [421, 481], [815, 5], [458, 5], [803, 195], [208, 137], [212, 820], [226, 283], [44, 129], [354, 64], [131, 481], [473, 301], [159, 301], [301, 473], [301, 159], [261, 261], [361, 333], [177, 214], [368, 537], [133, 464], [133, 292], [262, 278], [52, 537], [686, 531], [686, 263], [367, 35], [214, 177], [13, 285], [13, 272], [166, 142], [7, 86], [284, 342], [320, 734], [47, 160], [262, 160], [86, 7], [443, 85], [797, 342], [153, 301], [160, 206], [598, 553], [143, 86], [615, 147], [86, 143], [47, 427], [412, 285], [366, 166], [166, 366], [9, 265], [367, 367], [247, 700], [265, 9], [336, 170], [183, 29], [255, 5], [96, 481], [157, 344], [157, 231], [53, 215], [53, 820], [53, 434], [387, 387], [158, 105], [182, 167], [19, 141], [323, 5], [471, 421], [438, 93], [105, 158], [424, 282], [663, 81], [141, 19], [241, 499], [241, 592], [241, 209], [531, 686], [241, 237], [256, 186], [14, 434], [312, 189], [13, 190], [271, 448], [167, 182], [544, 813], [644, 64], [19, 499], [229, 198], [13, 164], [190, 13], [93, 438], [292, 280], [249, 427], [273, 819], [477, 469], [310, 105], [815, 208], [3, 107], [105, 508], [665, 303], [234, 828], [234, 121], [234, 404], [234, 239], [234, 160], [234, 58], [234, 474], [234, 145], [211, 604], [249, 243], [5, 128], [83, 290], [83, 484], [225, 301], [335, 274], [358, 9], [107, 3], [31, 30], [707, 247], [150, 250], [5, 255], [169, 105], [179, 378], [349, 156], [57, 815], [815, 57], [5, 323], [129, 351], [29, 133], [156, 180], [156, 349], [140, 64], [121, 80], [121, 234], [121, 767], [121, 552], [174, 815], [87, 74], [87, 459], [87, 187], [87, 222], [573, 8], [473, 299], [460, 159], [166, 86], [282, 404], [199, 105], [292, 133], [301, 225], [107, 820], [392, 296], [272, 651], [62, 174], [826, 193], [190, 299], [651, 272], [281, 738], [299, 190], [437, 89], [483, 133], [448, 271], [182, 390], [182, 391], [182, 296], [182, 395], [182, 295], [326, 86], [118, 51], [457, 421], [94, 206], [361, 135], [15, 183], [68, 173], [83, 113], [74, 116], [285, 183], [29, 183], [157, 53], [602, 699], [602, 525], [173, 68], [79, 14], [215, 747], [79, 51], [79, 128], [249, 460], [128, 79], [440, 5], [121, 543], [121, 281], [546, 233], [504, 301], [12, 358], [64, 440], [686, 301], [358, 12], [281, 121], [723, 546], [423, 318], [30, 764], [186, 283], [134, 64], [64, 134], [64, 149], [283, 379], [546, 723], [155, 301], [268, 223], [143, 166], [700, 720], [51, 143], [293, 754], [40, 560], [560, 40], [188, 366], [149, 64], [53, 128], [53, 157], [183, 169], [316, 215], [116, 74], [5, 440], [570, 452], [3, 571], [128, 53], [62, 338], [184, 183], [482, 89], [167, 339], [510, 19], [173, 83], [820, 183], [187, 74], [187, 459], [417, 86], [13, 273], [277, 214], [549, 661], [107, 531], [361, 27], [661, 549], [62, 179], [159, 820], [303, 80], [303, 28], [303, 21], [303, 114], [303, 340], [303, 169], [303, 367], [303, 329], [340, 438], [58, 81], [179, 388], [494, 209], [265, 61], [28, 24], [13, 489], [261, 455], [183, 820], [62, 393], [10, 69], [141, 438], [47, 361], [86, 504], [366, 165], [61, 265], [160, 435], [327, 141], [259, 327], [438, 141], [376, 719], [327, 259], [661, 11], [661, 161], [141, 327], [499, 241], [815, 80], [815, 174], [193, 826], [460, 460], [5, 192], [258, 198], [820, 62], [425, 401], [7, 511], [705, 450], [65, 486], [202, 623], [133, 544], [817, 515], [526, 14], [694, 706], [426, 403], [623, 791], [706, 280], [835, 275], [544, 568], [543, 817], [403, 291], [486, 714], [843, 290], [655, 458], [458, 172], [440, 53], [399, 526], [419, 789], [789, 835], [515, 270], [183, 413], [232, 705], [292, 523], [523, 543], [563, 464], [256, 365], [562, 202], [425, 567], [567, 843], [14, 256], [664, 694], [600, 401], [401, 399], [844, 133], [585, 168], [276, 426], [491, 624], [13, 156], [494, 576], [434, 145], [167, 122], [95, 122], [543, 129], [543, 121], [13, 514], [813, 544], [333, 601], [92, 127], [249, 420], [157, 149], [450, 623], [85, 151], [282, 340], [323, 618], [323, 640], [323, 662], [170, 16], [101, 323], [661, 211], [484, 822], [122, 95], [107, 441], [368, 14], [547, 333], [333, 492], [455, 64], [733, 723], [314, 365], [64, 455], [434, 152], [434, 121], [434, 282], [221, 85], [31, 165], [13, 339], [131, 57], [312, 317], [487, 558], [62, 498], [455, 261], [127, 92], [371, 124], [165, 550], [165, 490], [165, 226], [220, 215], [220, 128], [220, 434], [37, 123], [226, 165], [278, 128], [151, 85], [128, 220], [21, 36], [122, 167], [550, 21], [340, 133], [342, 797], [54, 809], [809, 54], [16, 170], [79, 811], [79, 77], [79, 539], [79, 445], [13, 242], [259, 127], [373, 280], [339, 167], [482, 576], [643, 50], [21, 459], [602, 365], [492, 283], [621, 180], [14, 133], [242, 13], [487, 9], [23, 301], [30, 133], [249, 602], [411, 305], [305, 845], [544, 183], [723, 733], [24, 37], [115, 492], [328, 143], [328, 66], [328, 514], [733, 733], [133, 14], [133, 30], [388, 179], [615, 152], [194, 59], [314, 434], [62, 216], [216, 62], [7, 608], [423, 62], [492, 115], [401, 130], [814, 262], [303, 159], [159, 303], [183, 159], [647, 458], [31, 170], [31, 96], [846, 605], [290, 83], [223, 268], [83, 557], [530, 293], [557, 83], [338, 183], [41, 5], [588, 307], [458, 142], [183, 210], [183, 89], [183, 520], [183, 165], [183, 338], [420, 249], [411, 552], [36, 21], [165, 96], [165, 223], [518, 661], [518, 211], [192, 102], [531, 365], [446, 140], [58, 422], [422, 58], [738, 285], [256, 518], [504, 86], [64, 90], [31, 24], [809, 132], [24, 31], [481, 285], [356, 16], [160, 286], [615, 518], [615, 492], [615, 142], [412, 102], [215, 717], [68, 106], [96, 361], [172, 542], [340, 16], [64, 191], [564, 12], [564, 190], [564, 365], [361, 96], [12, 62], [271, 192], [689, 198], [62, 12], [194, 803], [284, 621], [62, 269], [192, 271], [443, 38], [455, 116], [455, 24], [498, 73], [207, 199], [261, 119], [261, 655], [261, 427], [261, 470], [441, 324], [615, 155], [115, 816], [115, 453], [115, 493], [115, 41], [62, 19], [62, 418], [62, 306], [62, 35], [83, 173], [442, 36], [285, 271], [160, 230], [160, 464], [518, 249], [388, 296], [294, 301], [93, 714], [282, 434], [205, 820], [320, 296], [320, 103], [285, 371], [333, 847], [96, 165], [13, 343], [13, 322], [13, 184], [61, 296], [494, 115], [464, 160], [458, 647], [243, 64], [424, 356], [424, 329], [285, 586], [714, 401], [435, 160], [391, 182], [198, 5], [257, 450], [845, 305], [160, 12], [248, 17], [301, 294], [459, 21], [333, 166], [73, 498], [45, 273], [278, 28], [278, 722], [820, 249], [498, 74], [249, 820], [615, 244], [434, 314], [262, 814], [244, 615], [285, 164], [7, 430], [451, 466], [433, 434], [82, 147], [841, 376], [173, 416], [173, 777], [376, 841], [62, 459], [588, 392], [161, 504], [13, 356], [13, 207], [161, 496], [74, 498], [249, 362], [243, 58], [58, 243], [46, 447], [211, 46], [211, 174], [211, 450], [520, 520], [826, 58], [12, 707], [551, 533], [280, 813], [608, 266], [443, 113], [366, 187], [303, 46], [450, 211], [355, 329], [355, 303], [355, 114], [355, 472], [355, 46], [355, 255], [307, 226], [96, 31], [121, 222], [160, 690], [132, 807], [409, 33], [388, 378], [184, 160], [333, 302], [46, 355], [107, 87], [87, 107], [114, 303], [137, 126], [685, 809], [741, 250], [74, 330], [340, 848], [313, 313], [450, 257], [73, 313], [302, 419], [419, 302], [46, 283], [160, 466], [62, 280], [313, 73], [160, 3], [160, 275], [160, 424], [10, 340], [253, 62], [215, 0], [62, 253], [305, 271], [107, 187], [297, 341], [329, 283], [15, 272], [271, 305], [114, 355], [28, 46], [445, 340], [329, 355], [362, 496], [283, 46], [374, 499], [374, 500], [374, 501], [374, 503], [374, 406], [374, 407], [374, 504], [374, 505], [374, 358], [374, 506], [333, 160], [429, 579], [429, 461], [429, 335], [429, 322], [59, 160], [106, 107], [183, 460], [211, 355], [211, 169], [280, 62], [126, 271], [126, 137], [210, 46], [845, 2], [419, 655], [218, 36], [114, 255], [172, 377], [328, 375], [328, 357], [303, 283], [187, 107], [248, 459], [62, 356], [251, 338], [255, 329], [255, 114], [255, 46], [133, 346], [81, 46], [15, 362], [450, 5], [662, 366], [183, 473], [346, 133], [213, 213], [329, 255], [92, 92], [115, 361], [115, 531], [115, 79], [107, 255], [107, 253], [355, 211], [355, 371], [355, 63], [355, 169], [371, 285], [116, 263], [446, 448], [255, 211], [255, 371], [255, 63], [255, 169], [31, 151], [597, 756], [362, 15], [332, 700], [371, 355], [145, 144], [441, 107], [391, 320], [434, 210], [434, 58], [533, 128], [2, 845], [58, 434], [531, 165], [200, 776], [211, 11], [340, 593], [784, 784], [845, 63], [79, 116], [63, 355], [63, 169], [14, 498], [13, 579], [427, 86], [336, 438], [13, 83], [166, 210], [17, 166], [169, 355], [699, 44], [169, 255], [419, 482], [419, 183], [63, 845], [356, 62], [195, 286], [115, 160], [183, 544], [62, 494], [667, 37], [5, 198], [86, 427], [35, 107], [84, 513], [376, 18], [518, 422], [160, 226], [183, 419], [545, 26], [545, 785], [545, 27], [545, 34], [545, 590], [124, 139], [409, 27], [426, 450], [426, 493], [608, 7], [105, 543], [65, 752], [126, 55], [18, 376], [211, 329], [211, 255], [211, 114], [211, 81], [307, 18], [63, 329], [63, 255], [63, 114], [63, 81], [815, 64], [322, 446], [201, 198], [201, 202], [201, 593], [201, 204], [201, 776], [201, 205], [303, 355], [700, 247], [355, 170], [355, 137], [114, 170], [2, 571], [211, 464], [169, 303], [169, 137], [198, 419], [81, 211], [81, 63], [81, 169], [464, 211], [460, 421], [459, 498], [255, 303], [255, 170], [255, 137], [498, 459], [14, 523], [14, 706], [108, 469], [231, 526], [523, 14], [176, 333], [81, 303], [81, 170], [820, 346], [655, 655], [0, 309], [174, 363], [351, 280], [482, 339], [355, 184], [114, 184], [662, 662], [482, 64], [77, 107], [26, 29], [336, 485], [139, 124], [444, 48], [569, 359], [539, 160], [640, 404], [160, 539], [159, 460], [286, 520], [438, 336], [564, 242], [113, 26], [57, 849], [165, 816], [243, 210], [199, 850], [199, 593], [60, 378], [60, 104], [60, 60], [793, 316], [359, 569], [210, 243], [195, 520], [52, 1], [52, 314], [125, 404], [314, 52], [518, 362], [281, 412], [307, 114], [89, 2], [424, 62], [367, 366], [2, 89], [441, 121], [278, 345], [409, 316], [317, 314], [419, 365], [246, 498], [160, 188], [166, 214], [299, 81], [644, 296], [160, 666], [177, 459], [720, 700], [376, 179], [44, 441], [20, 536], [137, 285], [292, 493], [776, 203], [444, 318], [35, 655], [137, 166], [366, 82], [166, 576], [536, 20], [59, 194], [142, 434], [280, 95], [280, 181], [280, 228], [168, 275], [87, 543], [87, 820], [419, 473], [275, 168], [362, 283], [809, 174], [31, 39], [193, 195], [6, 412], [412, 6], [460, 533], [11, 211], [655, 35], [65, 450], [459, 177], [114, 280], [333, 654], [820, 162], [322, 448], [340, 143], [45, 448], [543, 87], [651, 546], [280, 114], [450, 65], [129, 399], [638, 44], [254, 283], [655, 151], [0, 88], [832, 832], [160, 139], [664, 664], [820, 208], [41, 460], [820, 15], [89, 159], [88, 0], [533, 818], [169, 183], [162, 820], [121, 19], [399, 129], [357, 480], [546, 393], [280, 367], [221, 121], [5, 516], [5, 517], [249, 419], [107, 35], [747, 184], [105, 820], [419, 249], [184, 747], [446, 15], [394, 393], [195, 809], [820, 87], [810, 269], [121, 357], [170, 31], [149, 655], [70, 152], [287, 106], [593, 340], [820, 105], [409, 108], [106, 287], [301, 228], [57, 604], [80, 356], [121, 372], [361, 151], [300, 46], [349, 347], [11, 293], [11, 498], [11, 266], [11, 8], [64, 271], [674, 504], [733, 327], [11, 247], [12, 247], [281, 411], [480, 356], [480, 21], [480, 20], [480, 375], [480, 221], [480, 671], [52, 103], [62, 372], [375, 480], [655, 419], [21, 480], [129, 160], [272, 309], [272, 612], [34, 151], [327, 733], [822, 563], [9, 499], [372, 62], [381, 61], [61, 381], [82, 747], [82, 526], [82, 486], [82, 426], [82, 168], [747, 82], [106, 717], [123, 420], [65, 130], [132, 210], [153, 154], [210, 132], [82, 261], [82, 508], [420, 123], [82, 820], [82, 441], [266, 441], [424, 106], [191, 434], [434, 191], [498, 11], [511, 64], [121, 223], [95, 593], [427, 96], [64, 511], [96, 427], [160, 480], [493, 82], [221, 218], [87, 180], [593, 95], [836, 523], [329, 469], [498, 264], [747, 418], [480, 143], [219, 60], [418, 747], [333, 162], [160, 736], [240, 209], [15, 285], [15, 429], [238, 457], [197, 95], [438, 339], [307, 537], [230, 80], [230, 375], [285, 15], [247, 11], [100, 708], [100, 124], [100, 353], [100, 323], [100, 618], [100, 640], [100, 768], [100, 99], [100, 662], [100, 125], [100, 185], [8, 11], [5, 291], [5, 141], [5, 815], [125, 100], [95, 197], [62, 521], [707, 441], [443, 48], [404, 154], [662, 100], [608, 441], [496, 488], [15, 820], [655, 149], [280, 426], [508, 747], [851, 191], [700, 441], [420, 362], [11, 530], [74, 549], [429, 334], [851, 852], [851, 605], [573, 441], [851, 851], [720, 441], [480, 74], [480, 509], [480, 223], [480, 357], [211, 424], [93, 526], [93, 458], [214, 94], [160, 776], [166, 159], [420, 494], [183, 458], [183, 290], [183, 426], [647, 221], [160, 306], [26, 32], [145, 271], [720, 406], [48, 486], [67, 86], [546, 115], [221, 647], [82, 221], [82, 74], [155, 95], [82, 222], [443, 455], [82, 104], [82, 647], [82, 548], [82, 133], [82, 337], [82, 295], [82, 304], [82, 170], [82, 51], [82, 143], [82, 225], [82, 853], [137, 420], [420, 137], [443, 333], [443, 527], [443, 361], [443, 417], [443, 263], [443, 444], [443, 725], [443, 318], [443, 442], [443, 547], [443, 114], [443, 423], [443, 245], [443, 76], [443, 485], [443, 171], [191, 851], [195, 586], [6, 308], [231, 14], [557, 518], [420, 854], [304, 285], [563, 563], [304, 82], [74, 485], [221, 248], [221, 116], [221, 313], [221, 73], [221, 485], [221, 317], [165, 31], [810, 87], [84, 441], [84, 113], [84, 752], [84, 555], [84, 144], [84, 493], [84, 729], [84, 87], [84, 37], [84, 754], [84, 249], [84, 180], [422, 154], [249, 84], [493, 84], [277, 180], [434, 333], [21, 820], [278, 621], [17, 255], [17, 467], [17, 386], [17, 494], [17, 295], [266, 11], [17, 533], [17, 253], [17, 546], [17, 405], [17, 189], [17, 283], [17, 612], [17, 162], [17, 495], [15, 420], [17, 340], [17, 363], [17, 643], [17, 366], [317, 74], [17, 378], [17, 106], [17, 212], [17, 83], [17, 86], [17, 726], [290, 356], [77, 62], [17, 459], [273, 15], [273, 272], [273, 164], [273, 216], [498, 44], [420, 106], [367, 280], [390, 182], [11, 502], [13, 98], [106, 420], [420, 139], [391, 295], [61, 396], [107, 372], [508, 189], [747, 508], [160, 591], [591, 160], [183, 480], [183, 509], [183, 318], [183, 20], [183, 188], [183, 68], [183, 137], [340, 142], [160, 610], [160, 19], [519, 316], [249, 533], [308, 6], [226, 443], [305, 520], [256, 531], [256, 557], [135, 361], [557, 256], [182, 380], [137, 183], [73, 116], [73, 221], [73, 223], [73, 485], [73, 317], [73, 0], [723, 306], [420, 296], [810, 296], [57, 64], [82, 327], [478, 160], [142, 340], [91, 183], [508, 62], [82, 454], [160, 351], [183, 602], [251, 62], [847, 205], [317, 248], [317, 116], [317, 221], [317, 313], [317, 223], [317, 18], [317, 73], [317, 485], [62, 251], [39, 29], [205, 847], [362, 420], [378, 296], [183, 91], [183, 155], [568, 130], [441, 19], [847, 333], [54, 2], [106, 424], [68, 183], [155, 183], [131, 809], [700, 602], [318, 183], [128, 214], [166, 174], [593, 199], [333, 163], [333, 493], [333, 820], [225, 18], [285, 304], [160, 197], [284, 681], [245, 183], [151, 37], [421, 7], [61, 345], [90, 183], [54, 304], [25, 361], [69, 183], [304, 54], [304, 809], [809, 304], [214, 128], [361, 25], [86, 584], [516, 195], [54, 96], [54, 89], [54, 88], [187, 20], [367, 748], [245, 333], [16, 183], [81, 86], [748, 367], [195, 516], [195, 517], [2, 54], [89, 54], [89, 809], [405, 158], [377, 347], [299, 855], [531, 363], [441, 12], [417, 107], [345, 61], [273, 271], [111, 108], [349, 160], [160, 91], [392, 387], [17, 671], [17, 21], [681, 284], [546, 155], [21, 17], [160, 303], [160, 369], [655, 223], [155, 546], [158, 405], [249, 856], [809, 131], [480, 183], [114, 609], [128, 327], [128, 486], [21, 221], [438, 531], [255, 1], [255, 189], [255, 316], [129, 363], [121, 474], [440, 206], [489, 132], [186, 363], [486, 820], [486, 327], [855, 299], [820, 486], [820, 327], [128, 105], [714, 714], [121, 518], [307, 310], [307, 317], [596, 596], [105, 128], [282, 209], [401, 257], [440, 438], [87, 183], [183, 245], [183, 69], [183, 90], [278, 363], [271, 273], [183, 87], [327, 820], [327, 486], [225, 74], [531, 115], [363, 278], [531, 438], [209, 282], [20, 187], [68, 121], [121, 411], [121, 714], [74, 480], [121, 184], [18, 225], [22, 11], [440, 321], [61, 440], [356, 480], [40, 170], [184, 121], [290, 106], [845, 4], [599, 708], [599, 304], [599, 96], [599, 132], [599, 2], [599, 211], [599, 3], [599, 63], [599, 208], [183, 270], [183, 611], [62, 209], [440, 435], [395, 393], [7, 555], [160, 427], [121, 326], [209, 62], [182, 381], [182, 392], [182, 393], [182, 394], [182, 397], [182, 378], [182, 103], [182, 181], [182, 384], [182, 283], [182, 385], [182, 387], [182, 388], [182, 250], [182, 396], [182, 377], [182, 368], [182, 104], [182, 321], [182, 60], [182, 150], [519, 518], [438, 440], [4, 845], [18, 115], [405, 46], [435, 440], [65, 401], [537, 61], [142, 216], [265, 8], [544, 544], [412, 271], [31, 29], [11, 441], [11, 22], [84, 662], [106, 255], [333, 142], [121, 480], [142, 333], [520, 183], [20, 480], [377, 128], [339, 340], [490, 405], [143, 480], [54, 411], [608, 608], [170, 145], [145, 170], [327, 128], [306, 511], [160, 8], [515, 440], [411, 54], [390, 103], [170, 229], [170, 40], [223, 20], [222, 400], [255, 215], [255, 295], [459, 74], [377, 365], [357, 142], [187, 87], [20, 223], [153, 121], [459, 467], [483, 483], [511, 306], [216, 592], [142, 458], [568, 450], [21, 272], [13, 211], [101, 97], [19, 700], [549, 74], [596, 282], [249, 353], [124, 706], [282, 612], [160, 143], [499, 699], [80, 121], [121, 368], [405, 121], [255, 365], [272, 21], [373, 508], [300, 169], [374, 5], [201, 215], [169, 300], [564, 564], [274, 21], [115, 249], [194, 586], [194, 208], [230, 74], [21, 274], [662, 84], [190, 533], [178, 180], [489, 129], [708, 708], [376, 320], [90, 11], [86, 67], [543, 425], [64, 665], [818, 533], [249, 282], [249, 142], [443, 226], [154, 412], [232, 312], [719, 719], [87, 545], [310, 365], [697, 5], [176, 478], [478, 176], [494, 308], [520, 6], [240, 11], [460, 244], [460, 328], [460, 57], [460, 189], [11, 90], [6, 520], [308, 494], [11, 240], [301, 857], [166, 137], [621, 301], [74, 21], [74, 20], [52, 781], [293, 365], [15, 353], [121, 143], [121, 661], [121, 401], [121, 165], [661, 121], [255, 366], [358, 530], [366, 255], [62, 505], [300, 329], [249, 303], [249, 236], [249, 46], [786, 465], [568, 526], [258, 468], [113, 847], [329, 300], [410, 490], [300, 158], [90, 469], [349, 320], [740, 51], [615, 87], [294, 129], [559, 769], [375, 81], [417, 437], [17, 341], [143, 10], [443, 847], [10, 143], [153, 160], [106, 355], [132, 242], [242, 132], [85, 310], [374, 166], [366, 229], [499, 374], [738, 2], [249, 310], [310, 249], [525, 504], [107, 281], [408, 586], [166, 353], [748, 300], [290, 65], [65, 290], [450, 133], [74, 142], [300, 64], [64, 300], [4, 208], [450, 600], [166, 74], [494, 62], [618, 98], [30, 367], [116, 28], [28, 116], [121, 282], [458, 494], [822, 593], [847, 847], [858, 306], [820, 366], [187, 1], [179, 61], [529, 529], [366, 521], [28, 107], [491, 340], [485, 74], [521, 366], [317, 17], [452, 661], [106, 184], [269, 820], [756, 227], [300, 45], [283, 820], [708, 125], [820, 283], [83, 209], [209, 83], [157, 128], [56, 137], [65, 366], [209, 166], [127, 1], [206, 852], [285, 5], [58, 304], [366, 65], [443, 40], [215, 201], [160, 410], [300, 531], [2, 300], [145, 114], [350, 345], [63, 533], [300, 2], [160, 40], [87, 412], [10, 777], [74, 366], [597, 142], [114, 145], [408, 434], [335, 124], [273, 209], [273, 428], [160, 493], [45, 300], [209, 273], [264, 7], [748, 564], [602, 183], [529, 496], [440, 320], [412, 87], [427, 339], [166, 173], [166, 209], [13, 515], [366, 10], [249, 356], [249, 329], [249, 80], [249, 490], [249, 671], [372, 372], [469, 96], [74, 166], [445, 848], [799, 715], [665, 859], [16, 280], [302, 5], [10, 366], [608, 11], [107, 366], [696, 74], [579, 446], [243, 234], [106, 467], [366, 107], [148, 349], [303, 249], [23, 160], [62, 509], [223, 317], [655, 231], [371, 236], [371, 46], [593, 350], [229, 366], [467, 106], [174, 58], [236, 63], [236, 303], [236, 371], [236, 434], [236, 46], [236, 249], [73, 106], [602, 496], [142, 80], [546, 269], [546, 211], [363, 87], [160, 159], [160, 245], [638, 169], [160, 221], [166, 147], [166, 820], [661, 7], [86, 12], [160, 452], [160, 140], [106, 73], [526, 426], [8, 141], [847, 455], [245, 160], [114, 366], [149, 575], [777, 535], [337, 82], [455, 847], [506, 211], [452, 420], [166, 115], [82, 377], [107, 82], [458, 515], [321, 440], [420, 452], [312, 256], [15, 461], [15, 446], [15, 428], [15, 447], [526, 280], [211, 506], [141, 166], [257, 401], [310, 494], [54, 249], [249, 54], [427, 142], [56, 685], [427, 62], [144, 166], [427, 612], [160, 30], [58, 166], [169, 107], [272, 563], [435, 616], [435, 793], [82, 58], [592, 160], [160, 207], [813, 399], [813, 413], [813, 515], [813, 817], [813, 168], [813, 172], [813, 836], [813, 543], [813, 526], [813, 534], [813, 600], [813, 440], [813, 714], [813, 275], [813, 93], [813, 129], [813, 458], [813, 403], [813, 585], [154, 183], [48, 437], [166, 58], [183, 154], [125, 354], [125, 708], [125, 97], [125, 371], [125, 323], [125, 618], [125, 640], [125, 99], [134, 10], [335, 335], [546, 518], [312, 74], [339, 438], [160, 592], [493, 166], [393, 282], [165, 229], [166, 493], [434, 856], [278, 681], [82, 53], [82, 362], [467, 509], [229, 165], [570, 19], [58, 256], [81, 405], [55, 552], [231, 343], [569, 141], [193, 412], [21, 87], [69, 467], [661, 141], [754, 141], [555, 141], [608, 141], [649, 121], [265, 141], [300, 434], [358, 141], [360, 141], [494, 229], [106, 771], [510, 86], [37, 667], [281, 845], [265, 7], [498, 526], [408, 126], [229, 494], [138, 408], [264, 141], [165, 47], [170, 360], [293, 141], [121, 649], [776, 130], [57, 809], [344, 814], [337, 16], [107, 828], [63, 162], [408, 489], [257, 130], [64, 601], [16, 337], [820, 82], [160, 149], [63, 685], [142, 166], [180, 166], [699, 141], [366, 494], [366, 62], [23, 166], [572, 377], [264, 19], [86, 84], [162, 63], [19, 264], [141, 431], [373, 243], [573, 12], [141, 488], [526, 498], [489, 408], [820, 443], [506, 434], [494, 366], [44, 360], [166, 141], [504, 141], [13, 210], [107, 303], [424, 303], [300, 87], [176, 440], [115, 860], [141, 358], [549, 418], [39, 455], [162, 283], [455, 39], [494, 93], [211, 16], [121, 280], [45, 429], [73, 166], [23, 116], [121, 68], [96, 91], [91, 96], [367, 64], [64, 367], [525, 699], [211, 646], [238, 211], [121, 203], [281, 6], [281, 305], [211, 238], [116, 23], [170, 455], [165, 365], [84, 419], [455, 170], [147, 513], [165, 107], [129, 544], [300, 106], [107, 165], [226, 227], [483, 727], [362, 81], [345, 345], [6, 281], [832, 63], [211, 571], [281, 683], [63, 832], [826, 412], [401, 148], [285, 160], [777, 554], [768, 101], [81, 362], [306, 91], [86, 69], [86, 508], [306, 160], [172, 457], [197, 143], [818, 62], [197, 27], [143, 197], [513, 166], [87, 166], [83, 101], [820, 243], [162, 253], [253, 162], [420, 166], [249, 543], [89, 411], [823, 7], [823, 661], [89, 412], [91, 306], [820, 44], [820, 28], [820, 280], [820, 114], [820, 169], [277, 167], [495, 87], [106, 828], [106, 300], [106, 279], [106, 230], [160, 385], [271, 412], [167, 277], [89, 301], [277, 14], [385, 160], [269, 166], [34, 28], [280, 179], [280, 214], [7, 823], [137, 139], [280, 296], [214, 280], [13, 32], [280, 18], [829, 168], [95, 280], [342, 180], [543, 249], [546, 474], [213, 441], [160, 29], [222, 255], [34, 24], [34, 26], [34, 29], [34, 30], [34, 31], [34, 32], [34, 33], [34, 590], [34, 36], [34, 37], [34, 39], [34, 588], [55, 6], [504, 441], [6, 55], [55, 411], [160, 36], [138, 285], [285, 138], [644, 166], [564, 174], [247, 7], [55, 533], [411, 89], [412, 89], [519, 459], [519, 21], [519, 20], [519, 85], [519, 222], [519, 405], [519, 106], [519, 259], [519, 315], [519, 189], [519, 227], [519, 607], [519, 228], [719, 379], [350, 861], [7, 247], [215, 220], [168, 203], [63, 107], [314, 310], [174, 564], [777, 862], [851, 575], [457, 62], [494, 108], [160, 191], [160, 504], [160, 148], [459, 19], [828, 106], [474, 663], [612, 828], [162, 643], [197, 13], [820, 166], [160, 663], [221, 107], [486, 664], [118, 511], [568, 168], [253, 166], [291, 257], [366, 305], [678, 480], [295, 472], [295, 255], [107, 28], [107, 31], [244, 460], [107, 23], [13, 26], [168, 14], [25, 459], [847, 113], [94, 377], [423, 245], [685, 859], [114, 725], [459, 25], [179, 280], [608, 265], [44, 160], [196, 820], [18, 280], [6, 549], [137, 160], [558, 9], [506, 496], [9, 558], [730, 460], [549, 6], [62, 457], [177, 220], [198, 128], [121, 601], [129, 107], [27, 197], [105, 303], [460, 730], [28, 339], [303, 58], [301, 445], [206, 440], [173, 166], [445, 301], [115, 28], [115, 367], [298, 536], [298, 507], [298, 287], [298, 551], [494, 70], [138, 63], [815, 859], [282, 222], [340, 325], [707, 7], [160, 327], [152, 166], [5, 464], [121, 345], [121, 278], [453, 166], [303, 166], [215, 155], [28, 229], [863, 57], [121, 221], [121, 17], [121, 340], [121, 77], [121, 820], [121, 329], [121, 856], [121, 365], [121, 796], [327, 160], [121, 173], [121, 333], [194, 137], [137, 194], [121, 88], [293, 44], [94, 440], [70, 494], [211, 215], [21, 537], [440, 94], [52, 814], [64, 323], [318, 482], [269, 121], [169, 280], [280, 169], [809, 59], [411, 864], [149, 206], [56, 738], [293, 11], [59, 809], [19, 459], [115, 340], [115, 173], [577, 166], [353, 15], [141, 232], [44, 555], [44, 565], [160, 152], [152, 160], [411, 286], [232, 141], [152, 340], [54, 438], [738, 809], [323, 64], [818, 301], [847, 47], [482, 777], [828, 16], [438, 54], [340, 121], [212, 183], [249, 440], [166, 664], [166, 93], [222, 309], [121, 160], [183, 212], [255, 222], [600, 600], [461, 335], [591, 145], [145, 591], [162, 333], [412, 552], [256, 154], [163, 115], [856, 249], [256, 355], [16, 828], [206, 149], [533, 145], [183, 513], [226, 74], [148, 180], [581, 581], [5, 285], [5, 302], [183, 308], [530, 11], [92, 86], [422, 615], [268, 316], [86, 92], [199, 1], [440, 249], [270, 486], [142, 184], [533, 82], [338, 37], [828, 353], [301, 818], [223, 758], [485, 333], [199, 338], [350, 343], [281, 615], [160, 310], [25, 545], [160, 856], [303, 121], [129, 557], [16, 221], [313, 215], [557, 129], [482, 531], [149, 160], [406, 672], [16, 771], [107, 16], [221, 16], [140, 335], [531, 482], [441, 166], [160, 832], [16, 107], [55, 698], [55, 738], [223, 222], [608, 61], [608, 264], [169, 128], [137, 859], [412, 193], [2, 489], [489, 2], [314, 726], [6, 440], [6, 458], [93, 494], [820, 493], [828, 371], [828, 46], [455, 455], [546, 820], [493, 820], [311, 309], [302, 302], [128, 44], [426, 270], [426, 168], [426, 172], [426, 129], [426, 486], [426, 292], [426, 183], [222, 142], [640, 640], [160, 10], [642, 121], [434, 11], [172, 426], [420, 78], [206, 231], [31, 121], [173, 121], [420, 121], [828, 796], [486, 426], [820, 654], [231, 206], [333, 366], [84, 811], [11, 434], [5, 47], [106, 356], [366, 333], [103, 390], [183, 145], [210, 121], [77, 121], [160, 818], [290, 531], [290, 437], [756, 390], [533, 473], [214, 211], [809, 57], [62, 8], [199, 121], [128, 30], [280, 128], [128, 290], [128, 36], [188, 533], [698, 738], [698, 481], [340, 128], [579, 447], [411, 64], [211, 214], [0, 5], [483, 321], [206, 14], [14, 206], [326, 121], [377, 249], [135, 455], [143, 326], [742, 166], [455, 251], [75, 367], [249, 531], [160, 160], [579, 448], [160, 209], [13, 325], [121, 1], [489, 121], [23, 170], [280, 820], [63, 849], [490, 121], [533, 188], [106, 642], [367, 121], [371, 121], [30, 820], [102, 64], [249, 377], [102, 516], [102, 517], [543, 493], [209, 160], [55, 126], [151, 655], [815, 63], [171, 318], [325, 325], [344, 191], [292, 426], [87, 283], [87, 329], [87, 28], [87, 161], [87, 303], [87, 152], [87, 210], [87, 371], [87, 256], [87, 296], [87, 81], [87, 351], [87, 129], [87, 365], [28, 87], [371, 353], [329, 160], [493, 543], [329, 87], [51, 93], [44, 30], [351, 87], [264, 9], [249, 87], [803, 58], [5, 0], [321, 391], [333, 58], [674, 9], [859, 665], [89, 59], [58, 333], [210, 87], [167, 655], [215, 366], [493, 562], [51, 44], [494, 458], [51, 114], [493, 600], [366, 215], [448, 322], [81, 87], [426, 306], [30, 44], [64, 234], [747, 189], [93, 62], [305, 865], [148, 150], [82, 123], [560, 518], [859, 58], [44, 51], [3, 859], [333, 121], [533, 440], [216, 509], [142, 291], [69, 216], [107, 430], [226, 121], [339, 464], [96, 338], [654, 50], [474, 121], [562, 493], [666, 12], [865, 305], [290, 419], [206, 342], [357, 121], [375, 121], [338, 96], [139, 819], [81, 375], [171, 590], [7, 264], [12, 666], [533, 530], [333, 546], [357, 82], [337, 511], [13, 56], [13, 263], [485, 166], [157, 384], [211, 308], [211, 462], [511, 337], [280, 340], [249, 208], [371, 708], [371, 640], [290, 168], [809, 685], [54, 698], [54, 685], [77, 166], [33, 28], [222, 282], [183, 845], [552, 738], [552, 54], [640, 371], [133, 362], [223, 121], [251, 370], [361, 367], [168, 290], [443, 251], [82, 87], [161, 87], [545, 28], [164, 447], [572, 593], [20, 83], [426, 114], [106, 358], [107, 83], [165, 362], [243, 166], [51, 27], [618, 617], [129, 121], [166, 243], [40, 847], [131, 532], [83, 20], [183, 371], [183, 36], [199, 53], [30, 39], [157, 284], [135, 443], [59, 865], [708, 371], [700, 707], [537, 85], [63, 88], [179, 262], [179, 349], [245, 171], [500, 499], [500, 502], [500, 504], [730, 730], [674, 265], [291, 142], [431, 4], [165, 290], [136, 136], [44, 133], [13, 349], [302, 238], [238, 302], [275, 813], [450, 426], [21, 280], [295, 576], [27, 51], [856, 166], [450, 295], [492, 256], [492, 518], [44, 856], [44, 121], [258, 16], [425, 65], [265, 500], [434, 252], [96, 66], [655, 167], [258, 249], [390, 438], [438, 390], [82, 23], [865, 412], [412, 865], [303, 236], [107, 57], [160, 778], [256, 249], [148, 401], [290, 295], [174, 157], [529, 362], [170, 280], [114, 426], [195, 552], [366, 443], [443, 366], [266, 9], [356, 509], [356, 362], [295, 290], [147, 644], [58, 244], [23, 427], [58, 372], [23, 215], [23, 333], [69, 356], [97, 434], [434, 97], [249, 367], [356, 69], [76, 333], [144, 433], [579, 15], [57, 460], [9, 266], [157, 130], [132, 89], [856, 44], [266, 358], [457, 238], [500, 506], [285, 571], [283, 758], [434, 158], [194, 6], [523, 706], [160, 141], [158, 434], [160, 54], [160, 85], [440, 366], [29, 533], [706, 836], [434, 361], [434, 593], [434, 275], [366, 440], [173, 256], [57, 552], [366, 356], [552, 57], [856, 7], [158, 89], [570, 247], [7, 856], [115, 546], [5, 218], [218, 5], [51, 30], [6, 544], [64, 183], [777, 482], [500, 569], [500, 332], [500, 264], [173, 155], [30, 128], [30, 51], [356, 366], [198, 196], [198, 51], [198, 197], [198, 199], [198, 200], [198, 167], [198, 201], [198, 202], [198, 593], [198, 203], [198, 204], [198, 776], [198, 205], [198, 206], [198, 94], [198, 95], [198, 207], [430, 441], [627, 667], [627, 549], [627, 189], [177, 18], [440, 399], [440, 172], [440, 14], [106, 223], [82, 333], [218, 183], [23, 107], [537, 243], [172, 440], [450, 13], [18, 177], [213, 487], [84, 444], [84, 582], [84, 1], [84, 127], [84, 210], [249, 401], [473, 232], [494, 310], [845, 281], [444, 84], [232, 473], [455, 211], [366, 68], [171, 333], [160, 371], [612, 474], [401, 249], [13, 421], [57, 54], [371, 160], [506, 504], [183, 218], [336, 280], [356, 549], [213, 558], [9, 213], [265, 674], [345, 178], [165, 51], [128, 106], [211, 455], [21, 256], [546, 333], [282, 560], [316, 758], [546, 508], [856, 160], [232, 65], [310, 18], [448, 62], [860, 115], [210, 249], [137, 546], [115, 16], [362, 16], [424, 258], [424, 237], [186, 531], [602, 707], [459, 565], [206, 290], [16, 362], [254, 366], [826, 809], [34, 438], [66, 96], [62, 448], [438, 34], [96, 469], [362, 62], [809, 826], [696, 297], [290, 206], [424, 758], [514, 108], [412, 665], [62, 362], [263, 486], [430, 308], [430, 211], [430, 462], [5, 243], [430, 12], [129, 166], [129, 283], [430, 565], [506, 87], [128, 576], [258, 424], [856, 434], [173, 249], [459, 362], [459, 358], [696, 17], [707, 465], [665, 412], [727, 483], [425, 568], [340, 280], [13, 108], [13, 47], [482, 483], [223, 313], [54, 552], [54, 532], [443, 135], [520, 552], [520, 532], [483, 482], [132, 809], [322, 447], [229, 143], [113, 176], [600, 129], [486, 263], [552, 520], [552, 137], [552, 532], [132, 192], [271, 809], [91, 107], [183, 756], [362, 165], [0, 297], [707, 61], [107, 296], [590, 171], [144, 434], [142, 467], [546, 760], [61, 465], [61, 519], [434, 144], [309, 311], [316, 297], [82, 419], [61, 707], [105, 419], [421, 856], [57, 243], [856, 421], [549, 627], [809, 138], [809, 271], [809, 465], [809, 519], [243, 57], [280, 51], [717, 106], [537, 189], [88, 285], [192, 132], [537, 1], [186, 186], [280, 170], [358, 510], [358, 608], [358, 602], [358, 266], [358, 452], [358, 700], [514, 91], [487, 805], [68, 68], [333, 283], [387, 377], [70, 83], [107, 91], [58, 6], [62, 137], [311, 494], [51, 165], [249, 165], [249, 184], [351, 734], [351, 1], [351, 130], [351, 181], [351, 95], [13, 4], [549, 356], [674, 569], [714, 62], [64, 417], [96, 866], [280, 47], [96, 867], [101, 83], [377, 227], [247, 707], [79, 420], [597, 282], [312, 228], [13, 413], [133, 166], [601, 107], [118, 209], [172, 143], [127, 169], [390, 380], [253, 366], [537, 170], [320, 868], [170, 537], [283, 333], [446, 429], [526, 655], [115, 283], [4, 13], [420, 79], [176, 129], [526, 714], [380, 390], [826, 803], [166, 129], [6, 58], [760, 546], [426, 290], [869, 181], [869, 179], [869, 397], [181, 869], [128, 420], [412, 56], [107, 44], [777, 10], [535, 777], [19, 856], [65, 840], [65, 425], [65, 714], [139, 216], [139, 334], [65, 526], [420, 128], [206, 291], [280, 219], [179, 869], [397, 869], [105, 64], [820, 751], [427, 431], [549, 362], [465, 61], [465, 809], [465, 707], [291, 168], [582, 84], [353, 640], [160, 66], [418, 6], [284, 214], [55, 809], [306, 21], [707, 232], [56, 481], [56, 271], [56, 826], [343, 107], [371, 97], [38, 170], [856, 366], [232, 707], [698, 138], [91, 160], [160, 519], [333, 84], [419, 490], [320, 157], [368, 375], [96, 80], [263, 115], [797, 797], [87, 233], [87, 393], [63, 44], [63, 419], [63, 490], [63, 184], [211, 283], [283, 378], [283, 211], [405, 45], [143, 128], [280, 116], [115, 263], [115, 145], [290, 426], [145, 115], [393, 87], [38, 847], [190, 473], [640, 185], [6, 845], [121, 191], [118, 128], [563, 493], [121, 548], [845, 6], [458, 813], [121, 228], [121, 99], [121, 438], [61, 389], [61, 392], [61, 391], [61, 368], [61, 104], [121, 747], [121, 540], [222, 1], [121, 168], [121, 172], [121, 526], [121, 426], [121, 93], [121, 261], [174, 405], [803, 767], [309, 0], [141, 6], [154, 654], [84, 494], [84, 86], [84, 107], [84, 62], [209, 5], [17, 252], [17, 441], [17, 233], [17, 163], [17, 269], [17, 23], [17, 404], [17, 493], [17, 532], [17, 427], [17, 474], [17, 180], [17, 41], [17, 153], [17, 115], [17, 173], [17, 147], [474, 81], [147, 17], [865, 865], [316, 268], [128, 118], [71, 612], [570, 707], [627, 707], [809, 137], [333, 280], [160, 107], [413, 200], [214, 207], [120, 5], [865, 59], [3, 89], [797, 231], [128, 1], [231, 797], [358, 459], [314, 106], [355, 107], [107, 343], [828, 546], [89, 3], [452, 265], [211, 83], [53, 440], [191, 420], [803, 826], [717, 215], [674, 707], [333, 129], [407, 525], [506, 83], [263, 280], [106, 314], [426, 93], [93, 424], [616, 459], [747, 424], [451, 360], [129, 422], [59, 138], [612, 2], [422, 129], [45, 405], [373, 528], [612, 4], [86, 756], [340, 129], [543, 672], [412, 138], [44, 128], [756, 86], [401, 430], [401, 543], [401, 664], [401, 870], [401, 835], [69, 362], [533, 63], [280, 263], [459, 616], [93, 426], [17, 424], [69, 420], [726, 85], [51, 201], [121, 232], [82, 856], [616, 1], [327, 728], [5, 209], [82, 365], [82, 169], [518, 615], [452, 856], [758, 61], [82, 36], [865, 63], [588, 282], [168, 424], [707, 627], [526, 424], [168, 493], [61, 758], [82, 106], [82, 130], [172, 424], [82, 314], [82, 188], [82, 127], [362, 107], [249, 550], [44, 283], [818, 189], [85, 160], [170, 38], [312, 255], [143, 172], [186, 654], [828, 45], [549, 82], [543, 494], [96, 327], [426, 263], [49, 87], [87, 49], [44, 82], [340, 811], [121, 78], [526, 543], [107, 362], [426, 440], [169, 263], [213, 265], [82, 356], [83, 329], [61, 537], [61, 52], [83, 474], [38, 113], [23, 464], [23, 128], [23, 220], [23, 367], [500, 141], [30, 261], [420, 69], [55, 520], [325, 21], [84, 546], [84, 272], [84, 835], [230, 424], [230, 282], [375, 368], [200, 413], [533, 856], [83, 44], [483, 219], [440, 426], [121, 308], [397, 122], [232, 426], [188, 145], [256, 705], [272, 84], [16, 157], [122, 397], [21, 83], [538, 723], [306, 538], [372, 513], [170, 533], [4, 612], [820, 168], [311, 222], [174, 284], [329, 96], [245, 486], [719, 397], [598, 482], [165, 860], [107, 327], [327, 107], [96, 329], [481, 96], [777, 733], [83, 128], [777, 538], [520, 166], [168, 820], [302, 160], [820, 618], [419, 81], [265, 452], [160, 302], [533, 164], [533, 269], [733, 306], [21, 533], [282, 494], [47, 14], [533, 360], [533, 213], [106, 518], [106, 419], [828, 434], [733, 777], [164, 16], [294, 280], [14, 482], [581, 531], [424, 128], [533, 362], [533, 529], [206, 515], [206, 232], [206, 292], [585, 129], [145, 188], [129, 87], [222, 543], [211, 402], [362, 356], [280, 294], [498, 538], [171, 113], [249, 489], [520, 55], [284, 174], [434, 828], [329, 576], [263, 426], [263, 338], [263, 169], [211, 420], [263, 168], [263, 290], [669, 615], [169, 113], [14, 515], [135, 338], [515, 206], [803, 2], [2, 612], [426, 113], [860, 251], [419, 44], [419, 128], [419, 14], [44, 419], [173, 546], [419, 460], [169, 30], [184, 189], [113, 426], [64, 357], [615, 669], [14, 419], [421, 86], [420, 211], [482, 14], [428, 273], [169, 464], [464, 169], [285, 625], [477, 66], [264, 406], [264, 359], [86, 421], [211, 64], [113, 169], [30, 30], [266, 555], [266, 324], [266, 754], [30, 24], [64, 211], [265, 232], [533, 88], [533, 302], [557, 201], [9, 264], [213, 264], [66, 514], [362, 69], [63, 865], [186, 433], [543, 401], [30, 169], [205, 483], [232, 265], [48, 372], [865, 56], [308, 16], [56, 865], [533, 306], [533, 173], [465, 519], [29, 443], [569, 501], [538, 777], [183, 464], [183, 351], [421, 421], [38, 30], [27, 165], [786, 519], [423, 333], [799, 189], [747, 121], [96, 28], [160, 59], [280, 483], [83, 450], [845, 520], [28, 96], [290, 14], [608, 213], [16, 308], [426, 572], [183, 160], [211, 683], [5, 496], [661, 707], [231, 196], [231, 385], [231, 871], [404, 533], [859, 366], [231, 730], [162, 432], [593, 572], [537, 14], [777, 340], [196, 231], [506, 651], [368, 112], [90, 86], [13, 698], [307, 206], [288, 295], [856, 452], [112, 368], [433, 433], [101, 125], [845, 865], [520, 845], [36, 588], [375, 142], [306, 64], [730, 231], [88, 183], [776, 776], [280, 160], [183, 302], [271, 698], [302, 183], [118, 301], [820, 362], [142, 375], [708, 353], [160, 25], [546, 404], [362, 28], [362, 280], [362, 129], [93, 513], [355, 210], [627, 809], [530, 533], [126, 723], [255, 210], [549, 855], [549, 187], [549, 80], [549, 298], [549, 779], [549, 663], [549, 582], [549, 287], [549, 188], [549, 800], [549, 799], [549, 67], [549, 747], [549, 551], [549, 679], [549, 671], [549, 710], [549, 778], [549, 146], [549, 818], [549, 690], [549, 190], [549, 540], [549, 467], [340, 274], [143, 758], [465, 14], [706, 290], [169, 290], [244, 210], [533, 371], [201, 557], [533, 210], [20, 222], [62, 419], [128, 81], [588, 169], [169, 588], [362, 820], [434, 506], [13, 440], [81, 128], [14, 465], [424, 164], [251, 30], [178, 345], [288, 83], [272, 310], [211, 489], [30, 251], [411, 4], [810, 520], [232, 266], [164, 424], [4, 411], [308, 166], [342, 157], [266, 232], [87, 828], [86, 620], [738, 271], [165, 533], [271, 738], [128, 116], [173, 494], [841, 231], [533, 582], [231, 841], [489, 211], [860, 438], [326, 733], [282, 248], [18, 18], [160, 283], [182, 351], [419, 270], [419, 337], [419, 199], [419, 591], [419, 168], [419, 172], [419, 214], [419, 256], [419, 221], [419, 68], [419, 106], [419, 184], [419, 468], [419, 62], [419, 12], [419, 526], [86, 518], [419, 848], [187, 533], [466, 500], [261, 121], [282, 687], [597, 460], [64, 492], [533, 326], [494, 543], [582, 533], [494, 173], [533, 820], [151, 251], [18, 74], [380, 160], [498, 405], [58, 83], [238, 243], [115, 105], [490, 518], [210, 424], [4, 256], [251, 151], [806, 806], [714, 86], [280, 113], [405, 498], [430, 533], [249, 464], [249, 218], [58, 183], [533, 541], [526, 121], [533, 147], [183, 58], [356, 424], [623, 611], [533, 116], [206, 786], [681, 133], [448, 107], [80, 128], [426, 423], [5, 738], [5, 271], [141, 502], [107, 400], [400, 107], [809, 707], [466, 504], [465, 667], [465, 473], [465, 549], [465, 189], [651, 624], [169, 318], [302, 285], [708, 124], [318, 426], [93, 121], [733, 326], [544, 6], [865, 845], [474, 96], [79, 226], [44, 699], [283, 128], [142, 303], [243, 319], [533, 234], [290, 263], [533, 242], [387, 389], [303, 271], [419, 129], [86, 328], [86, 90], [304, 256], [132, 142], [533, 310], [533, 17], [283, 371], [358, 247], [142, 424], [283, 393], [283, 320], [4, 587], [107, 356], [107, 212], [107, 550], [107, 459], [107, 163], [107, 131], [107, 589], [107, 420], [107, 544], [107, 489], [107, 427], [107, 233], [107, 642], [107, 495], [107, 210], [107, 21], [107, 269], [107, 393], [107, 221], [107, 211], [107, 490], [107, 36], [271, 303], [129, 419], [529, 265], [265, 529], [58, 13], [138, 685], [362, 51], [92, 336], [350, 351], [287, 68], [426, 318], [314, 18], [314, 228], [314, 764], [96, 474], [856, 362], [856, 19], [385, 231], [14, 426], [251, 860], [655, 37], [249, 180], [249, 278], [295, 288], [129, 695], [424, 211], [69, 141], [27, 261], [264, 707], [220, 23], [695, 129], [256, 304], [448, 273], [320, 283], [395, 164], [108, 652], [419, 280], [419, 371], [480, 508], [450, 329], [264, 232], [533, 262], [533, 180], [426, 245], [872, 707], [232, 264], [533, 201], [167, 181], [167, 526], [14, 51], [261, 51], [154, 107], [473, 183], [241, 498], [141, 81], [698, 13], [444, 438], [16, 164], [292, 168], [63, 131], [305, 516], [305, 517], [516, 305], [685, 6], [181, 64], [149, 167], [533, 46], [845, 845], [776, 204], [707, 872], [872, 85], [167, 149], [425, 457], [425, 289], [425, 621], [425, 873], [425, 294], [425, 874], [425, 430], [425, 705], [425, 543], [425, 526], [425, 870], [425, 835], [425, 714], [425, 574], [425, 129], [425, 130], [425, 791], [425, 562], [425, 403], [563, 86], [231, 656], [178, 483], [533, 115], [256, 4], [408, 96], [96, 114], [96, 408], [125, 101], [183, 236], [533, 822], [533, 290], [114, 96], [397, 103], [6, 685], [820, 856], [483, 178], [533, 576], [652, 108], [619, 56], [619, 57], [619, 303], [619, 89], [83, 433], [121, 217], [121, 432], [160, 83], [533, 458], [823, 264], [282, 234], [156, 381], [181, 383], [181, 628], [269, 579], [793, 613], [211, 695], [533, 667], [211, 240], [54, 138], [54, 271], [54, 826], [546, 828], [390, 756], [209, 420], [695, 211], [419, 161], [533, 430], [483, 232], [272, 428], [272, 429], [430, 183], [128, 419], [526, 181], [526, 167], [106, 357], [183, 430], [242, 243], [411, 738], [420, 209], [405, 541], [855, 155], [155, 855], [209, 13], [875, 170], [533, 493], [88, 806], [430, 856], [333, 533], [747, 62], [84, 623], [84, 373], [13, 63], [13, 767], [533, 20], [197, 205], [107, 107], [747, 282], [474, 84], [93, 576], [89, 211], [89, 58], [533, 19], [107, 318], [450, 93], [401, 712], [57, 160], [65, 533], [533, 44], [181, 167], [94, 351], [413, 93], [685, 138], [533, 504], [5, 450], [820, 30], [820, 165], [421, 487], [272, 447], [504, 533], [120, 133], [160, 57], [56, 412], [564, 263], [564, 183], [564, 356], [564, 304], [564, 686], [564, 4], [564, 303], [564, 10], [564, 638], [564, 164], [564, 640], [564, 748], [564, 589], [564, 114], [564, 2], [564, 158], [564, 81], [564, 63], [564, 876], [564, 340], [564, 338], [564, 480], [564, 281], [564, 258], [362, 856], [6, 418], [362, 160], [438, 860], [114, 220], [114, 44], [114, 362], [438, 444], [208, 211], [333, 441], [333, 233], [333, 269], [333, 404], [820, 143], [820, 342], [820, 172], [820, 133], [820, 231], [820, 129], [820, 581], [820, 123], [820, 464], [820, 232], [820, 482], [820, 47], [820, 336], [820, 93], [820, 483], [820, 136], [820, 171], [448, 579], [448, 617], [448, 274], [448, 164], [448, 448], [448, 735], [395, 16], [498, 241], [40, 119], [160, 550], [160, 549], [56, 698], [859, 685], [498, 232], [58, 215], [145, 255], [859, 137], [19, 533], [215, 58], [243, 242], [342, 62], [533, 877], [533, 81], [417, 176], [114, 533], [401, 289], [401, 873], [401, 294], [401, 874], [401, 705], [401, 574], [401, 791], [533, 141], [176, 417], [6, 194], [25, 301], [352, 656], [301, 25], [201, 82], [201, 121], [498, 178], [178, 498], [177, 113], [424, 738], [82, 201], [107, 162], [113, 177], [572, 82], [498, 406], [498, 446], [498, 501], [498, 332], [560, 341], [115, 460], [104, 393], [728, 327], [559, 142], [160, 56], [86, 393], [393, 86], [205, 86], [45, 447], [83, 23], [593, 342], [165, 142], [86, 563], [250, 174], [533, 236], [174, 250], [498, 14], [16, 64], [142, 165], [329, 198], [714, 413], [533, 408], [69, 747], [581, 533], [174, 854], [408, 533], [447, 272], [447, 45], [56, 209], [167, 197], [414, 443], [234, 282], [161, 707], [747, 69], [240, 211], [342, 593], [30, 424], [243, 209], [160, 526], [32, 32], [96, 234], [303, 738], [209, 56], [533, 165], [533, 361], [533, 114], [391, 389], [15, 174], [208, 194], [389, 387], [533, 190], [499, 232], [499, 332], [5, 362], [52, 820], [332, 836], [152, 70], [29, 116], [6, 426], [66, 90], [600, 585], [820, 52], [828, 419], [85, 86], [62, 375], [375, 62], [132, 249], [443, 414], [180, 468], [330, 330], [533, 35], [533, 40], [533, 23], [533, 303], [160, 193], [845, 58], [362, 466], [232, 501], [366, 424], [607, 419], [195, 174], [457, 568], [457, 840], [457, 426], [457, 425], [174, 195], [533, 28], [424, 30], [105, 400], [611, 270], [400, 105], [249, 64], [533, 342], [106, 283], [268, 248], [533, 169], [249, 695], [417, 162], [695, 249], [498, 12], [40, 533], [498, 247], [242, 236], [152, 84], [423, 5], [86, 590], [86, 35], [63, 13], [96, 236], [455, 547], [528, 392], [172, 51], [271, 145], [9, 699], [9, 500], [9, 502], [9, 406], [9, 498], [9, 332], [9, 358], [24, 440], [442, 442], [183, 854], [142, 20], [32, 533], [303, 424], [171, 245], [69, 86], [96, 470], [208, 4], [208, 63], [470, 96], [20, 142], [5, 120], [96, 333], [96, 23], [74, 424], [54, 132], [23, 96], [5, 423], [440, 24], [332, 608], [12, 498], [201, 533], [271, 137], [552, 271], [115, 83], [51, 79], [115, 615], [115, 442], [473, 419], [473, 498], [498, 473], [662, 494], [662, 86], [494, 662], [333, 96], [61, 872], [305, 683], [143, 325], [197, 64], [226, 107], [872, 61], [457, 526], [211, 734], [211, 764], [55, 271], [160, 498], [424, 495], [424, 695], [198, 485], [269, 335], [840, 562], [63, 6], [856, 265], [678, 68], [236, 96], [62, 143], [255, 405], [504, 11], [235, 319], [162, 321], [83, 143], [51, 118], [101, 131], [467, 418], [841, 397], [397, 841], [715, 20], [169, 365], [62, 747], [443, 29], [442, 455], [447, 62], [358, 232], [358, 466], [358, 765], [232, 358], [58, 698], [190, 108], [608, 332], [667, 69], [496, 64], [404, 601], [281, 57], [247, 498], [6, 141], [466, 856], [856, 466], [40, 443], [21, 174], [21, 6], [589, 142], [533, 520], [560, 211], [6, 21], [323, 300], [678, 627], [533, 168], [191, 379], [249, 2], [167, 284], [167, 232], [167, 515], [167, 130], [129, 214], [11, 129], [30, 129], [515, 167], [81, 129], [275, 60], [2, 249], [174, 21], [11, 504], [581, 301], [6, 79], [832, 412], [748, 405], [284, 167], [820, 106], [215, 820], [512, 366], [300, 323], [62, 188], [301, 581], [13, 145], [60, 275], [27, 878], [106, 169], [106, 820], [454, 82], [271, 285], [303, 5], [33, 878], [440, 231], [546, 221], [62, 189], [285, 129], [366, 512], [231, 440], [485, 198], [878, 27], [27, 62], [408, 271], [431, 84], [271, 408], [412, 832], [94, 205], [588, 438], [211, 194], [64, 197], [303, 235], [438, 588], [235, 303], [550, 44], [109, 366], [549, 44], [64, 771], [96, 46], [44, 550], [44, 549], [172, 28], [172, 27], [172, 114], [405, 438], [204, 593], [198, 329], [8, 856], [93, 543], [366, 109], [335, 448], [169, 405], [26, 135], [121, 252], [856, 8], [149, 349], [62, 544], [377, 458], [169, 860], [412, 820], [132, 366], [820, 412], [150, 148], [132, 738], [372, 64], [391, 390], [546, 355], [280, 572], [280, 515], [280, 204], [80, 129], [13, 39], [167, 290], [167, 292], [590, 438], [590, 86], [62, 371], [438, 590], [243, 132], [132, 243], [377, 220], [481, 59], [166, 158], [0, 313], [0, 223], [879, 242], [106, 372], [106, 373], [828, 64], [320, 94], [2, 865], [350, 320], [352, 352], [232, 167], [94, 320], [166, 2], [96, 20], [223, 0], [280, 13], [506, 166], [544, 62], [546, 158], [20, 96], [361, 438], [169, 816], [438, 361], [552, 809], [438, 405], [390, 268], [283, 44], [236, 208], [452, 19], [52, 61], [700, 19], [166, 399], [166, 506], [114, 116], [221, 546], [4, 145], [145, 4], [338, 114], [116, 114], [816, 816], [5, 303], [427, 333], [427, 23], [454, 106], [166, 427], [154, 154], [506, 856], [87, 300], [19, 365], [27, 170], [27, 338], [27, 135], [880, 174], [237, 424], [174, 880], [96, 340], [444, 417], [428, 140], [587, 4], [356, 121], [96, 151], [96, 119], [96, 263], [96, 725], [96, 442], [96, 423], [96, 437], [96, 655], [96, 47], [96, 336], [96, 136], [96, 367], [96, 439], [75, 96], [423, 96], [13, 685], [96, 173], [96, 10], [96, 259], [96, 881], [96, 326], [223, 612], [10, 96], [241, 210], [326, 96], [5, 718], [106, 454], [812, 859], [442, 96], [685, 880], [3, 62], [82, 549], [82, 518], [31, 198], [58, 859], [541, 541], [2, 283], [508, 679], [292, 515], [283, 2], [103, 395], [803, 194], [128, 204], [244, 158], [478, 13], [198, 31], [46, 322], [19, 49], [880, 286], [880, 63], [165, 820], [405, 531], [251, 27], [62, 627], [346, 511], [615, 357], [241, 244], [865, 2], [357, 615], [62, 169], [31, 162], [377, 782], [533, 15], [533, 335], [860, 816], [860, 135], [533, 322], [533, 45], [178, 681], [590, 443], [114, 172], [169, 301], [880, 685], [45, 335], [533, 4], [533, 194], [513, 642], [513, 459], [87, 211], [405, 221], [238, 62], [64, 405], [4, 698], [166, 377], [166, 12], [207, 197], [197, 207], [63, 880], [162, 31], [46, 96], [661, 362], [428, 335], [362, 661], [6, 63], [322, 676], [132, 86], [15, 322], [61, 379], [768, 99], [420, 409], [47, 96], [62, 238], [96, 101], [12, 11], [428, 322], [286, 6], [243, 236], [504, 856], [451, 141], [337, 548], [685, 408], [66, 66], [405, 263], [271, 528], [387, 485], [698, 412], [57, 411], [57, 271], [249, 12], [33, 113], [419, 5], [419, 489], [543, 93], [64, 349], [528, 271], [489, 419], [142, 77], [142, 253], [142, 756], [142, 828], [142, 131], [142, 269], [142, 180], [142, 856], [142, 404], [142, 493], [142, 153], [142, 17], [142, 173], [142, 453], [142, 147], [611, 11], [11, 12], [391, 61], [142, 812], [170, 434], [4, 712], [138, 126], [211, 258], [4, 55], [4, 738], [408, 685], [81, 166], [8, 86], [303, 551], [322, 15], [322, 428], [322, 429], [428, 15], [428, 428], [405, 758], [379, 16], [379, 80], [379, 164], [379, 63], [379, 628], [438, 5], [2, 107], [146, 601], [146, 166], [6, 587], [500, 501], [500, 406], [627, 62], [845, 303], [686, 245], [58, 880], [303, 845], [349, 64], [86, 259], [259, 86], [148, 179], [533, 187], [469, 90], [91, 758], [342, 851], [4, 271], [66, 211], [229, 338], [295, 560], [166, 23], [166, 156], [358, 105], [405, 124], [152, 288], [343, 183], [343, 129], [581, 420], [166, 880], [105, 114], [105, 367], [105, 358], [352, 178], [105, 81], [105, 326], [367, 105], [551, 303], [166, 178], [618, 404], [458, 377], [458, 183], [880, 58], [86, 8], [86, 353], [326, 143], [353, 86], [809, 806], [806, 809], [417, 79], [166, 611], [249, 19], [244, 243], [62, 64], [215, 64], [149, 490], [82, 137], [417, 183], [81, 81], [166, 573], [237, 243], [47, 417], [183, 343], [249, 187], [141, 573], [141, 9], [264, 823], [533, 581], [66, 117], [66, 611], [66, 389], [66, 661], [66, 121], [66, 560], [66, 338], [66, 480], [66, 252], [66, 48], [66, 654], [420, 581], [187, 249], [86, 623], [58, 159], [58, 158], [856, 504], [194, 58], [100, 62], [141, 856], [450, 86], [856, 141], [149, 621], [878, 23], [335, 429], [183, 705], [508, 184], [150, 381], [149, 347], [6, 181], [6, 337], [181, 6], [6, 296], [6, 377], [459, 490], [337, 6], [46, 405], [459, 106], [621, 149], [149, 179], [573, 166], [180, 87], [188, 518], [404, 532], [490, 149], [32, 417], [148, 224], [560, 295], [194, 865], [498, 86], [865, 194], [417, 32], [518, 518], [397, 378], [152, 116], [560, 362], [560, 19], [560, 358], [546, 154], [560, 329], [166, 20], [12, 560], [166, 194], [166, 393], [166, 250], [560, 12], [311, 190], [419, 28], [316, 560], [166, 882], [350, 180], [335, 533], [121, 29], [121, 306], [121, 647], [121, 748], [121, 230], [121, 245], [121, 568], [121, 236], [121, 242], [499, 19], [748, 121], [150, 741], [665, 812], [57, 194], [412, 194], [86, 21], [145, 21], [194, 305], [847, 48], [329, 514], [169, 82], [169, 828], [169, 121], [305, 194], [238, 0], [21, 86], [106, 560], [169, 106], [0, 238], [256, 121], [21, 145], [877, 81], [244, 209], [420, 20], [113, 36], [36, 113], [466, 487], [342, 350], [62, 3], [131, 64], [443, 26], [249, 589], [589, 249], [466, 466], [131, 586], [404, 372], [404, 282], [404, 366], [404, 121], [404, 86], [404, 546], [549, 218], [380, 393], [280, 121], [809, 89], [809, 302], [302, 809], [137, 880], [137, 812], [443, 339], [218, 549], [419, 45], [424, 393], [45, 419], [474, 560], [158, 58], [611, 176], [64, 412], [64, 116], [560, 474], [422, 19], [509, 667], [57, 812], [430, 64], [509, 184], [20, 166], [820, 64], [667, 509], [262, 347], [509, 418], [64, 820], [509, 509], [878, 35], [431, 372], [509, 69], [509, 508], [880, 880], [812, 57], [518, 166], [509, 549], [13, 458], [11, 611], [336, 92], [35, 878], [142, 64], [166, 666], [828, 356], [347, 262], [28, 419], [356, 828], [405, 211], [405, 63], [211, 405], [187, 518], [118, 183], [96, 728], [458, 64], [209, 543], [581, 450], [64, 458], [409, 390], [13, 79], [131, 63], [367, 361], [589, 607], [198, 198], [166, 347], [490, 459], [426, 840], [131, 832], [29, 62], [50, 152], [62, 87], [546, 226], [62, 29], [180, 162], [452, 608], [114, 847], [179, 60], [509, 107], [509, 62], [145, 393], [62, 736], [832, 131], [417, 27], [31, 33], [810, 88], [88, 810], [450, 581], [459, 187], [811, 28], [65, 169], [812, 601], [121, 96], [447, 273], [756, 142], [847, 443], [812, 3], [17, 431], [608, 452], [292, 129], [142, 577], [307, 314], [13, 483], [157, 174], [509, 81], [840, 426], [815, 194], [194, 815], [427, 145], [218, 513], [17, 872], [405, 183], [166, 139], [482, 598], [577, 142], [165, 883], [166, 249], [145, 422], [145, 856], [183, 405], [166, 87], [340, 777], [249, 159], [480, 184], [509, 325], [249, 431], [249, 23], [249, 340], [249, 173], [249, 333], [169, 340], [828, 145], [278, 365], [258, 211], [258, 18], [422, 248], [259, 89], [325, 509], [340, 249], [518, 187], [11, 430], [412, 884], [494, 24], [58, 373], [588, 36], [427, 249], [307, 85], [800, 533], [164, 96], [167, 460], [299, 590], [590, 299], [372, 58], [84, 229], [48, 84], [166, 140], [229, 84], [339, 437], [232, 608], [232, 804], [459, 0], [880, 137], [13, 667], [13, 333], [509, 68], [832, 587], [557, 395], [494, 2], [265, 804], [885, 728], [231, 655], [285, 65], [7, 62], [426, 65], [494, 23], [543, 209], [537, 366], [408, 208], [23, 494], [94, 342], [200, 207], [179, 104], [698, 126], [480, 39], [143, 142], [388, 128], [388, 150], [308, 430], [308, 211], [885, 106], [211, 430], [509, 306], [460, 167], [506, 500], [209, 128], [64, 249], [81, 145], [20, 885], [13, 730], [730, 13], [494, 25], [278, 157], [333, 83], [515, 93], [515, 277], [588, 545], [262, 100], [83, 333], [286, 880], [885, 20], [455, 58], [249, 357], [392, 588], [269, 615], [137, 87], [87, 137], [143, 121], [392, 368], [61, 14], [537, 103], [537, 380], [537, 389], [537, 394], [537, 526], [537, 53], [537, 221], [537, 178], [537, 403], [537, 486], [55, 166], [53, 103], [53, 380], [53, 389], [53, 61], [53, 85], [53, 394], [53, 312], [53, 537], [53, 526], [53, 465], [53, 221], [53, 18], [53, 14], [53, 178], [53, 403], [53, 486], [141, 608], [92, 818], [333, 256], [615, 269], [404, 586], [12, 856], [249, 366], [190, 16], [166, 55], [164, 273], [100, 262], [95, 204], [291, 450], [457, 399], [104, 179], [256, 183], [184, 62], [25, 588], [482, 423], [423, 482], [818, 92], [45, 640], [92, 723], [62, 357], [470, 151], [381, 156], [80, 866], [271, 55], [166, 856], [102, 411], [102, 192], [353, 796], [250, 157], [209, 16], [661, 856], [79, 417], [238, 209], [238, 242], [828, 121], [93, 204], [411, 408], [23, 121], [12, 430], [204, 93], [277, 515], [453, 121], [669, 420], [342, 681], [423, 89], [152, 87], [886, 601], [92, 152], [856, 121], [216, 273], [152, 92], [3, 601], [183, 272], [126, 698], [723, 92], [318, 170], [333, 36], [62, 7], [886, 3], [887, 20], [20, 887], [856, 430], [430, 11], [65, 357], [64, 828], [87, 20], [31, 40], [31, 35], [31, 32], [40, 31], [62, 2], [3, 57], [347, 179], [347, 307], [157, 347], [213, 496], [303, 571], [387, 157], [837, 837], [768, 100], [342, 130], [342, 94], [115, 820], [115, 128], [856, 87], [820, 115], [223, 518], [409, 421], [87, 353], [865, 58], [278, 342], [278, 149], [278, 262], [353, 87], [820, 256], [820, 212], [176, 501], [493, 282], [7, 500], [7, 502], [7, 506], [377, 166], [408, 411], [21, 282], [184, 422], [422, 184], [649, 649], [283, 28], [283, 169], [283, 367], [57, 3], [121, 726], [121, 759], [482, 162], [58, 812], [412, 888], [404, 301], [340, 217], [170, 13], [866, 80], [405, 601], [28, 405], [46, 121], [59, 192], [121, 151], [121, 353], [192, 59], [235, 244], [601, 405], [30, 339], [232, 484], [13, 170], [405, 434], [86, 225], [607, 118], [828, 889], [23, 480], [162, 654], [86, 201], [201, 86], [333, 89], [494, 590], [132, 208], [511, 262], [885, 21], [160, 552], [23, 212], [121, 890], [340, 405], [434, 283], [140, 140], [698, 57], [698, 55], [698, 54], [698, 685], [698, 56], [698, 59], [36, 48], [409, 497], [24, 25], [24, 26], [24, 32], [24, 33], [24, 34], [24, 590], [24, 36], [24, 38], [24, 39], [24, 588], [48, 338], [464, 35], [190, 121], [452, 498], [35, 464], [498, 452], [347, 157], [57, 601], [601, 57], [413, 413], [347, 61], [61, 347], [368, 295], [121, 190], [87, 426], [162, 90], [815, 880], [409, 81], [294, 377], [86, 28], [391, 380], [160, 621], [28, 86], [52, 157], [246, 7], [7, 246], [129, 113], [285, 806], [41, 41], [41, 751], [81, 301], [817, 817], [67, 160], [234, 96], [86, 70], [409, 40], [40, 409], [225, 86], [160, 551], [160, 67], [209, 64], [405, 889], [887, 887], [708, 768], [430, 7], [529, 499], [699, 529], [529, 699], [211, 705], [301, 81], [509, 260], [509, 678], [886, 58], [182, 308], [86, 366], [281, 718], [833, 5], [160, 240], [240, 160], [107, 2], [333, 82], [86, 10], [776, 201], [163, 546], [306, 509], [169, 6], [599, 158], [442, 478], [409, 190], [678, 509], [681, 160], [856, 506], [169, 820], [367, 470], [169, 419], [2, 880], [887, 885], [254, 254], [210, 405], [340, 282], [889, 405], [269, 142], [641, 282], [74, 400], [859, 412], [107, 736], [179, 347], [107, 748], [377, 294], [160, 559], [262, 377], [400, 74], [243, 820], [377, 262], [160, 812], [282, 641], [394, 295], [155, 849], [438, 64], [205, 94], [565, 430], [581, 78], [412, 859], [419, 169], [48, 847], [45, 404], [812, 160], [559, 160], [531, 419], [419, 351], [747, 107], [419, 531], [81, 108], [351, 419], [134, 867], [602, 602], [525, 359], [470, 86], [404, 45], [282, 106], [160, 747], [106, 885], [359, 525], [405, 308], [405, 133], [133, 405], [245, 301], [64, 438], [14, 368], [420, 669], [51, 283], [57, 880], [132, 217], [812, 880], [299, 700], [106, 282], [700, 299], [728, 96], [812, 412], [333, 28], [5, 828], [86, 203], [5, 833], [86, 662], [226, 223], [86, 138], [412, 812], [168, 600], [884, 884], [242, 62], [65, 282], [859, 812], [3, 812], [282, 65], [160, 882], [211, 807], [891, 405], [26, 590], [820, 365], [86, 226], [160, 355], [169, 308], [405, 891], [226, 86], [483, 556], [86, 94], [533, 172], [611, 160], [107, 747], [756, 431], [860, 455], [354, 354], [263, 405], [182, 869], [479, 479], [284, 511], [262, 148], [160, 261], [528, 373], [470, 494], [56, 880], [730, 211], [299, 299], [300, 892], [405, 892], [191, 160], [587, 832], [518, 107], [511, 284], [210, 107], [195, 57], [424, 105], [128, 388], [308, 462], [44, 107], [169, 638], [443, 590], [266, 525], [706, 523], [300, 889], [880, 157], [57, 195], [525, 266], [35, 14], [6, 89], [288, 571], [698, 2], [263, 82], [82, 263], [458, 413], [458, 526], [195, 160], [2, 698], [507, 85], [57, 6], [399, 457], [237, 174], [440, 176], [240, 158], [287, 298], [287, 536], [889, 300], [131, 160], [184, 508], [35, 261], [261, 160], [107, 89], [206, 284], [284, 206], [6, 57], [248, 330], [73, 756], [373, 240], [373, 552], [373, 93], [373, 133], [892, 892], [170, 310], [138, 86], [310, 170], [191, 150], [533, 508], [354, 101], [266, 407], [892, 300], [300, 183], [300, 475], [300, 642], [300, 44], [300, 495], [300, 739], [300, 263], [300, 218], [300, 283], [300, 209], [300, 161], [300, 303], [300, 210], [300, 255], [300, 638], [300, 21], [300, 371], [424, 641], [160, 131], [367, 419], [199, 205], [308, 169], [602, 499], [92, 887], [86, 470], [494, 470], [404, 494], [37, 24], [201, 169], [169, 201], [466, 893], [373, 515], [373, 184], [887, 92], [64, 21], [160, 156], [424, 880], [190, 366], [366, 190], [63, 812], [245, 337], [337, 245], [387, 393], [828, 107], [359, 7], [151, 24], [419, 714], [12, 82], [12, 121], [615, 828], [79, 152], [82, 12], [84, 615], [151, 424], [84, 57], [282, 880], [152, 79], [160, 312], [165, 121], [8, 466], [812, 102], [373, 194], [201, 283], [174, 80], [75, 753], [283, 201], [121, 12], [880, 815], [556, 531], [174, 126], [92, 685], [880, 859], [470, 261], [137, 80], [466, 8], [486, 5], [200, 820], [6, 486], [5, 840], [318, 160], [426, 283], [753, 860], [753, 119], [327, 894], [860, 753], [23, 261], [371, 208], [859, 859], [424, 589], [531, 556], [466, 64], [611, 64], [102, 812], [318, 36], [318, 169], [264, 358], [593, 94], [283, 426], [146, 316], [426, 166], [426, 518], [426, 714], [366, 180], [407, 494], [132, 252], [75, 470], [162, 169], [851, 157], [169, 162], [180, 366], [452, 421], [452, 466], [452, 358], [316, 146], [611, 6], [466, 6], [358, 264], [249, 215], [494, 90], [589, 424], [889, 375], [117, 62], [373, 481], [107, 284], [232, 498], [284, 107], [860, 375], [380, 200], [380, 562], [469, 143], [400, 678], [499, 7], [581, 497], [190, 311], [5, 466], [321, 283], [6, 56], [318, 82], [466, 5], [685, 92], [62, 163], [375, 889], [56, 6], [470, 116], [116, 470], [557, 128], [641, 371], [258, 160], [82, 269], [107, 98], [4, 252], [82, 368], [82, 277], [82, 219], [82, 782], [82, 730], [82, 287], [82, 93], [401, 82], [252, 63], [63, 252], [100, 301], [68, 679], [301, 100], [132, 518], [320, 349], [546, 742], [518, 132], [199, 258], [276, 276], [246, 246], [162, 184], [510, 494], [366, 152], [258, 199], [496, 213], [63, 55], [375, 860], [63, 243], [188, 183], [284, 203], [812, 273], [5, 100], [184, 162], [487, 496], [242, 238], [98, 107], [100, 5], [277, 203], [417, 895], [13, 526], [13, 19], [167, 172], [160, 395], [16, 642], [498, 487], [160, 353], [249, 201], [10, 405], [201, 249], [172, 167], [73, 316], [615, 146], [405, 10], [157, 180], [343, 157], [306, 68], [68, 306], [13, 53], [708, 404], [21, 188], [173, 107], [470, 438], [438, 470], [128, 23], [132, 258], [258, 132], [330, 74], [418, 287], [300, 10], [141, 360], [287, 418], [690, 21], [300, 367], [173, 160], [812, 58], [812, 665], [485, 387], [21, 690], [21, 222], [173, 405], [305, 16], [305, 489], [73, 309], [116, 183], [362, 401], [183, 116], [489, 305], [376, 160], [93, 14], [208, 155], [405, 173], [137, 6], [128, 5], [513, 513], [466, 160], [39, 40], [280, 734], [280, 1], [280, 148], [280, 351], [280, 575], [613, 243], [332, 421], [642, 16], [89, 64], [394, 388], [14, 93], [812, 366], [355, 546], [223, 365], [64, 173], [812, 142], [615, 180], [615, 17], [615, 493], [243, 613], [674, 7], [615, 820], [96, 121], [615, 393], [615, 474], [615, 21], [132, 46], [615, 427], [615, 115], [809, 88], [615, 333], [173, 892], [10, 64], [405, 375], [87, 258], [106, 83], [21, 615], [46, 132], [170, 301], [300, 173], [173, 300], [615, 856], [269, 617], [588, 206], [615, 243], [206, 588], [615, 252], [615, 58], [615, 153], [86, 142], [615, 253], [615, 331], [290, 643], [253, 615], [615, 249], [615, 144], [615, 64], [243, 235], [243, 244], [812, 115], [412, 738], [116, 655], [326, 21], [115, 812], [812, 434], [560, 223], [82, 212], [355, 300], [355, 405], [738, 411], [141, 661], [371, 174], [28, 172], [368, 250], [183, 545], [61, 301], [607, 490], [316, 468], [405, 896], [291, 294], [169, 13], [333, 261], [361, 261], [290, 167], [422, 17], [17, 422], [301, 61], [97, 708], [97, 618], [97, 640], [97, 662], [275, 511], [429, 301], [187, 160], [94, 483], [820, 23], [892, 405], [473, 549], [483, 94], [80, 96], [206, 62], [264, 569], [62, 206], [142, 106], [3, 102], [452, 501], [452, 700], [106, 142], [452, 213], [859, 4], [397, 52], [316, 121], [128, 557], [52, 397], [613, 619], [102, 3], [250, 393], [304, 252], [690, 86], [526, 82], [643, 49], [176, 656], [49, 643], [424, 83], [178, 656], [339, 25], [339, 26], [339, 29], [339, 33], [177, 656], [269, 155], [121, 316], [155, 173], [572, 129], [812, 448], [161, 661], [661, 823], [206, 214], [320, 179], [179, 320], [367, 115], [640, 97], [448, 812], [525, 86], [859, 815], [129, 367], [296, 395], [300, 896], [647, 93], [93, 647], [166, 221], [166, 223], [685, 845], [138, 54], [713, 509], [391, 321], [381, 321], [321, 381], [263, 116], [845, 685], [249, 132], [240, 242], [174, 15], [240, 424], [540, 189], [20, 215], [413, 458], [892, 44], [892, 28], [892, 128], [892, 114], [892, 314], [892, 340], [892, 226], [896, 892], [896, 300], [896, 405], [56, 194], [433, 186], [150, 191], [340, 867], [490, 607], [121, 324], [166, 351], [610, 459], [87, 215], [809, 809], [215, 87], [37, 590], [226, 892], [295, 179], [44, 424], [518, 86], [129, 576], [129, 203], [7, 537], [269, 424], [537, 7], [444, 301], [4, 533], [194, 56], [263, 897], [60, 321], [129, 64], [86, 525], [405, 290], [587, 587], [126, 138], [536, 214], [214, 536], [86, 426], [295, 471], [638, 896], [221, 14], [892, 173], [367, 892], [367, 531], [367, 405], [442, 333], [273, 812], [166, 184], [408, 571], [851, 352], [162, 195], [379, 191], [459, 717], [238, 601], [55, 412], [546, 340], [424, 151], [498, 64], [86, 708], [86, 687], [86, 100], [38, 38], [508, 299], [195, 162], [5, 57], [318, 86], [87, 325], [164, 170], [147, 145], [337, 165], [428, 579], [719, 296], [333, 486], [301, 268], [69, 13], [145, 147], [13, 342], [268, 301], [13, 69], [321, 60], [611, 129], [166, 163], [166, 404], [486, 333], [685, 55], [685, 738], [685, 481], [149, 6], [641, 301], [409, 171], [301, 641], [412, 55], [166, 19], [166, 28], [573, 19], [507, 513], [272, 183], [397, 546], [230, 898], [898, 230], [655, 438], [6, 149], [438, 655], [63, 379], [63, 854], [412, 587], [63, 278], [63, 28], [426, 86], [9, 823], [186, 62], [28, 63], [28, 278], [28, 303], [708, 62], [489, 106], [169, 89], [93, 86], [719, 376], [513, 655], [486, 303], [486, 81], [89, 169], [486, 44], [486, 28], [486, 128], [486, 280], [486, 165], [486, 169], [486, 367], [486, 362], [458, 291], [183, 285], [183, 367], [291, 458], [892, 891], [486, 356], [486, 285], [486, 329], [486, 430], [486, 353], [486, 21], [486, 188], [486, 286], [486, 36], [486, 410], [486, 63], [486, 106], [486, 184], [486, 357], [486, 478], [486, 365], [381, 393], [409, 417], [151, 494], [242, 121], [231, 178], [107, 730], [173, 896], [166, 376], [166, 133], [417, 409], [896, 173], [738, 131], [6, 169], [166, 426], [730, 301], [281, 252], [290, 79], [157, 734], [35, 486], [242, 240], [201, 103], [6, 128], [34, 434], [494, 160], [494, 222], [115, 30], [19, 573], [113, 62], [121, 288], [179, 397], [166, 786], [166, 380], [166, 818], [166, 799], [397, 179], [818, 259], [107, 410], [470, 367], [116, 460], [3, 208], [92, 68], [259, 818], [421, 213], [249, 642], [249, 163], [249, 18], [249, 253], [64, 329], [457, 65], [252, 281], [266, 500], [180, 107], [486, 115], [166, 405], [166, 300], [252, 183], [107, 252], [252, 107], [411, 55], [411, 57], [411, 209], [411, 88], [411, 174], [411, 281], [411, 126], [103, 394], [160, 533], [183, 252], [183, 215], [290, 165], [56, 126], [126, 56], [550, 107], [256, 280], [256, 128], [326, 107], [372, 115], [573, 44], [75, 494], [473, 69], [282, 249], [493, 107], [348, 191], [546, 209], [110, 110], [506, 765], [339, 113], [209, 546], [612, 832], [20, 326], [280, 256], [20, 424], [209, 637], [209, 639], [209, 587], [137, 252], [252, 137], [107, 127], [400, 11], [218, 166], [165, 183], [127, 107], [11, 400], [494, 75], [250, 321], [81, 486], [166, 303], [859, 166], [88, 809], [347, 180], [170, 164], [166, 218], [166, 641], [641, 166], [166, 69], [86, 586], [58, 86], [86, 38], [215, 183], [168, 764], [86, 58], [103, 215], [115, 486], [285, 166], [285, 107], [282, 107], [184, 486], [443, 116], [494, 168], [82, 215], [357, 184], [91, 66], [128, 6], [765, 506], [142, 142], [506, 661], [215, 82], [486, 51], [168, 494], [91, 110], [455, 330], [89, 76], [377, 130], [295, 82], [347, 681], [708, 107], [107, 708], [63, 718], [54, 166], [62, 811], [161, 555], [161, 754], [21, 424], [719, 157], [206, 307], [166, 127], [271, 209], [147, 142], [452, 487], [252, 211], [209, 271], [256, 62], [191, 857], [2, 899], [297, 74], [338, 48], [303, 252], [86, 215], [820, 343], [204, 200], [768, 404], [74, 62], [486, 261], [486, 35], [486, 14], [21, 287], [74, 87], [546, 210], [343, 128], [343, 820], [738, 63], [244, 252], [601, 160], [166, 296], [166, 61], [353, 249], [124, 166], [362, 430], [166, 54], [340, 654], [357, 486], [223, 228], [107, 279], [63, 738], [128, 210], [65, 231], [756, 225], [612, 71], [886, 859], [30, 26], [30, 590], [30, 38], [30, 40], [30, 588], [30, 545], [474, 546], [107, 209], [30, 33], [30, 34], [30, 37], [886, 217], [886, 366], [2, 86], [110, 121], [107, 79], [100, 687], [310, 366], [107, 434], [28, 28], [420, 282], [249, 137], [299, 6], [287, 21], [546, 77], [526, 93], [58, 129], [6, 299], [812, 107], [231, 65], [244, 420], [243, 159], [243, 237], [243, 238], [243, 239], [243, 240], [243, 241], [344, 156], [846, 846], [137, 155], [64, 115], [138, 809], [342, 284], [409, 785], [409, 69], [409, 169], [135, 339], [265, 707], [178, 191], [69, 409], [427, 160], [880, 57], [45, 424], [129, 460], [295, 486], [460, 129], [269, 64], [45, 124], [306, 215], [306, 434], [420, 244], [210, 128], [446, 447], [165, 64], [165, 89], [394, 53], [446, 579], [452, 11], [184, 256], [11, 452], [160, 589], [589, 160], [306, 325], [306, 10], [306, 400], [306, 327], [551, 663], [306, 113], [306, 329], [306, 28], [306, 128], [306, 81], [306, 169], [353, 121], [663, 551], [232, 525], [10, 306], [145, 832], [483, 352], [482, 289], [160, 347], [215, 306], [160, 218], [299, 418], [145, 187], [57, 281], [352, 483], [832, 145], [80, 256], [366, 310], [422, 7], [346, 351], [896, 356], [347, 160], [167, 257], [83, 355], [373, 239], [425, 4], [83, 153], [83, 211], [83, 203], [83, 856], [188, 74], [188, 215], [83, 278], [83, 221], [83, 140], [83, 46], [83, 395], [83, 478], [83, 236], [83, 243], [417, 5], [83, 586], [83, 63], [306, 51], [306, 550], [306, 549], [306, 93], [651, 434], [83, 180], [83, 191], [181, 347], [347, 181], [552, 126], [31, 143], [204, 283], [31, 123], [31, 27], [377, 133], [481, 552], [347, 191], [376, 182], [133, 377], [446, 139], [142, 593], [107, 68], [30, 172], [114, 83], [5, 96], [444, 527], [444, 361], [444, 113], [444, 443], [444, 847], [444, 442], [444, 547], [444, 171], [61, 160], [527, 444], [105, 58], [54, 812], [417, 417], [90, 107], [812, 54], [405, 83], [9, 720], [9, 707], [720, 9], [747, 667], [747, 473], [747, 550], [747, 80], [747, 663], [747, 549], [747, 106], [747, 671], [747, 710], [191, 83], [129, 123], [115, 900], [291, 420], [546, 427], [859, 880], [263, 686], [263, 531], [4, 102], [211, 754], [211, 654], [301, 327], [290, 210], [494, 191], [295, 311], [83, 133], [48, 39], [327, 301], [31, 361], [355, 420], [88, 252], [31, 135], [327, 328], [4, 162], [123, 450], [457, 457], [187, 546], [5, 417], [86, 373], [292, 292], [412, 243], [19, 249], [210, 290], [143, 18], [303, 301], [459, 222], [160, 892], [160, 896], [204, 172], [142, 357], [450, 123], [820, 107], [151, 121], [246, 856], [6, 3], [430, 411], [896, 160], [60, 177], [146, 368], [243, 305], [243, 412], [84, 77], [252, 84], [405, 304], [394, 179], [587, 58], [179, 394], [840, 457], [351, 420], [446, 45], [450, 399], [642, 106], [18, 166], [901, 137], [58, 587], [129, 231], [5, 346], [231, 129], [355, 356], [263, 301], [453, 142], [892, 896], [5, 272], [346, 5], [405, 89], [2, 886], [184, 13], [641, 541], [235, 159], [235, 210], [235, 158], [235, 240], [235, 242], [169, 494], [462, 211], [450, 14], [654, 789], [420, 624], [14, 450], [19, 569], [376, 378], [376, 308], [376, 387], [376, 388], [376, 390], [376, 61], [376, 391], [376, 392], [376, 250], [376, 368], [376, 104], [376, 150], [16, 209], [869, 376], [812, 137], [19, 83], [324, 466], [141, 602], [569, 504], [408, 462], [63, 366], [504, 569], [892, 290], [86, 457], [726, 17], [457, 86], [366, 63], [366, 174], [172, 169], [10, 256], [106, 226], [546, 255], [720, 466], [720, 804], [169, 172], [86, 445], [195, 59], [128, 734], [59, 195], [826, 59], [129, 820], [263, 847], [2, 162], [193, 59], [802, 802], [802, 258], [6, 346], [249, 249], [832, 59], [6, 204], [93, 306], [601, 283], [286, 481], [447, 322], [152, 431], [466, 499], [466, 407], [466, 804], [466, 525], [207, 5], [209, 411], [62, 285], [13, 146], [18, 533], [147, 13], [529, 602], [285, 62], [356, 896], [123, 31], [529, 488], [13, 147], [47, 76], [14, 86], [100, 86], [171, 301], [138, 59], [347, 122], [685, 208], [174, 809], [191, 601], [81, 142], [856, 107], [298, 42], [38, 28], [26, 438], [856, 661], [450, 228], [450, 1], [303, 300], [86, 14], [286, 738], [661, 420], [257, 167], [200, 200], [426, 121], [51, 409], [286, 411], [462, 586], [5, 207], [76, 47], [810, 301], [420, 661], [674, 565], [845, 59], [434, 495], [438, 26], [533, 18], [408, 252], [494, 714], [82, 458], [612, 791], [612, 306], [531, 497], [261, 171], [160, 108], [464, 611], [82, 30], [82, 338], [82, 318], [280, 82], [30, 82], [249, 505], [269, 16], [142, 418], [142, 100], [154, 393], [418, 142], [223, 160], [107, 129], [16, 269], [107, 401], [258, 256], [6, 571], [126, 411], [126, 174], [859, 160], [896, 124], [494, 225], [409, 21], [417, 847], [172, 14], [812, 685], [172, 734], [172, 346], [346, 172], [57, 683], [756, 106], [106, 756], [206, 751], [19, 160], [366, 285], [433, 144], [251, 172], [546, 121], [160, 223], [184, 678], [172, 251], [100, 142], [179, 128], [13, 785], [902, 5], [84, 73], [84, 253], [84, 13], [84, 338], [84, 326], [84, 478], [84, 467], [84, 399], [84, 598], [84, 30], [84, 209], [84, 134], [84, 211], [84, 268], [84, 18], [84, 411], [84, 243], [84, 244], [84, 317], [84, 553], [84, 727], [84, 594], [84, 295], [211, 84], [84, 649], [84, 425], [236, 158], [84, 454], [84, 471], [84, 39], [84, 235], [171, 261], [171, 470], [73, 84], [450, 214], [52, 221], [121, 424], [142, 125], [113, 84], [142, 356], [425, 86], [221, 52], [546, 533], [546, 422], [356, 142], [754, 62], [340, 546], [62, 201], [142, 747], [288, 199], [533, 401], [197, 172], [150, 301], [199, 288], [251, 361], [462, 411], [409, 515], [353, 129], [353, 365], [30, 115], [387, 390], [387, 394], [387, 379], [387, 250], [387, 395], [387, 104], [546, 184], [856, 62], [14, 205], [306, 256], [269, 446], [859, 252], [859, 612], [252, 4], [168, 160], [754, 293], [293, 360], [748, 460], [360, 293], [366, 30], [422, 269], [434, 405], [30, 366], [411, 430], [719, 182], [498, 804], [125, 142], [494, 39], [82, 27], [394, 182], [51, 82], [166, 83], [860, 860], [61, 60], [191, 903], [31, 612], [272, 617], [160, 431], [5, 902], [14, 172], [891, 892], [411, 308], [411, 462], [6, 563], [113, 434], [305, 252], [498, 500], [409, 318], [154, 422], [146, 177], [39, 494], [426, 62], [62, 754], [290, 405], [318, 409], [371, 405], [145, 17], [83, 141], [355, 83], [48, 482], [62, 426], [62, 856], [160, 418], [51, 362], [107, 896], [373, 92], [174, 411], [308, 411], [82, 494], [209, 424], [424, 209], [426, 82], [434, 290], [434, 245], [92, 373], [405, 116], [405, 19], [405, 856], [405, 493], [405, 245], [405, 115], [405, 333], [4, 859], [87, 83], [184, 166], [708, 100], [310, 160], [193, 411], [411, 193], [847, 172], [409, 464], [64, 133], [661, 12], [12, 661], [12, 700], [464, 409], [167, 450], [518, 546], [148, 280], [184, 546], [143, 82], [93, 197], [152, 355], [249, 296], [460, 183], [480, 86], [213, 533], [61, 378], [61, 376], [61, 387], [61, 388], [61, 390], [61, 250], [61, 395], [61, 150], [59, 698], [563, 584], [431, 160], [537, 411], [883, 116], [245, 365], [434, 221], [812, 217], [424, 405], [146, 120], [347, 349], [160, 582], [300, 100], [271, 210], [411, 597], [411, 537], [210, 271], [791, 612], [533, 518], [177, 146], [556, 556], [308, 532], [321, 904], [69, 710], [710, 299], [129, 162], [461, 322], [506, 160], [552, 121], [280, 249], [14, 593], [14, 776], [14, 65], [295, 172], [18, 121], [172, 295], [883, 165], [478, 282], [13, 655], [160, 506], [271, 183], [86, 611], [86, 395], [623, 86], [700, 359], [856, 82], [400, 327], [86, 425], [160, 264], [264, 160], [405, 543], [405, 280], [405, 274], [852, 852], [115, 208], [611, 419], [852, 415], [381, 149], [457, 493], [719, 121], [719, 393], [80, 112], [424, 249], [121, 719], [424, 58], [249, 393], [415, 852], [149, 381], [568, 562], [199, 82], [82, 199], [187, 121], [562, 568], [662, 323], [145, 290], [69, 173], [285, 812], [812, 285], [494, 450], [155, 739], [895, 417], [895, 333], [422, 163], [205, 172], [738, 4], [551, 189], [513, 210], [86, 736], [437, 437], [513, 116], [332, 359], [210, 513], [342, 172], [252, 54], [35, 121], [133, 162], [515, 172], [359, 332], [359, 700], [508, 663], [290, 145], [390, 379], [856, 856], [719, 841], [582, 160], [147, 83], [173, 69], [54, 252], [393, 182], [172, 107], [129, 563], [121, 520], [121, 74], [121, 395], [563, 129], [172, 847], [89, 333], [64, 309], [856, 12], [169, 900], [388, 387], [4, 89], [0, 368], [171, 172], [309, 511], [278, 106], [262, 376], [905, 905], [905, 297], [812, 298], [812, 877], [36, 121], [89, 4], [424, 100], [494, 290], [478, 121], [235, 420], [107, 172], [841, 719], [252, 546], [150, 149], [29, 301], [105, 654], [82, 50], [82, 252], [2, 546], [526, 407], [812, 208], [149, 150], [252, 82], [661, 666], [860, 900], [434, 353], [372, 283], [387, 388], [160, 252], [145, 166], [353, 434], [124, 405], [900, 169], [568, 276], [301, 29], [2, 812], [90, 478], [108, 476], [420, 235], [232, 263], [434, 92], [434, 427], [860, 437], [45, 282], [282, 45], [232, 820], [204, 776], [409, 30], [905, 74], [905, 309], [905, 215], [905, 311], [905, 222], [905, 316], [380, 283], [405, 419], [493, 457], [132, 405], [98, 353], [4, 170], [4, 169], [27, 301], [45, 892], [59, 252], [431, 152], [60, 133], [60, 380], [60, 157], [60, 392], [60, 393], [60, 182], [60, 397], [60, 379], [60, 384], [60, 385], [60, 387], [60, 391], [60, 250], [60, 395], [60, 396], [60, 368], [609, 30], [896, 329], [896, 28], [896, 21], [896, 169], [896, 896], [845, 408], [344, 656], [437, 860], [236, 121], [405, 132], [129, 285], [129, 286], [204, 218], [3, 832], [411, 506], [832, 3], [10, 82], [550, 473], [859, 3], [83, 495], [536, 189], [169, 427], [419, 611], [89, 114], [286, 129], [86, 666], [485, 48], [666, 86], [83, 147], [114, 89], [647, 256], [116, 513], [427, 169], [513, 154], [301, 199], [666, 666], [301, 314], [446, 592], [446, 461], [446, 335], [446, 428], [446, 334], [597, 411], [779, 820], [160, 458], [160, 27], [655, 114], [308, 121], [340, 494], [19, 823], [114, 655], [160, 279], [581, 77], [205, 14], [171, 655], [171, 165], [655, 171], [4, 425], [387, 523], [387, 392], [387, 60], [553, 598], [154, 513], [906, 546], [906, 533], [321, 379], [366, 20], [814, 58], [366, 218], [420, 458], [855, 473], [107, 395], [859, 434], [281, 131], [240, 241], [494, 438], [666, 661], [31, 337], [458, 420], [419, 462], [473, 32], [160, 308], [546, 906], [434, 859], [654, 105], [186, 345], [321, 296], [513, 906], [513, 546], [154, 546], [407, 526], [393, 249], [268, 537], [504, 504], [16, 222], [438, 494], [154, 252], [252, 154], [184, 877], [58, 814], [26, 170], [252, 520], [128, 13], [355, 160], [58, 597], [170, 26], [170, 27], [246, 765], [537, 613], [434, 172], [121, 356], [137, 58], [5, 469], [5, 375], [698, 411], [20, 366], [183, 355], [355, 183], [666, 367], [342, 511], [282, 311], [40, 753], [482, 172], [144, 144], [467, 107], [164, 2], [164, 412], [847, 40], [859, 57], [60, 280], [60, 214], [57, 859], [859, 2], [820, 150], [18, 104], [376, 262], [150, 820], [549, 274], [252, 160], [107, 467], [495, 83], [171, 547], [2, 859], [173, 184], [128, 203], [170, 114], [544, 817], [115, 172], [333, 438], [523, 134], [851, 483], [134, 523], [438, 333], [483, 851], [412, 164], [458, 160], [478, 652], [2, 308], [87, 859], [817, 544], [652, 478], [271, 54], [506, 358], [294, 291], [24, 545], [371, 256], [166, 422], [812, 63], [880, 308], [63, 87], [285, 854], [121, 125], [2, 131], [214, 206], [520, 252], [411, 195], [462, 419], [211, 88], [135, 860], [358, 506], [462, 506], [860, 169], [96, 847], [847, 96], [164, 735], [282, 35], [123, 95], [812, 140], [812, 461], [812, 209], [812, 428], [812, 447], [812, 45], [95, 123], [180, 145], [121, 179], [83, 654], [191, 282], [333, 172], [160, 573], [346, 6], [282, 191], [172, 333], [498, 411], [371, 155], [55, 2], [710, 747], [57, 252], [262, 907], [191, 907], [504, 466], [252, 57], [172, 115], [362, 121], [232, 575], [172, 434], [481, 685], [898, 898], [898, 481], [87, 252], [411, 498], [121, 30], [58, 498], [26, 442], [907, 191], [375, 243], [498, 58], [685, 812], [409, 93], [590, 26], [482, 129], [303, 365], [483, 340], [129, 187], [129, 430], [129, 116], [129, 88], [129, 188], [129, 184], [88, 129], [342, 345], [430, 129], [818, 86], [215, 301], [85, 758], [859, 63], [94, 214], [140, 272], [55, 285], [494, 371], [13, 450], [89, 515], [409, 555], [89, 183], [552, 55], [212, 518], [86, 707], [395, 719], [411, 434], [121, 338], [121, 158], [121, 27], [121, 318], [81, 44], [104, 18], [823, 452], [93, 407], [546, 80], [434, 411], [177, 166], [177, 601], [95, 908], [280, 201], [160, 195], [360, 533], [201, 280], [754, 661], [907, 903], [269, 404], [470, 753], [264, 856], [142, 494], [142, 86], [160, 268], [160, 877], [76, 96], [116, 129], [107, 448], [86, 152], [221, 256], [221, 493], [221, 129], [221, 249], [44, 211], [211, 44], [64, 411], [409, 65], [165, 75], [557, 205], [268, 160], [611, 232], [301, 166], [232, 611], [209, 812], [434, 458], [162, 50], [57, 5], [735, 269], [252, 56], [434, 65], [552, 87], [87, 552], [232, 1], [210, 235], [661, 510], [47, 220], [264, 510], [327, 11], [263, 232], [510, 661], [812, 2], [548, 434], [366, 256], [488, 141], [488, 421], [488, 466], [488, 529], [488, 498], [83, 820], [12, 266], [133, 60], [266, 12], [116, 548], [340, 167], [167, 340], [52, 301], [295, 16], [295, 210], [295, 628], [183, 271], [272, 216], [116, 367], [128, 152], [121, 654], [482, 301], [563, 6], [301, 482], [229, 183], [367, 116], [301, 52], [174, 812], [252, 114], [252, 81], [252, 169], [404, 422], [252, 845], [69, 400], [409, 710], [400, 69], [80, 459], [80, 222], [411, 304], [453, 167], [100, 424], [11, 327], [39, 437], [419, 64], [490, 82], [169, 252], [562, 275], [312, 232], [526, 232], [121, 15], [183, 909], [188, 129], [204, 205], [232, 526], [89, 215], [86, 820], [36, 367], [171, 26], [820, 86], [89, 271], [344, 262], [262, 344], [333, 518], [395, 121], [128, 27], [86, 297], [28, 51], [212, 546], [160, 724], [106, 132], [51, 28], [183, 229], [3, 183], [245, 367], [367, 245], [65, 197], [65, 294], [65, 874], [65, 362], [65, 430], [65, 543], [65, 280], [65, 664], [65, 371], [65, 600], [65, 910], [65, 53], [65, 133], [65, 232], [65, 324], [65, 435], [65, 14], [65, 291], [65, 870], [65, 835], [65, 574], [65, 129], [65, 791], [252, 533], [450, 292], [82, 142], [121, 20], [413, 232], [261, 35], [74, 121], [533, 252], [845, 89], [461, 273], [285, 379], [166, 82], [581, 204], [409, 474], [494, 215], [474, 409], [292, 450], [302, 123], [37, 112], [533, 249], [546, 212], [63, 859], [283, 51], [283, 356], [283, 263], [283, 318], [453, 453], [211, 473], [321, 156], [302, 252], [123, 302], [82, 158], [545, 23], [114, 51], [114, 356], [114, 820], [395, 82], [114, 30], [114, 234], [114, 158], [234, 82], [137, 210], [137, 371], [187, 129], [82, 116], [458, 82], [525, 141], [263, 283], [141, 525], [81, 215], [81, 911], [81, 188], [81, 222], [81, 467], [121, 255], [121, 253], [777, 173], [371, 137], [47, 251], [251, 47], [409, 800], [515, 275], [121, 263], [512, 160], [569, 558], [232, 113], [121, 51], [232, 115], [318, 121], [451, 558], [366, 859], [674, 558], [318, 115], [115, 318], [241, 240], [896, 107], [823, 558], [13, 840], [107, 142], [115, 232], [160, 512], [856, 558], [129, 105], [113, 367], [546, 17], [368, 392], [840, 65], [851, 907], [907, 851], [189, 911], [189, 188], [189, 222], [189, 81], [189, 189], [189, 467], [859, 601], [504, 699], [504, 499], [504, 500], [504, 501], [504, 502], [504, 407], [504, 525], [504, 506], [727, 83], [672, 506], [379, 182], [103, 741], [222, 911], [222, 81], [222, 189], [172, 166], [483, 172], [456, 405], [257, 526], [368, 160], [828, 892], [828, 896], [270, 278], [28, 115], [324, 558], [12, 183], [531, 62], [544, 107], [177, 232], [176, 232], [232, 177], [232, 176], [541, 140], [541, 139], [541, 15], [541, 209], [209, 541], [318, 283], [377, 748], [288, 371], [288, 296], [748, 377], [282, 420], [215, 331], [371, 288], [21, 409], [156, 232], [232, 156], [252, 55], [252, 159], [252, 685], [252, 285], [252, 625], [252, 237], [252, 209], [252, 854], [252, 273], [252, 210], [252, 234], [252, 272], [252, 252], [252, 404], [252, 238], [252, 286], [252, 880], [252, 411], [252, 481], [252, 271], [252, 241], [252, 46], [252, 174], [252, 244], [252, 235], [252, 243], [183, 12], [336, 336], [107, 429], [908, 908], [809, 5], [127, 377], [5, 809], [429, 107], [377, 127], [840, 526], [314, 495], [373, 58], [291, 256], [167, 575], [531, 77], [400, 325], [400, 10], [443, 261], [726, 726], [210, 137], [275, 232], [526, 840], [526, 257], [23, 229], [129, 65], [184, 86], [494, 234], [841, 869], [209, 140], [209, 139], [209, 15], [209, 131], [209, 126], [261, 75], [536, 546], [86, 154], [860, 330], [4, 54], [4, 625], [4, 56], [4, 552], [4, 126], [201, 232], [232, 201], [26, 34], [26, 588], [51, 124], [61, 95], [178, 232], [128, 494], [25, 133], [160, 282], [417, 136], [166, 81], [803, 59], [160, 287], [287, 160], [95, 61], [803, 4], [520, 160], [417, 434], [512, 162], [142, 300], [95, 232], [481, 412], [371, 3], [474, 493], [651, 651], [300, 142], [231, 426], [231, 351], [231, 278], [121, 116], [434, 3], [193, 63], [896, 81], [141, 407], [896, 355], [562, 232], [232, 562], [412, 481], [249, 407], [155, 221], [776, 572], [776, 749], [169, 460], [473, 536], [303, 256], [303, 412], [294, 232], [437, 436], [408, 832], [851, 342], [408, 215], [63, 193], [82, 31], [823, 823], [765, 504], [23, 82], [23, 172], [434, 258], [511, 682], [309, 268], [393, 301], [301, 393], [492, 83], [541, 764], [3, 256], [3, 434], [118, 549], [232, 226], [363, 664], [193, 160], [896, 142], [13, 423], [359, 504], [536, 473], [118, 495], [413, 177], [413, 168], [413, 526], [413, 840], [413, 426], [413, 714], [413, 562], [413, 65], [909, 183], [21, 146], [611, 183], [412, 303], [412, 256], [146, 21], [31, 115], [549, 118], [562, 413], [161, 264], [115, 31], [259, 536], [316, 231], [160, 859], [438, 74], [547, 263], [912, 466], [226, 232], [513, 74], [169, 80], [117, 106], [114, 21], [114, 80], [28, 80], [329, 340], [169, 29], [29, 169], [499, 913], [466, 912], [120, 232], [80, 340], [80, 28], [80, 114], [80, 169], [80, 367], [909, 129], [168, 413], [551, 86], [36, 169], [232, 120], [409, 207], [573, 9], [912, 504], [303, 909], [142, 896], [480, 480], [756, 613], [44, 9], [840, 232], [146, 17], [263, 303], [373, 197], [32, 24], [903, 907], [89, 423], [473, 298], [285, 252], [395, 250], [483, 342], [298, 473], [393, 160], [146, 183], [17, 146], [74, 438], [426, 232], [150, 295], [262, 903], [241, 241], [80, 490], [44, 11], [890, 890], [290, 128], [419, 133], [832, 408], [198, 168], [129, 909], [168, 198], [36, 25], [411, 183], [121, 152], [490, 80], [495, 118], [549, 460], [562, 840], [498, 720], [597, 118], [121, 154], [121, 118], [121, 166], [121, 693], [121, 301], [121, 752], [121, 144], [121, 615], [121, 300], [121, 492], [121, 87], [121, 363], [121, 513], [121, 373], [121, 594], [121, 13], [121, 254], [209, 518], [665, 55], [572, 434], [55, 665], [177, 94], [409, 504], [908, 206], [94, 177], [720, 498], [94, 120], [154, 209], [209, 154], [350, 191], [121, 651], [232, 5], [820, 908], [366, 290], [674, 754], [116, 914], [157, 278], [145, 180], [106, 259], [145, 333], [326, 64], [161, 265], [145, 299], [84, 174], [908, 820], [13, 93], [282, 597], [180, 128], [908, 201], [379, 5], [390, 394], [394, 390], [128, 343], [168, 128], [332, 523], [120, 94], [707, 765], [537, 537], [671, 69], [440, 608], [38, 915], [377, 182], [377, 907], [377, 872], [89, 845], [608, 440], [183, 411], [86, 553], [237, 5], [685, 3], [504, 421], [3, 685], [269, 644], [644, 269], [459, 80], [7, 754], [438, 437], [438, 136], [438, 135], [812, 87], [206, 908], [301, 184], [290, 283], [280, 303], [280, 81], [31, 82], [430, 128], [474, 13], [880, 80], [128, 430], [5, 481], [375, 16], [121, 79], [283, 290], [5, 237], [562, 177], [562, 425], [562, 714], [414, 916], [368, 275], [548, 381], [368, 181], [21, 189], [765, 430], [64, 325], [106, 80], [820, 917], [917, 196], [917, 51], [917, 197], [917, 908], [917, 199], [917, 200], [917, 128], [917, 167], [917, 201], [917, 918], [917, 593], [917, 204], [917, 776], [917, 205], [917, 206], [917, 41], [917, 94], [917, 820], [917, 95], [917, 207], [94, 917], [908, 917], [908, 124], [13, 361], [206, 917], [206, 918], [918, 908], [918, 200], [918, 917], [918, 593], [918, 204], [918, 776], [918, 94], [918, 51], [918, 197], [918, 199], [918, 128], [918, 167], [918, 201], [918, 206], [918, 820], [918, 95], [918, 207], [376, 395], [420, 191], [283, 329], [118, 597], [820, 179], [271, 552], [381, 548], [312, 301], [81, 569], [738, 586], [375, 154], [106, 68], [820, 918], [301, 312], [585, 706], [272, 6], [31, 51], [303, 807], [258, 282], [282, 258], [0, 266], [252, 859], [841, 312], [86, 485], [423, 13], [197, 908], [172, 231], [86, 681], [908, 197], [128, 917], [122, 150], [485, 86], [150, 122], [6, 272], [238, 89], [918, 918], [235, 243], [312, 841], [165, 82], [6, 389], [23, 820], [165, 900], [908, 200], [91, 477], [51, 95], [389, 611], [209, 252], [380, 656], [611, 389], [344, 200], [809, 107], [847, 114], [85, 317], [582, 473], [582, 549], [582, 184], [582, 508], [582, 671], [582, 667], [290, 546], [200, 344], [303, 280], [95, 129], [300, 81], [389, 521], [389, 585], [389, 292], [389, 317], [389, 341], [546, 290], [372, 121], [295, 521], [295, 585], [295, 292], [295, 317], [295, 341], [908, 918], [95, 183], [184, 582], [7, 529], [211, 15], [357, 301], [183, 95], [89, 919], [859, 832], [172, 23], [45, 162], [832, 859], [55, 685], [11, 44], [107, 183], [209, 137], [209, 285], [209, 371], [209, 88], [209, 286], [179, 820], [120, 101], [408, 89], [107, 809], [529, 7], [367, 23], [674, 661], [119, 333], [252, 571], [41, 908], [41, 917], [41, 918], [362, 483], [129, 208], [434, 203], [495, 739], [280, 21], [314, 165], [568, 81], [127, 227], [184, 127], [300, 269], [256, 405], [95, 203], [95, 776], [47, 135], [265, 661], [75, 36], [681, 5], [671, 582], [69, 353], [920, 230], [776, 14], [460, 211], [121, 131], [81, 490], [81, 478], [87, 856], [363, 508], [363, 422], [86, 274], [363, 577], [101, 419], [419, 101], [234, 494], [63, 921], [290, 301], [707, 661], [206, 426], [851, 377], [222, 0], [0, 222], [411, 646], [411, 208], [411, 604], [411, 683], [4, 96], [11, 106], [388, 280], [106, 11], [121, 494], [121, 86], [847, 919], [237, 107], [409, 420], [232, 206], [859, 87], [418, 509], [342, 228], [481, 83], [86, 121], [786, 189], [543, 280], [451, 161], [451, 7], [908, 94], [94, 908], [422, 474], [149, 656], [546, 493], [859, 303], [921, 859], [422, 180], [321, 182], [27, 438], [438, 27], [376, 632], [498, 51], [378, 157], [422, 21], [422, 23], [422, 427], [422, 115], [141, 533], [754, 674], [754, 569], [83, 481], [103, 389], [464, 128], [464, 183], [464, 820], [51, 498], [809, 13], [282, 464], [389, 103], [845, 809], [282, 210], [485, 318], [5, 11], [408, 826], [209, 601], [826, 408], [81, 28], [859, 183], [183, 859], [211, 460], [120, 377], [461, 812], [859, 845], [859, 271], [47, 38], [459, 1], [38, 47], [172, 228], [321, 560], [494, 261], [395, 86], [13, 588], [461, 592], [13, 304], [115, 644], [438, 436], [859, 286], [859, 211], [96, 4], [908, 207], [908, 95], [908, 199], [251, 914], [64, 914], [177, 221], [141, 5], [59, 285], [221, 177], [845, 859], [64, 733], [64, 572], [177, 74], [249, 203], [28, 44], [913, 922], [644, 115], [450, 232], [640, 100], [923, 923], [89, 305], [236, 5], [252, 924], [5, 236], [13, 809], [872, 232], [168, 611], [89, 925], [371, 87], [87, 290], [330, 438], [856, 546], [611, 168], [232, 872], [115, 914], [256, 51], [256, 356], [256, 263], [256, 30], [256, 210], [256, 234], [256, 318], [256, 165], [256, 115], [256, 338], [256, 169], [256, 820], [342, 483], [28, 81], [776, 908], [275, 368], [847, 925], [275, 226], [925, 847], [925, 925], [158, 121], [30, 263], [31, 282], [438, 330], [275, 176], [275, 123], [275, 789], [275, 177], [275, 200], [275, 526], [275, 840], [275, 426], [275, 479], [275, 65], [226, 275], [301, 290], [426, 206], [326, 923], [486, 29], [723, 923], [29, 486], [187, 283], [95, 918], [254, 859], [859, 254], [160, 454], [269, 322], [118, 116], [404, 354], [303, 87], [926, 926], [83, 253], [926, 927], [211, 412], [211, 859], [927, 926], [283, 187], [927, 927], [211, 928], [116, 118], [118, 279], [21, 551], [86, 526], [187, 256], [180, 851], [180, 907], [9, 661], [551, 21], [160, 117], [454, 160], [562, 533], [164, 929], [738, 6], [930, 931], [930, 930], [931, 931], [931, 930], [117, 160], [930, 238], [548, 283], [79, 601], [283, 548], [927, 159], [927, 237], [927, 210], [927, 234], [927, 158], [927, 242], [283, 932], [931, 158], [332, 720], [238, 930], [169, 914], [6, 738], [326, 326], [183, 35], [114, 892], [114, 300], [114, 173], [114, 896], [81, 544], [69, 777], [279, 118], [333, 925], [58, 664], [297, 177], [303, 544], [929, 929], [591, 83], [123, 275], [300, 68], [158, 931], [86, 180], [661, 13], [13, 661], [36, 183], [127, 533], [508, 325], [508, 260], [508, 10], [508, 259], [508, 710], [424, 340], [10, 508], [823, 19], [929, 140], [11, 518], [140, 929], [518, 58], [481, 3], [162, 412], [66, 112], [160, 406], [931, 159], [438, 892], [117, 117], [68, 300], [159, 931], [832, 252], [716, 5], [377, 120], [408, 625], [408, 880], [2, 56], [408, 192], [408, 587], [412, 162], [326, 13], [381, 380], [381, 515], [381, 391], [259, 508], [768, 125], [89, 408], [165, 914], [81, 607], [329, 303], [329, 671], [87, 812], [83, 259], [411, 460], [18, 424], [18, 232], [573, 358], [232, 18], [892, 438], [823, 358], [577, 363], [79, 13], [765, 720], [700, 358], [765, 358], [100, 434], [434, 100], [291, 543], [184, 5], [526, 275], [484, 484], [173, 549], [440, 6], [5, 716], [166, 222], [5, 184], [210, 142], [429, 933], [427, 162], [929, 164], [79, 166], [281, 16], [281, 424], [145, 239], [933, 89], [320, 368], [89, 933], [929, 334], [334, 929], [513, 303], [16, 281], [158, 927], [158, 930], [337, 367], [823, 707], [823, 12], [823, 700], [494, 588], [588, 494], [12, 823], [523, 64], [700, 823], [549, 459], [549, 309], [549, 248], [549, 268], [549, 316], [62, 859], [504, 359], [461, 216], [518, 533], [549, 934], [48, 165], [164, 64], [280, 388], [21, 777], [856, 142], [147, 422], [11, 128], [810, 244], [859, 62], [445, 64], [56, 2], [82, 281], [23, 422], [707, 823], [14, 918], [14, 797], [281, 82], [105, 509], [128, 11], [244, 810], [437, 26], [424, 304], [143, 482], [127, 36], [63, 271], [281, 107], [281, 62], [64, 611], [304, 16], [62, 281], [493, 422], [170, 419], [252, 832], [518, 513], [329, 128], [422, 493], [671, 329], [368, 301], [301, 368], [110, 474], [305, 210], [128, 377], [271, 63], [280, 333], [232, 178], [812, 252], [183, 326], [753, 816], [269, 933], [269, 929], [816, 753], [210, 305], [483, 113], [483, 128], [483, 255], [483, 280], [483, 165], [483, 226], [674, 674], [69, 105], [440, 840], [96, 924], [273, 579], [412, 921], [142, 280], [529, 44], [548, 152], [548, 62], [286, 412], [840, 440], [719, 64], [768, 935], [16, 304], [338, 35], [59, 286], [407, 141], [210, 183], [87, 304], [930, 158], [4, 183], [143, 714], [265, 823], [294, 290], [226, 483], [8, 823], [533, 562], [666, 823], [107, 285], [183, 4], [210, 82], [368, 146], [823, 8], [823, 566], [35, 338], [100, 820], [674, 823], [563, 494], [612, 217], [568, 425], [179, 339], [13, 191], [269, 447], [582, 582], [820, 100], [137, 272], [412, 286], [13, 375], [13, 172], [931, 926], [931, 927], [47, 26], [464, 337], [85, 307], [464, 116], [16, 311], [464, 338], [933, 933], [823, 265], [482, 143], [21, 355], [26, 47], [16, 115], [40, 725], [777, 419], [419, 777], [394, 381], [165, 48], [381, 394], [290, 294], [324, 720], [470, 455], [304, 87], [120, 758], [440, 265], [434, 548], [5, 24], [377, 851], [5, 611], [32, 40], [5, 572], [179, 295], [272, 137], [89, 10], [856, 355], [404, 83], [101, 96], [115, 355], [301, 170], [464, 900], [464, 847], [465, 615], [259, 83], [936, 572], [572, 936], [847, 464], [924, 303], [125, 937], [311, 218], [494, 58], [494, 281], [48, 166], [150, 378], [321, 579], [321, 592], [321, 38], [82, 152], [353, 592], [353, 935], [307, 872], [377, 147], [353, 768], [138, 252], [429, 929], [252, 138], [305, 604], [405, 480], [405, 255], [4, 138], [281, 494], [484, 694], [184, 405], [913, 358], [679, 137], [80, 880], [303, 128], [303, 362], [303, 81], [303, 106], [96, 842], [38, 579], [38, 592], [38, 321], [930, 234], [14, 440], [14, 562], [131, 249], [754, 211], [562, 14], [592, 321], [592, 38], [135, 23], [506, 288], [316, 187], [353, 937], [58, 845], [280, 523], [418, 467], [249, 131], [690, 301], [455, 89], [252, 738], [323, 708], [167, 918], [537, 227], [187, 316], [220, 165], [183, 900], [211, 183], [696, 222], [753, 75], [366, 134], [205, 93], [265, 555], [137, 877], [137, 663], [137, 679], [924, 96], [86, 304], [918, 377], [304, 86], [201, 908], [226, 228], [51, 375], [51, 112], [661, 8], [13, 15], [935, 125], [303, 924], [378, 150], [661, 265], [883, 115], [611, 938], [938, 611], [542, 291], [23, 135], [57, 240], [56, 408], [240, 57], [226, 186], [226, 518], [65, 64], [93, 205], [518, 226], [921, 845], [914, 914], [138, 4], [14, 556], [531, 82], [907, 262], [908, 822], [133, 106], [400, 92], [914, 860], [939, 232], [82, 464], [307, 301], [8, 661], [800, 615], [13, 51], [546, 30], [546, 526], [546, 367], [128, 940], [92, 400], [30, 546], [163, 377], [158, 926], [85, 313], [160, 717], [199, 280], [184, 64], [896, 4], [549, 19], [82, 748], [280, 199], [253, 107], [377, 163], [19, 549], [549, 326], [160, 471], [82, 854], [15, 82], [232, 939], [160, 413], [82, 131], [309, 248], [309, 18], [309, 226], [309, 73], [753, 900], [748, 16], [748, 256], [748, 106], [14, 922], [82, 96], [471, 160], [615, 800], [343, 160], [4, 896], [450, 291], [85, 872], [768, 97], [79, 107], [86, 23], [197, 215], [860, 914], [215, 197], [290, 130], [252, 193], [19, 421], [19, 434], [234, 930], [180, 615], [18, 310], [390, 459], [589, 271], [310, 85], [183, 211], [234, 926], [405, 126], [163, 518], [941, 189], [181, 231], [181, 95], [231, 181], [907, 907], [156, 907], [907, 156], [435, 920], [305, 208], [610, 610], [236, 930], [214, 124], [147, 154], [137, 412], [877, 137], [304, 424], [543, 405], [543, 105], [163, 107], [281, 481], [377, 918], [377, 776], [13, 552], [942, 95], [303, 356], [253, 87], [13, 748], [209, 909], [943, 295], [7, 222], [489, 434], [234, 283], [291, 542], [104, 295], [678, 274], [435, 316], [305, 494], [936, 290], [467, 459], [209, 249], [314, 507], [377, 215], [674, 141], [557, 917], [690, 366], [291, 493], [231, 347], [13, 183], [377, 344], [60, 105], [560, 321], [81, 3], [81, 412], [230, 420], [13, 40], [210, 927], [57, 193], [181, 176], [345, 152], [314, 872], [314, 307], [526, 231], [783, 154], [278, 908], [907, 180], [180, 820], [231, 466], [303, 411], [180, 381], [380, 103], [589, 400], [355, 654], [560, 913], [944, 748], [690, 107], [551, 473], [551, 679], [551, 671], [748, 173], [886, 665], [886, 812], [210, 106], [783, 420], [730, 64], [872, 377], [327, 945], [255, 545], [57, 304], [57, 88], [57, 924], [57, 302], [153, 654], [638, 126], [641, 1], [641, 106], [321, 533], [61, 19], [61, 280], [153, 105], [455, 860], [180, 17], [13, 346], [13, 351], [551, 184], [748, 182], [210, 114], [924, 89], [206, 65], [268, 309], [268, 73], [206, 107], [231, 176], [234, 5], [181, 160], [103, 162], [123, 900], [352, 851], [234, 931], [21, 296], [209, 845], [209, 924], [708, 98], [191, 142], [277, 206], [690, 20], [174, 252], [206, 277], [187, 105], [708, 99], [21, 210], [543, 399], [921, 285], [310, 107], [924, 209], [234, 86], [690, 400], [215, 460], [226, 166], [662, 618], [641, 946], [368, 376], [303, 244], [924, 612], [237, 932], [490, 295], [126, 2], [133, 208], [352, 346], [234, 256], [924, 252], [60, 947], [445, 133], [181, 947], [304, 455], [220, 220], [173, 531], [173, 126], [536, 166], [305, 483], [235, 930], [193, 3], [123, 170], [21, 166], [381, 948], [321, 947], [851, 180], [726, 160], [314, 420], [150, 215], [215, 150], [453, 654], [381, 180], [281, 949], [410, 286], [286, 410], [128, 295], [388, 283], [236, 107], [137, 88], [13, 114], [453, 283], [351, 5], [13, 484], [21, 115], [113, 419], [537, 157], [537, 397], [929, 489], [822, 464], [822, 280], [822, 53], [553, 86], [483, 167], [312, 177], [900, 900], [372, 87], [169, 375], [453, 459], [550, 105], [598, 86], [756, 268], [644, 950], [492, 165], [484, 168], [204, 167], [949, 211], [498, 573], [333, 422], [142, 263], [450, 105], [326, 10], [105, 550], [105, 450], [753, 170], [213, 951], [951, 213], [200, 908], [165, 492], [404, 937], [404, 173], [69, 952], [914, 36], [4, 6], [10, 326], [283, 453], [106, 641], [914, 28], [28, 914], [258, 165], [258, 27], [258, 417], [114, 375], [417, 258], [99, 937], [99, 640], [99, 768], [99, 173], [926, 237], [500, 466], [161, 452], [17, 473], [375, 21], [375, 28], [375, 114], [375, 340], [375, 169], [375, 367], [473, 17], [113, 914], [424, 950], [777, 200], [173, 86], [38, 165], [38, 329], [38, 421], [38, 474], [38, 258], [108, 93], [74, 950], [929, 933], [65, 776], [88, 137], [88, 210], [411, 166], [87, 243], [200, 777], [210, 88], [488, 922], [926, 243], [926, 930], [930, 926], [107, 478], [615, 714], [86, 840], [453, 546], [114, 925], [615, 422], [925, 205], [929, 335], [422, 533], [422, 546], [422, 145], [754, 950], [459, 218], [5, 154], [573, 452], [299, 710], [950, 74], [142, 129], [84, 558], [84, 487], [661, 87], [67, 533], [282, 820], [953, 28], [218, 341], [249, 154], [249, 654], [249, 954], [845, 921], [252, 333], [107, 139], [139, 107], [215, 218], [150, 179], [307, 177], [307, 696], [900, 438], [269, 107], [710, 184], [260, 93], [184, 710], [232, 397], [411, 303], [593, 955], [572, 515], [952, 69], [17, 219], [333, 252], [389, 628], [366, 83], [311, 424], [592, 353], [152, 440], [956, 183], [93, 260], [93, 108], [354, 323], [209, 107], [354, 97], [178, 381], [333, 919], [440, 152], [160, 501], [443, 919], [501, 160], [498, 205], [200, 918], [488, 362], [518, 424], [820, 544], [183, 956], [489, 105], [430, 501], [303, 405], [900, 860], [551, 69], [474, 950], [880, 56], [492, 105], [155, 150], [218, 366], [155, 181], [950, 474], [139, 335], [544, 820], [94, 955], [105, 492], [809, 301], [301, 809], [700, 957], [160, 255], [255, 424], [256, 474], [100, 937], [333, 165], [205, 908], [114, 35], [3, 193], [592, 100], [377, 656], [6, 880], [544, 105], [297, 905], [333, 950], [212, 74], [344, 377], [303, 950], [94, 918], [58, 950], [165, 79], [24, 114], [24, 169], [69, 107], [420, 105], [765, 86], [518, 954], [166, 950], [110, 91], [340, 934], [366, 950], [338, 900], [338, 860], [338, 338], [338, 914], [427, 165], [615, 954], [849, 849], [93, 165], [550, 288], [17, 950], [107, 237], [145, 950], [333, 5], [481, 107], [474, 105], [86, 765], [142, 45], [355, 105], [107, 481], [249, 765], [859, 105], [419, 63], [880, 59], [880, 921], [28, 105], [158, 950], [69, 958], [953, 816], [107, 319], [226, 105], [280, 419], [651, 950], [508, 473], [508, 418], [921, 56], [371, 419], [44, 754], [285, 105], [5, 333], [820, 955], [105, 355], [107, 236], [533, 572], [533, 663], [533, 499], [533, 61], [533, 602], [533, 406], [533, 204], [533, 590], [533, 350], [533, 483], [533, 679], [533, 171], [533, 525], [533, 320], [445, 77], [105, 285], [105, 226], [105, 859], [105, 420], [105, 544], [375, 318], [105, 129], [340, 375], [345, 262], [377, 52], [377, 959], [377, 316], [377, 960], [377, 745], [377, 403], [377, 961], [377, 486], [377, 839], [377, 562], [377, 207], [377, 65], [377, 257], [169, 35], [183, 207], [183, 201], [183, 53], [841, 368], [419, 642], [107, 69], [419, 18], [419, 255], [340, 105], [342, 107], [63, 283], [52, 377], [114, 24], [114, 261], [283, 63], [283, 129], [303, 105], [3, 323], [21, 375], [368, 841], [614, 614], [742, 614], [367, 375], [872, 17], [495, 473], [55, 193], [45, 142], [81, 419], [533, 950], [323, 3], [651, 173], [338, 121], [493, 523], [756, 614], [448, 847], [448, 484], [494, 121], [254, 820], [129, 86], [86, 129], [917, 40], [151, 427], [145, 366], [242, 5], [40, 917], [840, 86], [418, 549], [707, 856], [266, 533], [169, 24], [506, 366], [453, 105], [173, 651], [255, 105], [473, 166], [445, 86], [13, 255], [105, 453], [232, 121], [169, 261], [199, 278], [105, 255], [720, 525], [0, 283], [422, 820], [280, 86], [128, 445], [469, 477], [563, 822], [445, 128], [949, 281], [949, 552], [913, 183], [445, 531], [96, 13], [283, 0], [105, 169], [329, 83], [838, 124], [163, 154], [163, 422], [163, 86], [163, 615], [163, 533], [163, 145], [163, 373], [163, 643], [163, 654], [5, 242], [293, 525], [368, 150], [145, 163], [138, 412], [765, 525], [355, 333], [577, 333], [279, 333], [169, 333], [74, 105], [355, 513], [925, 113], [516, 333], [367, 24], [367, 80], [367, 318], [183, 913], [419, 333], [471, 333], [35, 114], [333, 419], [333, 895], [13, 96], [641, 333], [131, 283], [333, 641], [333, 471], [333, 516], [333, 517], [333, 279], [333, 577], [170, 495], [333, 355], [145, 283], [958, 69], [18, 419], [642, 419], [473, 150], [249, 161], [38, 31], [38, 29], [38, 33], [38, 590], [38, 37], [38, 39], [627, 333], [373, 134], [305, 131], [64, 926], [133, 333], [710, 508], [255, 419], [411, 63], [283, 131], [822, 86], [333, 627], [105, 199], [573, 498], [481, 949], [281, 333], [962, 958], [931, 238], [77, 105], [490, 419], [169, 548], [237, 253], [333, 281], [404, 424], [9, 674], [4, 812], [300, 101], [546, 546], [424, 404], [896, 116], [90, 477], [19, 360], [558, 529], [371, 768], [54, 949], [949, 305], [325, 962], [933, 139], [933, 429], [933, 46], [165, 494], [950, 158], [120, 333], [230, 333], [495, 748], [776, 918], [253, 237], [533, 186], [305, 949], [652, 333], [2, 333], [193, 55], [333, 230], [93, 40], [73, 950], [199, 917], [199, 918], [174, 305], [428, 592], [700, 956], [70, 431], [956, 933], [291, 129], [459, 295], [494, 165], [963, 159], [107, 932], [238, 237], [387, 182], [581, 200], [188, 21], [200, 581], [913, 950], [173, 404], [209, 963], [736, 333], [333, 736], [963, 926], [963, 209], [747, 162], [747, 166], [747, 301], [747, 494], [747, 366], [747, 612], [747, 105], [747, 615], [747, 160], [747, 142], [747, 249], [237, 927], [68, 282], [282, 68], [69, 715], [23, 953], [23, 964], [926, 963], [243, 63], [180, 601], [395, 368], [951, 525], [249, 747], [437, 482], [932, 283], [236, 963], [285, 209], [377, 278], [417, 367], [832, 57], [40, 318], [118, 409], [387, 381], [387, 118], [387, 667], [387, 384], [387, 283], [387, 42], [387, 366], [387, 849], [387, 41], [387, 115], [387, 150], [108, 155], [811, 497], [811, 77], [447, 334], [437, 338], [592, 933], [284, 642], [118, 387], [284, 255], [167, 426], [546, 812], [44, 366], [309, 615], [546, 208], [243, 963], [243, 615], [169, 753], [568, 457], [55, 3], [521, 615], [936, 822], [936, 935], [936, 593], [936, 776], [936, 350], [936, 907], [936, 955], [936, 706], [936, 965], [936, 130], [936, 168], [936, 167], [936, 232], [936, 484], [936, 204], [936, 14], [936, 284], [936, 206], [936, 231], [936, 129], [21, 896], [939, 350], [146, 85], [963, 243], [124, 892], [124, 300], [124, 173], [124, 896], [833, 365], [173, 950], [931, 963], [963, 931], [433, 431], [13, 445], [445, 13], [404, 15], [15, 404], [165, 753], [155, 108], [900, 914], [282, 856], [129, 221], [333, 153], [333, 253], [776, 936], [930, 236], [930, 243], [820, 445], [406, 406], [963, 142], [142, 963], [168, 533], [197, 601], [949, 6], [498, 710], [378, 283], [955, 128], [926, 159], [926, 234], [926, 158], [926, 242], [87, 253], [710, 498], [5, 511], [5, 420], [295, 106], [116, 455], [141, 672], [153, 333], [153, 249], [153, 50], [153, 856], [153, 23], [153, 393], [153, 404], [153, 493], [153, 83], [153, 58], [153, 427], [153, 474], [153, 180], [153, 49], [153, 424], [153, 115], [153, 173], [153, 820], [153, 859], [123, 165], [438, 900], [525, 951], [615, 521], [615, 309], [615, 963], [856, 950], [21, 211], [422, 393], [393, 950], [420, 5], [211, 21], [947, 60], [142, 105], [511, 5], [106, 295], [678, 48], [409, 945], [48, 678], [142, 145], [266, 950], [296, 103], [282, 356], [282, 268], [963, 58], [589, 105], [86, 747], [265, 957], [206, 86], [83, 615], [957, 951], [957, 700], [445, 79], [951, 957], [105, 589], [31, 254], [951, 951], [211, 13], [21, 966], [945, 327], [963, 158], [199, 908], [963, 236], [212, 162], [212, 166], [212, 494], [212, 431], [212, 422], [212, 86], [212, 434], [212, 142], [511, 342], [86, 212], [422, 212], [86, 163], [86, 87], [86, 145], [86, 153], [86, 546], [255, 83], [44, 956], [44, 951], [44, 359], [44, 213], [44, 246], [44, 765], [44, 967], [44, 525], [44, 672], [44, 649], [44, 913], [153, 86], [86, 572], [164, 137], [145, 86], [20, 282], [710, 710], [137, 164], [445, 820], [166, 212], [950, 913], [950, 58], [506, 107], [950, 856], [154, 493], [856, 913], [952, 952], [153, 166], [153, 494], [153, 82], [55, 86], [83, 255], [694, 255], [596, 301], [362, 5], [102, 5], [481, 5], [260, 173], [301, 596], [612, 152], [301, 747], [533, 67], [963, 237], [86, 598], [86, 521], [86, 42], [933, 269], [290, 166], [166, 290], [131, 949], [118, 651], [184, 311], [222, 315], [612, 272], [87, 208], [132, 87], [131, 612], [173, 612], [12, 420], [87, 132], [237, 963], [356, 282], [37, 338], [856, 612], [193, 57], [132, 301], [283, 255], [87, 954], [443, 33], [443, 427], [311, 184], [107, 856], [207, 183], [913, 856], [4, 131], [859, 89], [366, 311], [42, 42], [51, 917], [162, 747], [419, 113], [856, 212], [28, 953], [107, 859], [367, 113], [367, 417], [859, 107], [493, 283], [596, 218], [58, 155], [58, 601], [137, 298], [509, 189], [473, 256], [525, 765], [525, 967], [525, 913], [86, 206], [957, 19], [494, 212], [856, 58], [42, 58], [133, 581], [923, 825], [42, 612], [409, 776], [176, 231], [176, 413], [176, 200], [176, 204], [176, 275], [176, 93], [473, 44], [473, 28], [390, 381], [390, 376], [390, 157], [390, 61], [390, 392], [390, 393], [390, 397], [390, 320], [390, 378], [390, 384], [390, 283], [390, 387], [390, 388], [390, 250], [390, 396], [390, 368], [390, 104], [390, 321], [390, 60], [390, 150], [301, 132], [366, 234], [283, 493], [880, 6], [184, 968], [880, 281], [494, 27], [723, 825], [311, 225], [320, 333], [333, 320], [128, 121], [27, 494], [473, 106], [405, 142], [243, 950], [10, 121], [914, 116], [284, 472], [470, 914], [255, 284], [730, 468], [859, 131], [86, 55], [13, 390], [107, 70], [232, 292], [232, 457], [210, 963], [933, 15], [281, 880], [86, 79], [184, 969], [963, 86], [65, 206], [581, 21], [86, 210], [86, 963], [809, 949], [949, 809], [499, 499], [21, 581], [58, 921], [318, 615], [615, 318], [242, 303], [291, 232], [33, 443], [232, 291], [820, 970], [970, 820], [420, 464], [74, 152], [152, 74], [823, 856], [298, 137], [856, 823], [142, 160], [499, 649], [6, 949], [282, 411], [459, 223], [282, 218], [563, 373], [249, 615], [470, 655], [859, 281], [859, 243], [859, 921], [303, 242], [243, 859], [281, 859], [395, 376], [12, 362], [405, 105], [366, 856], [107, 954], [425, 256], [473, 113], [473, 495], [473, 371], [473, 114], [473, 14], [494, 372], [105, 405], [252, 812], [113, 473], [373, 812], [55, 950], [240, 159], [152, 612], [393, 107], [949, 511], [971, 4], [971, 804], [971, 457], [971, 361], [971, 188], [509, 952], [971, 470], [971, 406], [971, 514], [963, 930], [963, 235], [963, 244], [971, 232], [971, 284], [971, 488], [971, 391], [971, 336], [971, 582], [971, 179], [971, 321], [971, 466], [845, 252], [952, 509], [114, 473], [187, 155], [922, 129], [452, 649], [957, 707], [427, 443], [954, 87], [218, 696], [86, 531], [13, 350], [963, 238], [963, 241], [33, 615], [733, 923], [238, 963], [420, 314], [951, 359], [951, 913], [515, 290], [511, 949], [655, 261], [655, 470], [213, 957], [812, 373], [509, 972], [371, 105], [481, 950], [971, 412], [261, 494], [442, 48], [151, 86], [412, 971], [971, 823], [971, 216], [971, 332], [971, 700], [971, 467], [448, 933], [649, 246], [957, 265], [125, 166], [105, 371], [615, 412], [246, 649], [240, 234], [932, 932], [183, 399], [255, 283], [971, 554], [971, 235], [971, 893], [971, 324], [160, 162], [971, 504], [947, 321], [64, 918], [971, 304], [971, 114], [971, 777], [971, 400], [971, 416], [812, 59], [44, 105], [105, 44], [40, 93], [971, 417], [971, 973], [971, 325], [971, 360], [971, 29], [971, 627], [971, 566], [971, 480], [971, 113], [971, 47], [918, 974], [859, 193], [859, 826], [63, 826], [63, 803], [162, 389], [971, 196], [971, 184], [971, 710], [971, 403], [971, 10], [971, 778], [167, 572], [971, 699], [362, 12], [971, 108], [971, 754], [283, 253], [283, 560], [971, 570], [971, 672], [971, 133], [971, 569], [155, 187], [859, 546], [367, 107], [390, 308], [971, 277], [971, 444], [971, 809], [83, 812], [170, 188], [193, 6], [572, 167], [913, 956], [913, 967], [412, 845], [412, 281], [283, 234], [129, 922], [971, 608], [971, 423], [914, 165], [325, 945], [971, 9], [971, 812], [971, 799], [971, 975], [971, 190], [971, 506], [971, 401], [896, 287], [971, 540], [971, 805], [971, 343], [971, 26], [971, 20], [971, 729], [971, 505], [971, 93], [971, 679], [971, 174], [131, 950], [290, 87], [971, 747], [971, 8], [971, 430], [971, 448], [971, 740], [971, 723], [971, 251], [971, 452], [971, 307], [971, 844], [971, 695], [87, 21], [87, 419], [484, 448], [22, 301], [685, 698], [685, 285], [685, 412], [263, 274], [263, 121], [957, 213], [6, 193], [820, 974], [937, 125], [133, 337], [133, 25], [133, 361], [133, 27], [133, 417], [133, 443], [133, 116], [133, 261], [133, 482], [133, 336], [133, 136], [133, 39], [133, 171], [133, 135], [133, 545], [900, 128], [128, 900], [459, 17], [333, 976], [366, 131], [186, 31], [274, 139], [270, 183], [820, 749], [118, 21], [301, 22], [115, 422], [375, 211], [777, 134], [7, 324], [131, 252], [131, 859], [366, 230], [272, 334], [951, 360], [366, 596], [44, 526], [211, 375], [954, 518], [914, 115], [210, 105], [21, 118], [230, 283], [230, 366], [142, 222], [492, 107], [281, 183], [459, 329], [243, 87], [57, 126], [177, 546], [375, 301], [596, 366], [249, 3], [930, 963], [497, 581], [526, 44], [508, 480], [105, 346], [301, 169], [579, 273], [346, 105], [209, 977], [183, 281], [158, 963], [509, 671], [47, 318], [367, 75], [252, 5], [252, 518], [166, 536], [455, 165], [455, 119], [455, 114], [494, 152], [455, 816], [455, 136], [292, 232], [455, 35], [252, 826], [509, 160], [963, 546], [19, 452], [546, 963], [131, 422], [253, 418], [253, 184], [422, 131], [3, 971], [422, 950], [118, 132], [305, 880], [231, 201], [11, 661], [812, 83], [914, 470], [11, 358], [131, 55], [11, 506], [812, 282], [11, 496], [496, 11], [847, 547], [880, 305], [282, 812], [115, 978], [121, 859], [86, 105], [86, 533], [105, 86], [405, 548], [547, 847], [295, 313], [171, 23], [23, 171], [859, 121], [513, 490], [11, 804], [318, 725], [932, 107], [547, 133], [133, 547], [86, 251], [177, 479], [655, 28], [484, 86], [484, 64], [204, 581], [509, 13], [222, 256], [222, 20], [126, 57], [509, 710], [379, 384], [435, 519], [237, 926], [820, 42], [86, 484], [222, 21], [19, 957], [371, 170], [371, 169], [494, 509], [498, 777], [246, 44], [13, 509], [409, 47], [409, 357], [409, 23], [75, 339], [919, 847], [246, 499], [292, 486], [919, 455], [896, 710], [776, 593], [932, 338], [963, 612], [301, 93], [86, 822], [170, 371], [253, 212], [68, 107], [474, 212], [131, 305], [612, 212], [608, 232], [608, 804], [608, 498], [154, 474], [215, 121], [4, 971], [114, 87], [953, 301], [140, 301], [121, 215], [29, 964], [93, 301], [242, 599], [947, 181], [234, 963], [215, 114], [215, 81], [974, 87], [87, 974], [971, 2], [430, 65], [211, 45], [21, 365], [963, 242], [223, 468], [162, 468], [2, 971], [458, 604], [139, 76], [320, 380], [320, 947], [320, 396], [922, 340], [188, 170], [287, 162], [212, 453], [212, 17], [321, 177], [333, 932], [710, 896], [710, 509], [42, 280], [42, 19], [212, 253], [222, 107], [160, 205], [249, 252], [249, 286], [249, 859], [979, 979], [494, 690], [218, 297], [218, 872], [218, 219], [963, 210], [963, 927], [963, 240], [963, 234], [339, 818], [177, 321], [26, 26], [756, 533], [333, 105], [280, 42], [244, 963], [107, 963], [495, 360], [107, 690], [494, 417], [23, 950], [417, 494], [281, 932], [211, 153], [80, 395], [506, 11], [86, 932], [13, 371], [19, 42], [84, 323], [546, 856], [105, 333], [957, 12], [329, 190], [976, 114], [529, 213], [979, 1], [979, 106], [979, 170], [979, 316], [225, 460], [65, 92], [822, 936], [92, 65], [509, 540], [822, 822], [599, 209], [599, 931], [195, 252], [195, 859], [540, 509], [540, 952], [518, 21], [22, 155], [155, 22], [976, 333], [976, 361], [976, 113], [976, 417], [976, 443], [976, 263], [976, 444], [976, 318], [976, 442], [976, 919], [976, 547], [976, 423], [976, 245], [976, 47], [976, 76], [976, 48], [976, 485], [976, 171], [933, 929], [933, 592], [933, 446], [933, 447], [933, 334], [223, 218], [114, 919], [114, 976], [83, 642], [154, 17], [409, 140], [409, 39], [252, 195], [371, 13], [358, 11], [427, 950], [113, 976], [572, 939], [48, 27], [54, 174], [33, 27], [174, 54], [301, 35], [76, 139], [222, 301], [856, 83], [810, 222], [939, 572], [932, 281], [11, 956], [358, 699], [358, 501], [932, 98], [914, 900], [282, 588], [86, 236], [546, 82], [395, 80], [498, 956], [498, 967], [723, 723], [446, 301], [952, 540], [15, 933], [290, 211], [921, 930], [818, 339], [166, 252], [93, 464], [129, 562], [562, 129], [464, 93], [563, 706], [131, 2], [485, 442], [367, 155], [299, 546], [98, 932], [147, 155], [931, 5], [211, 290], [155, 147], [84, 393], [218, 288], [573, 141], [113, 925], [107, 78], [218, 86], [187, 16], [96, 242], [128, 209], [8, 160], [131, 208], [710, 952], [933, 335], [132, 599], [952, 710], [306, 366], [930, 921], [33, 33], [83, 513], [342, 17], [342, 340], [342, 173], [342, 493], [342, 41], [83, 162], [170, 23], [932, 86], [5, 931], [5, 252], [5, 859], [285, 949], [5, 261], [52, 719], [263, 925], [263, 919], [263, 976], [488, 487], [300, 460], [597, 107], [956, 11], [518, 155], [922, 922], [39, 114], [114, 39], [949, 285], [311, 106], [106, 311], [980, 980], [342, 621], [342, 381], [342, 149], [342, 262], [342, 343], [342, 346], [342, 156], [342, 348], [342, 349], [342, 907], [342, 278], [342, 178], [342, 257], [422, 333], [246, 421], [342, 129], [342, 393], [836, 836], [152, 49], [177, 218], [393, 947], [162, 212], [930, 301], [7, 913], [974, 128], [856, 525], [856, 765], [494, 268], [480, 667], [667, 480], [980, 5], [510, 504], [222, 690], [922, 699], [922, 908], [922, 847], [922, 956], [922, 205], [922, 913], [922, 822], [260, 950], [107, 597], [168, 544], [160, 222], [342, 147], [977, 977], [404, 643], [5, 980], [976, 981], [272, 710], [847, 922], [719, 52], [495, 641], [389, 326], [184, 19], [29, 459], [19, 184], [860, 978], [521, 86], [976, 847], [976, 925], [372, 494], [430, 86], [268, 494], [541, 511], [976, 976], [541, 155], [242, 977], [299, 509], [581, 473], [155, 541], [64, 950], [201, 183], [169, 531], [243, 252], [480, 142], [211, 949], [335, 929], [132, 949], [12, 213], [281, 59], [649, 421], [908, 593], [908, 776], [105, 152], [621, 130], [526, 912], [531, 169], [318, 5], [422, 518], [124, 142], [292, 950], [142, 124], [411, 215], [982, 137], [215, 411], [85, 146], [176, 181], [114, 36], [932, 113], [932, 333], [11, 700], [11, 699], [581, 308], [107, 438], [438, 107], [5, 318], [256, 133], [5, 235], [116, 420], [68, 220], [487, 487], [644, 528], [473, 581], [544, 434], [963, 107], [933, 448], [40, 953], [492, 678], [427, 980], [409, 371], [809, 160], [169, 360], [11, 602], [77, 950], [107, 166], [360, 170], [333, 211], [139, 933], [160, 809], [160, 906], [151, 23], [443, 976], [420, 60], [13, 168], [13, 236], [13, 520], [18, 852], [541, 249], [249, 541], [980, 261], [543, 294], [963, 301], [509, 287], [851, 350], [345, 350], [162, 15], [252, 6], [252, 809], [24, 151], [160, 256], [3, 845], [83, 87], [83, 932], [83, 546], [228, 377], [932, 115], [115, 932], [115, 883], [652, 513], [271, 13], [840, 840], [826, 859], [430, 956], [13, 271], [500, 699], [459, 44], [301, 930], [301, 963], [269, 513], [459, 464], [131, 552], [124, 513], [427, 212], [908, 51], [908, 128], [908, 167], [908, 204], [908, 205], [980, 64], [956, 913], [26, 953], [685, 194], [963, 963], [146, 160], [145, 83], [42, 83], [393, 422], [823, 9], [74, 756], [74, 513], [12, 452], [753, 978], [340, 46], [197, 820], [963, 83], [486, 176], [286, 252], [183, 504], [83, 963], [753, 914], [615, 459], [510, 84], [349, 907], [971, 3], [28, 256], [59, 812], [756, 74], [462, 5], [546, 362], [812, 46], [953, 26], [552, 131], [18, 182], [182, 18], [434, 607], [548, 607], [481, 131], [912, 765], [350, 851], [546, 44], [141, 666], [367, 32], [5, 462], [6, 252], [231, 177], [976, 527], [976, 455], [20, 28], [177, 231], [21, 513], [513, 21], [24, 964], [443, 165], [137, 434], [420, 116], [381, 686], [459, 589], [33, 34], [33, 29], [33, 30], [33, 31], [33, 39], [747, 513], [627, 513], [252, 131], [825, 923], [455, 976], [86, 218], [180, 172], [63, 971], [918, 494], [30, 721], [106, 473], [86, 430], [275, 160], [42, 64], [28, 20], [447, 933], [211, 513], [86, 65], [23, 151], [33, 590], [434, 137], [544, 82], [5, 106], [5, 325], [106, 5], [106, 64], [243, 373], [493, 291], [900, 455], [9, 765], [929, 269], [340, 922], [981, 318], [981, 114], [981, 333], [520, 13], [6, 275], [260, 509], [823, 521], [513, 747], [661, 505], [974, 94], [88, 924], [88, 271], [420, 82], [210, 252], [926, 931], [927, 963], [573, 86], [329, 4], [556, 280], [493, 909], [51, 64], [64, 51], [602, 11], [94, 974], [547, 443], [197, 199], [215, 66], [296, 376], [131, 212], [932, 340], [932, 106], [932, 153], [932, 77], [932, 253], [932, 17], [932, 173], [932, 169], [932, 46], [932, 326], [932, 671], [932, 820], [932, 174], [932, 355], [932, 367], [932, 702], [932, 453], [932, 506], [932, 295], [932, 45], [932, 147], [932, 249], [86, 151], [300, 187], [160, 445], [932, 131], [932, 544], [932, 489], [932, 180], [278, 292], [255, 160], [154, 114], [300, 194], [301, 262], [262, 301], [611, 278], [310, 932], [132, 194], [525, 510], [170, 607], [957, 141], [951, 141], [498, 593], [498, 765], [187, 300], [6, 211], [211, 6], [707, 525], [194, 132], [80, 384], [168, 484], [441, 566], [3, 6], [777, 723], [777, 259], [212, 427], [820, 154], [113, 983], [155, 589], [478, 325], [259, 777], [131, 285], [238, 498], [480, 550], [154, 820], [480, 418], [404, 145], [593, 498], [353, 106], [368, 1], [212, 932], [914, 816], [914, 753], [919, 919], [919, 40], [145, 404], [607, 170], [498, 922], [40, 919], [126, 6], [963, 404], [404, 963], [64, 354], [455, 925], [459, 225], [455, 914], [211, 333], [59, 845], [154, 932], [154, 492], [254, 932], [333, 411], [333, 271], [509, 480], [671, 106], [932, 310], [914, 455], [546, 377], [167, 483], [840, 64], [64, 840], [133, 5], [311, 297], [311, 248], [311, 73], [156, 345], [170, 471], [377, 546], [949, 57], [204, 196], [165, 26], [165, 847], [165, 590], [165, 844], [59, 971], [86, 573], [406, 499], [669, 930], [57, 949], [271, 481], [699, 500], [529, 332], [271, 152], [401, 276], [408, 420], [5, 581], [5, 133], [6, 285], [6, 552], [6, 126], [152, 271], [21, 184], [93, 940], [212, 77], [498, 238], [427, 40], [440, 280], [96, 411], [615, 513], [32, 151], [411, 333], [411, 96], [411, 114], [113, 919], [917, 974], [509, 513], [170, 442], [590, 33], [151, 32], [513, 509], [922, 560], [280, 440], [232, 64], [420, 408], [39, 165], [142, 88], [92, 238], [822, 908], [135, 5], [235, 963], [856, 555], [471, 170], [644, 349], [448, 494], [896, 303], [437, 339], [44, 459], [418, 710], [560, 922], [310, 272], [54, 131], [131, 54], [87, 128], [40, 900], [491, 170], [170, 491], [152, 82], [306, 478], [333, 154], [223, 177], [478, 306], [131, 698], [698, 131], [271, 57], [285, 131], [840, 168], [55, 131], [5, 135], [61, 498], [286, 859], [981, 263], [5, 308], [5, 868], [5, 557], [5, 445], [945, 945], [710, 418], [198, 64], [86, 936], [459, 421], [666, 856], [550, 480], [154, 106], [417, 976], [417, 925], [254, 121], [168, 840], [812, 126], [459, 513], [303, 896], [529, 922], [125, 15], [167, 198], [167, 908], [167, 200], [167, 917], [167, 593], [167, 776], [167, 205], [167, 94], [167, 751], [167, 207], [859, 162], [108, 301], [301, 108], [457, 92], [159, 963], [466, 324], [42, 372], [105, 92], [59, 859], [466, 231], [160, 484], [138, 420], [358, 856], [141, 293], [141, 957], [141, 951], [856, 358], [160, 92], [92, 105], [92, 160], [252, 194], [123, 339], [453, 607], [211, 495], [368, 896], [271, 46], [271, 45], [545, 183], [405, 194], [126, 812], [19, 11], [678, 549], [45, 271], [10, 329], [550, 667], [954, 154], [301, 138], [301, 168], [509, 183], [895, 114], [128, 87], [333, 145], [333, 981], [86, 19], [707, 957], [243, 930], [196, 908], [847, 171], [86, 261], [453, 86], [163, 411], [271, 142], [411, 163], [271, 252], [271, 4], [494, 296], [13, 820], [820, 13], [24, 367], [179, 376], [963, 319], [372, 42], [546, 597], [232, 214], [271, 2], [214, 232], [581, 872], [581, 310], [232, 576], [271, 301], [912, 499], [232, 6], [153, 984], [100, 935], [685, 64], [913, 499], [921, 63], [100, 51], [51, 100], [2, 271], [929, 15], [6, 232], [297, 311], [971, 63], [459, 221], [900, 40], [331, 44], [509, 10], [949, 411], [513, 153], [411, 949], [367, 337], [367, 30], [367, 31], [367, 39], [607, 548], [607, 453], [268, 549], [607, 128], [473, 87], [856, 331], [271, 3], [294, 543], [87, 473], [212, 64], [138, 301], [310, 581], [509, 400], [560, 142], [329, 365], [13, 980], [160, 676], [286, 59], [859, 809], [913, 951], [409, 197], [409, 457], [980, 13], [97, 5], [5, 97], [820, 644], [204, 820], [26, 28], [6, 562], [672, 672], [162, 181], [914, 170], [562, 6], [204, 141], [53, 420], [872, 581], [859, 963], [685, 252], [116, 883], [125, 124], [125, 768], [494, 539], [404, 518], [66, 984], [548, 116], [932, 963], [932, 236], [473, 93], [216, 301], [13, 239], [45, 139], [115, 152], [333, 155], [949, 131], [177, 297], [240, 931], [513, 66], [922, 79], [931, 294], [160, 440], [726, 107], [271, 518], [922, 280], [152, 115], [395, 64], [963, 643], [467, 142], [86, 36], [301, 216], [159, 160], [922, 499], [152, 404], [820, 180], [170, 914], [64, 395], [666, 951], [845, 3], [932, 252], [252, 3], [932, 128], [128, 932], [907, 377], [187, 152], [153, 932], [155, 98], [98, 155], [509, 259], [419, 170], [820, 533], [155, 44], [333, 984], [956, 922], [30, 337], [30, 417], [30, 116], [30, 336], [30, 136], [30, 135], [13, 357], [337, 30], [932, 748], [932, 597], [129, 473], [95, 6], [172, 820], [455, 131], [455, 271], [949, 55], [949, 481], [900, 251], [492, 950], [379, 285], [937, 640], [129, 161], [161, 129], [17, 518], [886, 59], [44, 155], [160, 389], [154, 495], [932, 576], [450, 932], [490, 460], [177, 215], [59, 886], [163, 20], [193, 859], [460, 490], [366, 693], [64, 302], [197, 196], [333, 473], [473, 333], [329, 249], [90, 459], [498, 856], [411, 24], [411, 116], [411, 261], [411, 976], [856, 498], [5, 728], [261, 980], [376, 985], [506, 86], [87, 963], [411, 469], [411, 728], [411, 455], [411, 986], [411, 987], [411, 988], [411, 867], [908, 395], [411, 866], [47, 107], [906, 156], [963, 87], [271, 859], [255, 472], [42, 820], [125, 424], [178, 342], [469, 469], [117, 460], [128, 974], [974, 593], [395, 908], [186, 420], [3, 252], [3, 271], [905, 177], [434, 431], [989, 329], [172, 256], [492, 166], [403, 473], [223, 311], [298, 549], [420, 186], [403, 526], [155, 486], [142, 859], [115, 987], [612, 347], [280, 922], [304, 271], [339, 987], [698, 271], [932, 70], [509, 713], [269, 643], [883, 883], [424, 142], [152, 187], [317, 1], [346, 820], [251, 900], [925, 443], [283, 252], [443, 925], [710, 272], [252, 283], [753, 753], [419, 180], [272, 446], [471, 473], [169, 326], [546, 954], [301, 340], [297, 309], [19, 525], [183, 424], [66, 111], [301, 21], [809, 252], [949, 54], [949, 685], [949, 56], [949, 252], [949, 59], [87, 326], [518, 271], [886, 273], [469, 211], [469, 411], [3, 281], [309, 177], [309, 218], [309, 120], [309, 310], [309, 85], [309, 312], [309, 313], [309, 224], [309, 314], [309, 225], [309, 872], [309, 317], [309, 228], [309, 341], [309, 219], [499, 238], [420, 340], [85, 309], [215, 177], [317, 309], [859, 56], [859, 194], [859, 520], [859, 59], [859, 174], [927, 931], [321, 390], [346, 21], [211, 469], [211, 845], [211, 924], [60, 215], [252, 601], [238, 499], [56, 859], [431, 166], [131, 683], [700, 238], [93, 450], [405, 268], [353, 160], [138, 3], [989, 989], [823, 15], [953, 35], [132, 152], [177, 309], [183, 400], [919, 113], [974, 918], [333, 212], [212, 333], [87, 84], [152, 132], [822, 292], [446, 46], [154, 236], [154, 424], [446, 272], [128, 607], [47, 847], [856, 560], [980, 367], [980, 757], [238, 176], [411, 511], [166, 269], [373, 121], [176, 238], [419, 405], [419, 356], [333, 169], [333, 367], [343, 214], [333, 329], [333, 21], [333, 81], [450, 167], [169, 256], [114, 411], [340, 333], [204, 203], [393, 152], [194, 698], [39, 883], [225, 312], [698, 194], [533, 154], [533, 155], [21, 333], [560, 856], [880, 3], [21, 152], [252, 117], [252, 611], [252, 66], [252, 389], [252, 661], [252, 153], [252, 338], [252, 480], [252, 83], [252, 654], [152, 21], [883, 39], [355, 106], [278, 160], [423, 976], [411, 900], [271, 283], [271, 949], [896, 375], [21, 301], [421, 765], [856, 293], [464, 459], [248, 309], [180, 419], [367, 333], [573, 525], [10, 134], [537, 459], [537, 21], [537, 20], [537, 222], [537, 405], [537, 106], [537, 259], [537, 315], [537, 316], [537, 607], [133, 283], [950, 333], [28, 151], [459, 226], [509, 958], [293, 765], [339, 883], [0, 6], [931, 240], [107, 226], [20, 301], [560, 73], [883, 339], [268, 313], [404, 687], [252, 803], [212, 131], [93, 473], [86, 271], [86, 285], [411, 375], [114, 983], [180, 950], [301, 856], [143, 42], [86, 498], [164, 520], [537, 231], [93, 16], [231, 537], [908, 592], [252, 162], [210, 926], [162, 133], [280, 278], [3, 880], [209, 42], [283, 133], [18, 301], [73, 560], [950, 166], [953, 23], [171, 847], [474, 23], [474, 427], [474, 41], [474, 115], [970, 546], [896, 112], [474, 340], [970, 51], [970, 917], [970, 128], [544, 607], [375, 411], [85, 18], [300, 282], [221, 280], [929, 429], [280, 221], [569, 957], [457, 197], [457, 294], [197, 457], [955, 820], [845, 211], [59, 6], [520, 971], [18, 215], [570, 823], [6, 59], [856, 374], [856, 707], [856, 264], [823, 570], [474, 42], [42, 23], [42, 427], [42, 333], [232, 241], [232, 499], [981, 847], [981, 925], [981, 527], [981, 361], [981, 113], [981, 417], [981, 443], [981, 444], [981, 442], [981, 919], [981, 547], [981, 423], [981, 245], [981, 47], [981, 76], [981, 48], [981, 485], [981, 171], [42, 243], [42, 143], [253, 509], [859, 269], [509, 253], [957, 569], [243, 42], [856, 407], [422, 513], [163, 934], [455, 470], [271, 281], [466, 488], [914, 987], [263, 411], [131, 373], [949, 271], [424, 820], [981, 411], [42, 212], [424, 125], [0, 64], [820, 424], [295, 450], [812, 971], [281, 271], [525, 700], [756, 118], [812, 520], [494, 593], [34, 5], [118, 756], [64, 42], [913, 700], [5, 34], [131, 126], [196, 64], [259, 509], [64, 196], [525, 500], [215, 18], [411, 981], [114, 981], [981, 981], [829, 290], [86, 404], [856, 573], [160, 963], [820, 422], [971, 520], [371, 183], [49, 83], [424, 424], [856, 105], [892, 491], [194, 990], [74, 120], [74, 314], [74, 872], [314, 74], [531, 539], [153, 422], [277, 130], [375, 105], [859, 195], [283, 254], [357, 105], [313, 560], [366, 812], [610, 142], [51, 196], [273, 301], [160, 821], [6, 859], [569, 365], [859, 6], [422, 272], [268, 19], [32, 33], [921, 6], [981, 455], [821, 160], [504, 510], [496, 268], [520, 859], [803, 252], [194, 859], [6, 921], [922, 498], [411, 252], [128, 955], [321, 376], [376, 321], [412, 991], [737, 737], [19, 268], [991, 412], [271, 282], [142, 271], [164, 281], [83, 594], [131, 646], [131, 604], [10, 20], [822, 494], [509, 212], [32, 31], [54, 126], [305, 990], [303, 859], [180, 365], [115, 411], [927, 241], [851, 681], [690, 160], [872, 74], [31, 107], [30, 86], [426, 458], [285, 168], [285, 172], [285, 840], [285, 425], [285, 401], [285, 562], [285, 458], [285, 457], [340, 28], [226, 301], [226, 419], [513, 147], [42, 296], [42, 209], [859, 990], [197, 955], [2, 990], [4, 990], [83, 365], [5, 990], [160, 200], [546, 850], [546, 604], [93, 337], [93, 25], [93, 361], [93, 28], [93, 417], [93, 443], [93, 29], [93, 30], [93, 116], [93, 32], [93, 261], [93, 114], [93, 482], [93, 36], [93, 336], [93, 136], [93, 169], [93, 39], [93, 171], [93, 367], [93, 135], [93, 545], [569, 11], [400, 81], [371, 329], [371, 28], [371, 161], [371, 81], [371, 351], [458, 6], [6, 0], [79, 282], [282, 79], [490, 256], [269, 334], [252, 552], [126, 285], [235, 360], [101, 155], [218, 268], [12, 957], [602, 238], [306, 86], [282, 28], [80, 230], [32, 590], [337, 883], [45, 301], [820, 79], [783, 16], [783, 142], [118, 121], [812, 990], [326, 20], [142, 10], [685, 2], [142, 211], [142, 81], [133, 42], [142, 531], [142, 128], [142, 28], [142, 133], [883, 337], [142, 44], [142, 296], [142, 1], [360, 235], [515, 122], [261, 165], [173, 74], [173, 223], [520, 164], [113, 23], [33, 282], [932, 258], [39, 27], [81, 400], [990, 4], [11, 420], [2, 685], [421, 268], [356, 301], [80, 950], [400, 68], [420, 11], [142, 783], [932, 474], [327, 306], [327, 326], [334, 46], [481, 845], [353, 142], [189, 301], [845, 481], [389, 14], [652, 163], [86, 306], [163, 5], [568, 257], [527, 333], [859, 849], [257, 568], [408, 990], [301, 189], [494, 226], [963, 160], [300, 12], [238, 700], [978, 900], [978, 860], [211, 243], [531, 142], [992, 992], [992, 129], [337, 27], [82, 282], [32, 35], [486, 417], [900, 5], [113, 981], [17, 696], [412, 211], [112, 469], [601, 333], [281, 105], [211, 87], [281, 990], [105, 281], [24, 988], [408, 193], [113, 165], [30, 160], [429, 274], [549, 360], [549, 104], [812, 4], [282, 221], [6, 316], [160, 123], [101, 581], [367, 82], [82, 601], [82, 932], [221, 282], [408, 993], [226, 513], [950, 427], [404, 16], [601, 82], [5, 55], [5, 900], [404, 896], [221, 106], [896, 404], [121, 31], [121, 963], [932, 44], [932, 856], [82, 693], [82, 372], [82, 160], [82, 373], [82, 594], [82, 752], [160, 82], [131, 121], [373, 82], [75, 655], [405, 518], [581, 101], [214, 179], [699, 699], [699, 953], [699, 845], [671, 411], [55, 949], [949, 949], [193, 408], [6, 994], [338, 987], [562, 515], [470, 986], [216, 142], [494, 312], [176, 318], [312, 494], [54, 807], [552, 515], [105, 375], [138, 990], [295, 424], [295, 142], [122, 515], [268, 218], [252, 740], [225, 494], [480, 601], [601, 480], [105, 357], [932, 233], [932, 212], [932, 163], [932, 269], [932, 23], [932, 393], [932, 404], [932, 493], [932, 586], [932, 427], [932, 41], [82, 172], [82, 292], [199, 42], [366, 121], [151, 142], [155, 236], [297, 86], [107, 726], [234, 166], [268, 419], [932, 812], [932, 3], [995, 712], [404, 950], [166, 234], [311, 301], [932, 371], [495, 107], [621, 284], [810, 180], [758, 758], [301, 180], [845, 193], [82, 376], [82, 150], [612, 492], [492, 612], [82, 255], [82, 279], [82, 641], [82, 541], [730, 82], [495, 82], [279, 82], [82, 438], [207, 343], [82, 509], [82, 345], [82, 681], [82, 191], [82, 708], [82, 99], [679, 508], [343, 207], [129, 748], [641, 82], [748, 129], [184, 105], [187, 932], [160, 880], [107, 124], [18, 219], [258, 152], [336, 883], [53, 82], [105, 184], [183, 822], [13, 949], [464, 82], [99, 82], [445, 82], [509, 82], [154, 954], [525, 238], [845, 699], [845, 953], [845, 924], [426, 956], [845, 812], [277, 621], [238, 525], [213, 44], [990, 138], [513, 218], [238, 92], [238, 602], [142, 256], [172, 365], [87, 280], [87, 661], [82, 963], [263, 981], [82, 859], [80, 105], [859, 82], [546, 245], [931, 301], [303, 82], [699, 924], [163, 932], [105, 10], [332, 529], [42, 422], [856, 246], [856, 956], [820, 63], [105, 80], [131, 419], [131, 82], [4, 82], [42, 492], [494, 252], [166, 340], [268, 421], [765, 44], [543, 113], [520, 812], [113, 220], [440, 129], [171, 160], [978, 165], [113, 543], [118, 748], [280, 87], [922, 856], [261, 82], [375, 230], [133, 142], [473, 116], [473, 170], [856, 922], [422, 473], [44, 932], [460, 256], [359, 44], [168, 6], [6, 168], [621, 277], [621, 781], [304, 58], [388, 130], [411, 405], [832, 102], [193, 990], [952, 81], [170, 183], [392, 393], [81, 952], [301, 36], [581, 445], [914, 531], [498, 488], [40, 40], [531, 914], [82, 124], [506, 409], [883, 336], [900, 165], [907, 593], [531, 183], [301, 931], [391, 391], [546, 163], [160, 96], [160, 194], [593, 907], [160, 423], [812, 991], [963, 950], [359, 951], [252, 282], [282, 252], [96, 160], [913, 972], [717, 459], [481, 281], [473, 63], [411, 318], [651, 2], [42, 459], [42, 495], [42, 163], [42, 255], [42, 490], [293, 661], [661, 293], [254, 518], [30, 121], [932, 210], [282, 256], [118, 83], [932, 303], [293, 856], [426, 160], [269, 422], [236, 155], [896, 368], [167, 296], [6, 323], [27, 121], [263, 29], [323, 6], [473, 35], [155, 104], [337, 424], [42, 671], [322, 933], [283, 280], [166, 459], [431, 431], [458, 152], [14, 283], [933, 322], [768, 323], [963, 121], [932, 63], [932, 859], [280, 283], [932, 211], [152, 458], [338, 16], [106, 280], [106, 114], [106, 607], [953, 699], [953, 845], [424, 337], [392, 283], [424, 401], [83, 118], [932, 227], [949, 698], [548, 497], [548, 816], [35, 473], [546, 252], [248, 221], [42, 473], [424, 316], [17, 932], [129, 546], [231, 214], [224, 160], [546, 129], [947, 394], [486, 232], [394, 947], [506, 913], [232, 486], [141, 913], [113, 106], [655, 980], [211, 932], [4, 323], [183, 11], [523, 618], [698, 949], [63, 126], [856, 186], [258, 347], [126, 131], [323, 4], [375, 514], [593, 201], [543, 291], [232, 294], [932, 531], [477, 375], [107, 207], [207, 107], [812, 932], [81, 162], [812, 812], [473, 493], [473, 129], [473, 393], [473, 296], [473, 441], [473, 404], [142, 483], [473, 355], [473, 459], [473, 340], [300, 11], [473, 531], [473, 329], [473, 474], [434, 677], [473, 269], [473, 46], [473, 211], [473, 147], [473, 163], [473, 490], [269, 473], [86, 706], [473, 489], [473, 767], [473, 174], [473, 963], [147, 473], [963, 473], [371, 473], [155, 593], [489, 473], [326, 87], [291, 464], [291, 290], [291, 133], [291, 14], [812, 635], [963, 932], [340, 473], [529, 913], [205, 79], [174, 473], [473, 3], [141, 420], [424, 483], [107, 64], [932, 642], [932, 296], [931, 210], [11, 183], [932, 255], [448, 87], [11, 300], [12, 996], [820, 932], [371, 424], [473, 280], [121, 208], [87, 448], [423, 981], [256, 152], [996, 12], [420, 141], [221, 225], [94, 294], [131, 963], [265, 503], [435, 942], [210, 931], [224, 224], [126, 63], [126, 54], [506, 7], [963, 131], [177, 533], [833, 7], [7, 833], [373, 311], [423, 527], [423, 361], [423, 443], [423, 847], [423, 925], [423, 442], [423, 547], [423, 47], [423, 48], [423, 171], [253, 932], [3, 473], [400, 509], [163, 42], [107, 509], [64, 99], [509, 518], [473, 362], [756, 183], [932, 21], [179, 365], [129, 282], [173, 932], [280, 473], [282, 533], [649, 452], [210, 160], [141, 601], [249, 179], [642, 42], [445, 917], [601, 141], [160, 826], [409, 346], [334, 579], [23, 337], [210, 282], [155, 157], [337, 23], [487, 213], [506, 503], [271, 470], [963, 82], [358, 913], [11, 365], [86, 855], [5, 99], [346, 409], [473, 326], [86, 191], [859, 932], [621, 518], [440, 365], [952, 28], [506, 452], [282, 129], [518, 621], [118, 326], [177, 200], [131, 932], [458, 426], [94, 86], [150, 389], [991, 812], [255, 42], [282, 190], [496, 506], [932, 114], [816, 151], [151, 816], [191, 86], [533, 129], [508, 546], [231, 457], [106, 17], [452, 506], [40, 964], [118, 300], [991, 520], [300, 118], [812, 215], [190, 282], [932, 28], [520, 991], [457, 231], [503, 506], [301, 28], [471, 256], [10, 86], [932, 81], [913, 44], [935, 100], [932, 495], [484, 292], [393, 932], [206, 575], [142, 932], [257, 543], [292, 484], [183, 562], [326, 118], [294, 457], [210, 244], [562, 183], [271, 56], [271, 80], [63, 473], [426, 391], [28, 952], [355, 473], [373, 131], [488, 496], [80, 271], [147, 932], [396, 379], [156, 122], [591, 142], [282, 932], [122, 156], [572, 294], [597, 651], [907, 179], [756, 42], [42, 756], [252, 932], [408, 473], [160, 799], [872, 182], [212, 411], [231, 179], [947, 947], [577, 377], [56, 4], [252, 87], [182, 872], [24, 953], [24, 997], [933, 956], [937, 937], [180, 932], [142, 597], [155, 377], [141, 107], [546, 509], [495, 278], [494, 932], [926, 301], [107, 179], [156, 906], [316, 6], [170, 497], [107, 468], [107, 18], [412, 105], [170, 282], [86, 33], [405, 4], [146, 226], [10, 105], [282, 170], [497, 170], [510, 12], [487, 922], [430, 420], [860, 170], [411, 400], [649, 466], [105, 412], [164, 579], [671, 690], [10, 282], [877, 28], [275, 86], [497, 548], [474, 932], [859, 991], [191, 645], [107, 96], [400, 411], [107, 591], [160, 492], [281, 164], [492, 160], [20, 932], [548, 753], [499, 700], [579, 429], [931, 243], [214, 284], [922, 487], [107, 214], [28, 877], [18, 107], [284, 130], [859, 132], [969, 509], [285, 990], [169, 33], [980, 470], [917, 483], [254, 433], [607, 365], [253, 142], [513, 365], [226, 225], [459, 340], [453, 932], [930, 208], [85, 467], [816, 987], [411, 816], [845, 56], [225, 226], [896, 2], [268, 405], [70, 212], [969, 184], [3, 405], [249, 513], [249, 172], [405, 3], [2, 405], [2, 896], [193, 845], [4, 405], [211, 990], [467, 85], [980, 427], [473, 427], [473, 367], [256, 256], [473, 115], [27, 953], [27, 997], [33, 32], [335, 933], [154, 282], [329, 989], [373, 964], [437, 169], [820, 16], [307, 218], [107, 568], [466, 510], [87, 42], [28, 473], [129, 484], [484, 129], [300, 662], [268, 300], [925, 263], [820, 950], [5, 763], [20, 260], [20, 10], [20, 42], [13, 177], [493, 473], [334, 322], [473, 201], [473, 141], [159, 926], [159, 927], [763, 5], [387, 950], [141, 922], [925, 333], [685, 990], [900, 115], [138, 880], [248, 372], [269, 282], [456, 64], [212, 70], [40, 816], [492, 932], [765, 365], [261, 29], [133, 820], [265, 161], [473, 421], [473, 483], [932, 492], [28, 301], [947, 377], [160, 339], [65, 818], [65, 998], [65, 525], [65, 352], [65, 264], [65, 320], [65, 334], [65, 639], [65, 358], [65, 135], [65, 307], [65, 177], [65, 515], [65, 176], [65, 204], [65, 0], [65, 483], [65, 990], [13, 29], [13, 167], [409, 177], [335, 45], [546, 256], [909, 280], [474, 859], [215, 812], [963, 859], [173, 859], [506, 293], [440, 970], [80, 474], [294, 572], [503, 44], [81, 932], [124, 335], [509, 969], [509, 546], [211, 128], [63, 405], [63, 896], [427, 932], [24, 411], [411, 338], [32, 28], [147, 859], [466, 53], [859, 147], [420, 12], [169, 16], [812, 950], [420, 53], [531, 367], [494, 529], [322, 929], [170, 900], [170, 860], [929, 322], [210, 3], [122, 468], [690, 316], [453, 745], [427, 107], [892, 423], [579, 164], [579, 272], [859, 971], [177, 409], [404, 932], [142, 46], [138, 921], [143, 405], [921, 138], [440, 733], [108, 409], [46, 128], [46, 3], [46, 137], [932, 419], [816, 336], [909, 87], [96, 107], [411, 115], [423, 301], [765, 499], [25, 24], [87, 909], [913, 699], [295, 947], [301, 423], [64, 640], [503, 61], [546, 462], [465, 316], [189, 966], [822, 900], [822, 953], [225, 215], [607, 296], [607, 105], [292, 822], [955, 955], [488, 499], [305, 420], [160, 490], [563, 936], [909, 546], [160, 601], [710, 189], [494, 544], [417, 170], [61, 503], [420, 305], [16, 121], [153, 211], [3, 210], [3, 128], [3, 371], [3, 211], [3, 46], [339, 179], [325, 260], [932, 31], [612, 162], [316, 465], [140, 735], [971, 971], [28, 932], [880, 252], [127, 613], [932, 68], [81, 518], [271, 400], [921, 412], [619, 5], [278, 789], [826, 63], [458, 714], [419, 300], [82, 563], [563, 93], [563, 82], [409, 338], [93, 563], [409, 506], [956, 506], [956, 362], [820, 301], [18, 120], [453, 170], [405, 143], [405, 78], [311, 756], [499, 246], [160, 15], [300, 268], [334, 933], [200, 917], [156, 321], [15, 160], [86, 229], [86, 31], [980, 119], [16, 338], [448, 16], [215, 214], [16, 448], [4, 360], [4, 430], [214, 215], [473, 411], [268, 934], [184, 82], [252, 236], [186, 932], [499, 86], [83, 465], [87, 607], [120, 18], [607, 87], [607, 544], [613, 747], [613, 163], [613, 537], [458, 789], [487, 452], [999, 145], [937, 64], [465, 83], [420, 430], [224, 309], [84, 492], [176, 423], [726, 283], [93, 789], [129, 932], [77, 932], [423, 176], [134, 777], [756, 166], [283, 726], [340, 932], [171, 64], [166, 756], [186, 450], [812, 193], [145, 999], [424, 448], [64, 937], [812, 272], [480, 362], [450, 186], [224, 64], [154, 963], [963, 154], [498, 503], [183, 170], [607, 460], [412, 473], [64, 224], [412, 81], [437, 337], [437, 25], [437, 443], [437, 30], [437, 816], [437, 261], [437, 547], [437, 47], [437, 336], [443, 437], [448, 421], [300, 42], [105, 170], [194, 252], [460, 607], [193, 812], [193, 252], [937, 404], [272, 812], [170, 513], [260, 260], [473, 412], [42, 300], [47, 437], [552, 256], [812, 826], [269, 932], [455, 29], [170, 987], [404, 421], [419, 607], [411, 170], [518, 771], [333, 983], [145, 326], [979, 745], [393, 421], [437, 847], [246, 141], [181, 950], [298, 301], [445, 5], [546, 106], [859, 64], [106, 546], [473, 80], [504, 967], [932, 129], [430, 421], [419, 131], [419, 932], [20, 329], [936, 936], [184, 420], [329, 20], [245, 981], [170, 105], [922, 529], [408, 859], [333, 421], [518, 121], [321, 349], [321, 179], [261, 986], [253, 121], [932, 254], [420, 184], [537, 74], [217, 49], [789, 5], [168, 133], [215, 340], [427, 87], [422, 819], [756, 375], [375, 756], [283, 137], [283, 3], [766, 766], [766, 521], [134, 766], [671, 375], [766, 134], [5, 789], [62, 708], [812, 803], [803, 193], [166, 166], [68, 142], [181, 133], [187, 42], [44, 529], [139, 541], [932, 420], [80, 473], [7, 720], [7, 956], [7, 922], [7, 765], [115, 421], [121, 425], [107, 201], [107, 206], [403, 493], [193, 803], [19, 121], [405, 162], [186, 490], [121, 473], [121, 419], [518, 106], [473, 121], [64, 292], [419, 121], [105, 347], [568, 121], [420, 337], [45, 16], [145, 20], [545, 462], [699, 913], [118, 667], [548, 365], [168, 122], [249, 548], [133, 419], [23, 932], [607, 106], [122, 168], [833, 856], [404, 217], [217, 404], [292, 1000], [1000, 232], [7, 420], [105, 607], [549, 877], [549, 299], [215, 347], [215, 440], [162, 186], [168, 900], [168, 822], [409, 28], [489, 249], [756, 223], [268, 340], [420, 325], [201, 278], [166, 242], [166, 320], [404, 373], [20, 271], [54, 107], [803, 63], [18, 365], [133, 181], [435, 163], [1000, 918], [6, 1001], [212, 191], [661, 440], [918, 1000], [93, 883], [896, 63], [932, 490], [932, 165], [252, 419], [883, 93], [409, 667], [191, 212], [490, 356], [490, 258], [212, 856], [170, 163], [86, 753], [86, 115], [86, 170], [474, 474], [252, 427], [68, 212], [427, 252], [427, 546], [271, 10], [14, 128], [128, 14], [252, 849], [333, 249], [103, 182], [74, 537], [166, 429], [166, 446], [8, 950], [52, 197], [424, 170], [5, 690], [159, 166], [213, 720], [213, 573], [213, 602], [213, 266], [213, 332], [213, 525], [213, 452], [213, 700], [266, 213], [166, 143], [213, 823], [132, 234], [823, 213], [295, 717], [170, 424], [321, 157], [321, 389], [321, 392], [321, 397], [321, 378], [321, 384], [321, 385], [321, 387], [321, 388], [321, 395], [321, 396], [321, 150], [95, 917], [429, 166], [720, 213], [458, 543], [1001, 6], [326, 325], [326, 327], [237, 236], [777, 777], [707, 213], [589, 256], [249, 833], [690, 5], [123, 987], [318, 40], [212, 68], [166, 42], [929, 592], [27, 883], [166, 1000], [197, 52], [291, 93], [4, 166], [411, 859], [411, 323], [859, 411], [513, 268], [510, 499], [1000, 166], [84, 119], [953, 900], [953, 822], [953, 997], [953, 292], [833, 249], [494, 113], [925, 417], [155, 877], [599, 481], [106, 548], [601, 536], [106, 28], [499, 510], [393, 607], [12, 638], [491, 497], [491, 816], [491, 753], [1001, 2], [116, 987], [859, 803], [42, 607], [883, 27], [896, 12], [254, 211], [181, 283], [420, 68], [820, 420], [42, 166], [367, 106], [789, 458], [323, 271], [156, 734], [271, 323], [2, 1001], [560, 1], [560, 1002], [560, 276], [560, 221], [560, 224], [560, 218], [560, 386], [560, 21], [560, 313], [560, 363], [560, 607], [930, 927], [93, 291], [50, 654], [833, 833], [601, 121], [927, 930], [612, 427], [473, 642], [490, 128], [221, 560], [86, 196], [859, 212], [122, 411], [419, 296], [9, 957], [167, 420], [196, 86], [86, 459], [179, 160], [958, 509], [490, 420], [833, 62], [142, 68], [900, 987], [411, 123], [932, 83], [123, 411], [494, 287], [482, 655], [421, 365], [166, 4], [249, 421], [165, 86], [464, 450], [166, 150], [166, 0], [166, 181], [166, 857], [180, 421], [222, 607], [121, 433], [255, 421], [166, 529], [453, 420], [213, 8], [917, 557], [917, 445], [114, 420], [412, 826], [4, 880], [128, 490], [249, 170], [820, 421], [196, 918], [323, 654], [196, 593], [196, 776], [196, 205], [269, 254], [139, 274], [287, 494], [420, 19], [151, 27], [172, 87], [420, 190], [212, 212], [445, 256], [445, 518], [19, 420], [162, 236], [556, 113], [404, 420], [367, 420], [145, 612], [271, 513], [133, 600], [165, 105], [513, 271], [91, 989], [230, 533], [593, 974], [299, 80], [860, 337], [860, 116], [860, 123], [860, 165], [860, 336], [860, 338], [860, 339], [113, 556], [420, 474], [166, 3], [80, 299], [1001, 4], [299, 287], [936, 546], [23, 421], [287, 299], [42, 221], [105, 215], [215, 249], [278, 495], [223, 73], [655, 427], [922, 53], [526, 221], [8, 213], [529, 166], [438, 987], [1000, 14], [1003, 258], [411, 438], [258, 1003], [925, 981], [726, 212], [506, 466], [212, 726], [914, 135], [146, 533], [55, 1004], [213, 503], [135, 914], [169, 987], [245, 329], [777, 86], [438, 411], [546, 936], [86, 466], [420, 222], [466, 86], [974, 917], [419, 91], [419, 253], [607, 243], [91, 419], [116, 411], [240, 963], [503, 213], [213, 956], [213, 913], [0, 166], [89, 924], [301, 8], [420, 114], [62, 833], [1000, 292], [420, 280], [803, 990], [437, 900], [914, 105], [420, 133], [62, 212], [62, 131], [62, 586], [62, 812], [607, 471], [338, 420], [280, 420], [329, 245], [242, 926], [8, 301], [44, 10], [3, 990], [851, 214], [133, 420], [132, 859], [290, 184], [285, 921], [4, 1001], [826, 990], [826, 1001], [471, 607], [46, 812], [45, 933], [42, 343], [420, 230], [212, 641], [312, 420], [13, 244], [68, 366], [654, 121], [607, 42], [733, 825], [160, 228], [607, 421], [160, 429], [3, 1001], [509, 190], [172, 212], [329, 486], [56, 921], [480, 107], [173, 366], [205, 955], [265, 856], [420, 188], [429, 160], [249, 388], [949, 880], [32, 165], [313, 623], [68, 420], [152, 395], [509, 420], [549, 371], [549, 296], [832, 520], [299, 968], [249, 950], [422, 244], [244, 422], [102, 832], [361, 981], [87, 45], [953, 590], [226, 533], [113, 950], [152, 494], [152, 86], [13, 302], [316, 420], [188, 420], [205, 917], [520, 832], [577, 757], [422, 424], [256, 489], [47, 925], [925, 47], [917, 27], [32, 883], [707, 950], [115, 163], [373, 306], [250, 368], [496, 922], [424, 422], [426, 231], [7, 212], [278, 347], [212, 7], [420, 189], [883, 32], [958, 962], [160, 529], [160, 496], [409, 151], [420, 820], [1001, 193], [1001, 826], [1001, 194], [1001, 832], [1001, 803], [1001, 990], [107, 222], [420, 218], [163, 170], [661, 569], [533, 607], [52, 128], [223, 142], [373, 112], [128, 52], [160, 857], [420, 163], [607, 533], [621, 160], [607, 256], [420, 293], [592, 929], [536, 601], [148, 225], [163, 420], [720, 856], [180, 420], [856, 720], [160, 346], [120, 0], [230, 5], [285, 420], [5, 230], [51, 200], [460, 440], [460, 347], [232, 1000], [913, 707], [207, 160], [579, 335], [579, 929], [579, 334], [565, 823], [968, 968], [388, 249], [918, 232], [65, 107], [420, 450], [1000, 206], [420, 172], [593, 918], [420, 666], [409, 36], [420, 99], [420, 404], [420, 520], [66, 91], [420, 526], [271, 256], [859, 408], [419, 84], [129, 377], [142, 151], [13, 900], [925, 318], [925, 114], [925, 423], [925, 245], [925, 48], [206, 1000], [420, 367], [546, 803], [707, 499], [707, 602], [13, 297], [59, 990], [121, 458], [900, 13], [241, 232], [420, 28], [256, 87], [28, 420], [420, 285], [87, 227], [420, 143], [174, 859], [440, 460], [52, 786], [506, 932]]";function yo(t){return yo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},yo(t)}function Mo(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(void 0,r=function(t,e){if("object"!==yo(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!==yo(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i.key),"symbol"===yo(r)?r:String(r)),i)}var r}function Eo(t,e,n){return e&&Mo(t.prototype,e),n&&Mo(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}const So=Eo((function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.panel=new go({width:300});var n=this.panel.addFolder("Vizualization");n.add({"Show between layer edges":!1},"Show between layer edges").listen().onChange((function(t){e.show_between_layer_edges(t)})),n.add({"Show layer edges":!1},"Show layer edges").listen().onChange((function(t){e.show_layer_edges(t)})),n.add({"Show wrong vertexes":!0},"Show wrong vertexes").listen().onChange((function(t){e.show_wrong_vertexes(t)}));var i=n.addFolder("Layers");i.add({"Layer 0 (Independent set)":!0},"Layer 0 (Independent set)").listen().onChange((function(t){e.enable_layer(0,t)})),i.add({"Layer 1 (Dist = 1)":!0},"Layer 1 (Dist = 1)").listen().onChange((function(t){e.enable_layer(1,t)})),i.add({"Layer 2 (Dist = 2)":!0},"Layer 2 (Dist = 2)").listen().onChange((function(t){e.enable_layer(2,t)})),i.add({"Layer 3 (Lost | Dist > 2)":!0},"Layer 3 (Lost | Dist > 2)").listen().onChange((function(t){e.enable_layer(3,t)})),i.close(),n.close();var r=this.panel.addFolder("Loaders");r.add({Graph:xo.substring(1,294981)},"Graph").onFinishChange((function(t){e.graph.loadGraph("["+t+"]"),e.update_graph()})),r.add({"Independent set":e.graph.independentSet.toString()},"Independent set").onFinishChange((function(t){e.graph.loadIndependentSet("["+t+"]"),e.update_state()})),r.open();var a=this.panel.addFolder("Algorithm");a.add({"Find independent set":function(){var t=e.graph.findIndependentSet();console.log(t)}},"Find independent set"),a.close(),this.stats=new vo,document.body.appendChild(this.stats.dom)}));var bo=new to,To=new(e());To.loadGraph(xo);var wo=window.location.href,Ao=new URL(wo).searchParams.get("IS");Ao=null==Ao?"[40, 43]":"["+Ao+"]",To.loadIndependentSet(Ao);var Ro=new So(new Gs(To,bo.scene));function Co(){requestAnimationFrame(Co),bo.controls.update(),bo.renderer.render(bo.scene,bo.camera),Ro.stats.update()}window.addEventListener("resize",(function(){bo.camera.aspect=window.innerWidth/window.innerHeight,bo.camera.updateProjectionMatrix(),bo.renderer.setSize(window.innerWidth,window.innerHeight),Co()}),!1),null!=bo&&Co()})()})();